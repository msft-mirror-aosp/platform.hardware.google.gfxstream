// Copyright (C) 2018 The Android Open Source Project
// Copyright (C) 2018 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Autogenerated module goldfish_vk_reserved_marshaling
//
// (header) generated by codegen/vulkan/vulkan-docs-next/scripts/genvk.py -registry
// codegen/vulkan/vulkan-docs-next/xml/vk.xml -registryGfxstream
// codegen/vulkan/vulkan-docs-next/xml/vk_gfxstream.xml cereal -o host/vulkan/cereal
//
// Please do not modify directly;
// re-run gfxstream-protocols/scripts/generate-vulkan-sources.sh,
// or directly from Python by defining:
// VULKAN_REGISTRY_XML_DIR : Directory containing vk.xml
// VULKAN_REGISTRY_SCRIPTS_DIR : Directory containing genvk.py
// CEREAL_OUTPUT_DIR: Where to put the generated sources.
//
// python3 $VULKAN_REGISTRY_SCRIPTS_DIR/genvk.py -registry $VULKAN_REGISTRY_XML_DIR/vk.xml cereal -o
// $CEREAL_OUTPUT_DIR
//
#pragma once
#include <vulkan/vulkan.h>

#include "VulkanStream.h"
#include "aemu/base/files/StreamSerializing.h"
#include "goldfish_vk_private_defs.h"
#include "vk_android_native_buffer_gfxstream.h"
#include "vulkan_gfxstream.h"

namespace gfxstream {
namespace vk {

#ifdef VK_VERSION_1_0
void reservedunmarshal_VkExtent2D(VulkanStream* vkStream, VkStructureType rootType,
                                  VkExtent2D* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkExtent3D(VulkanStream* vkStream, VkStructureType rootType,
                                  VkExtent3D* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkOffset2D(VulkanStream* vkStream, VkStructureType rootType,
                                  VkOffset2D* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkOffset3D(VulkanStream* vkStream, VkStructureType rootType,
                                  VkOffset3D* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkRect2D(VulkanStream* vkStream, VkStructureType rootType,
                                VkRect2D* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkBaseInStructure(VulkanStream* vkStream, VkStructureType rootType,
                                         VkBaseInStructure* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkBaseOutStructure(VulkanStream* vkStream, VkStructureType rootType,
                                          VkBaseOutStructure* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkBufferMemoryBarrier(VulkanStream* vkStream, VkStructureType rootType,
                                             VkBufferMemoryBarrier* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkDispatchIndirectCommand(VulkanStream* vkStream, VkStructureType rootType,
                                                 VkDispatchIndirectCommand* forUnmarshaling,
                                                 uint8_t** ptr);

void reservedunmarshal_VkDrawIndexedIndirectCommand(VulkanStream* vkStream,
                                                    VkStructureType rootType,
                                                    VkDrawIndexedIndirectCommand* forUnmarshaling,
                                                    uint8_t** ptr);

void reservedunmarshal_VkDrawIndirectCommand(VulkanStream* vkStream, VkStructureType rootType,
                                             VkDrawIndirectCommand* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkImageSubresourceRange(VulkanStream* vkStream, VkStructureType rootType,
                                               VkImageSubresourceRange* forUnmarshaling,
                                               uint8_t** ptr);

void reservedunmarshal_VkImageMemoryBarrier(VulkanStream* vkStream, VkStructureType rootType,
                                            VkImageMemoryBarrier* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkMemoryBarrier(VulkanStream* vkStream, VkStructureType rootType,
                                       VkMemoryBarrier* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPipelineCacheHeaderVersionOne(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPipelineCacheHeaderVersionOne* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkAllocationCallbacks(VulkanStream* vkStream, VkStructureType rootType,
                                             VkAllocationCallbacks* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkApplicationInfo(VulkanStream* vkStream, VkStructureType rootType,
                                         VkApplicationInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkFormatProperties(VulkanStream* vkStream, VkStructureType rootType,
                                          VkFormatProperties* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkImageFormatProperties(VulkanStream* vkStream, VkStructureType rootType,
                                               VkImageFormatProperties* forUnmarshaling,
                                               uint8_t** ptr);

void reservedunmarshal_VkInstanceCreateInfo(VulkanStream* vkStream, VkStructureType rootType,
                                            VkInstanceCreateInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkMemoryHeap(VulkanStream* vkStream, VkStructureType rootType,
                                    VkMemoryHeap* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkMemoryType(VulkanStream* vkStream, VkStructureType rootType,
                                    VkMemoryType* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceFeatures(VulkanStream* vkStream, VkStructureType rootType,
                                                VkPhysicalDeviceFeatures* forUnmarshaling,
                                                uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceLimits(VulkanStream* vkStream, VkStructureType rootType,
                                              VkPhysicalDeviceLimits* forUnmarshaling,
                                              uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceMemoryProperties(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceMemoryProperties* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceSparseProperties(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceSparseProperties* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceProperties(VulkanStream* vkStream, VkStructureType rootType,
                                                  VkPhysicalDeviceProperties* forUnmarshaling,
                                                  uint8_t** ptr);

void reservedunmarshal_VkQueueFamilyProperties(VulkanStream* vkStream, VkStructureType rootType,
                                               VkQueueFamilyProperties* forUnmarshaling,
                                               uint8_t** ptr);

void reservedunmarshal_VkDeviceQueueCreateInfo(VulkanStream* vkStream, VkStructureType rootType,
                                               VkDeviceQueueCreateInfo* forUnmarshaling,
                                               uint8_t** ptr);

void reservedunmarshal_VkDeviceCreateInfo(VulkanStream* vkStream, VkStructureType rootType,
                                          VkDeviceCreateInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkExtensionProperties(VulkanStream* vkStream, VkStructureType rootType,
                                             VkExtensionProperties* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkLayerProperties(VulkanStream* vkStream, VkStructureType rootType,
                                         VkLayerProperties* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkSubmitInfo(VulkanStream* vkStream, VkStructureType rootType,
                                    VkSubmitInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkMappedMemoryRange(VulkanStream* vkStream, VkStructureType rootType,
                                           VkMappedMemoryRange* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkMemoryAllocateInfo(VulkanStream* vkStream, VkStructureType rootType,
                                            VkMemoryAllocateInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkMemoryRequirements(VulkanStream* vkStream, VkStructureType rootType,
                                            VkMemoryRequirements* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkSparseMemoryBind(VulkanStream* vkStream, VkStructureType rootType,
                                          VkSparseMemoryBind* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkSparseBufferMemoryBindInfo(VulkanStream* vkStream,
                                                    VkStructureType rootType,
                                                    VkSparseBufferMemoryBindInfo* forUnmarshaling,
                                                    uint8_t** ptr);

void reservedunmarshal_VkSparseImageOpaqueMemoryBindInfo(
    VulkanStream* vkStream, VkStructureType rootType,
    VkSparseImageOpaqueMemoryBindInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkImageSubresource(VulkanStream* vkStream, VkStructureType rootType,
                                          VkImageSubresource* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkSparseImageMemoryBind(VulkanStream* vkStream, VkStructureType rootType,
                                               VkSparseImageMemoryBind* forUnmarshaling,
                                               uint8_t** ptr);

void reservedunmarshal_VkSparseImageMemoryBindInfo(VulkanStream* vkStream, VkStructureType rootType,
                                                   VkSparseImageMemoryBindInfo* forUnmarshaling,
                                                   uint8_t** ptr);

void reservedunmarshal_VkBindSparseInfo(VulkanStream* vkStream, VkStructureType rootType,
                                        VkBindSparseInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkSparseImageFormatProperties(VulkanStream* vkStream,
                                                     VkStructureType rootType,
                                                     VkSparseImageFormatProperties* forUnmarshaling,
                                                     uint8_t** ptr);

void reservedunmarshal_VkSparseImageMemoryRequirements(
    VulkanStream* vkStream, VkStructureType rootType,
    VkSparseImageMemoryRequirements* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkFenceCreateInfo(VulkanStream* vkStream, VkStructureType rootType,
                                         VkFenceCreateInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkSemaphoreCreateInfo(VulkanStream* vkStream, VkStructureType rootType,
                                             VkSemaphoreCreateInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkEventCreateInfo(VulkanStream* vkStream, VkStructureType rootType,
                                         VkEventCreateInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkQueryPoolCreateInfo(VulkanStream* vkStream, VkStructureType rootType,
                                             VkQueryPoolCreateInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkBufferCreateInfo(VulkanStream* vkStream, VkStructureType rootType,
                                          VkBufferCreateInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkBufferViewCreateInfo(VulkanStream* vkStream, VkStructureType rootType,
                                              VkBufferViewCreateInfo* forUnmarshaling,
                                              uint8_t** ptr);

void reservedunmarshal_VkImageCreateInfo(VulkanStream* vkStream, VkStructureType rootType,
                                         VkImageCreateInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkSubresourceLayout(VulkanStream* vkStream, VkStructureType rootType,
                                           VkSubresourceLayout* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkComponentMapping(VulkanStream* vkStream, VkStructureType rootType,
                                          VkComponentMapping* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkImageViewCreateInfo(VulkanStream* vkStream, VkStructureType rootType,
                                             VkImageViewCreateInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkShaderModuleCreateInfo(VulkanStream* vkStream, VkStructureType rootType,
                                                VkShaderModuleCreateInfo* forUnmarshaling,
                                                uint8_t** ptr);

void reservedunmarshal_VkPipelineCacheCreateInfo(VulkanStream* vkStream, VkStructureType rootType,
                                                 VkPipelineCacheCreateInfo* forUnmarshaling,
                                                 uint8_t** ptr);

void reservedunmarshal_VkSpecializationMapEntry(VulkanStream* vkStream, VkStructureType rootType,
                                                VkSpecializationMapEntry* forUnmarshaling,
                                                uint8_t** ptr);

void reservedunmarshal_VkSpecializationInfo(VulkanStream* vkStream, VkStructureType rootType,
                                            VkSpecializationInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPipelineShaderStageCreateInfo(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPipelineShaderStageCreateInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkComputePipelineCreateInfo(VulkanStream* vkStream, VkStructureType rootType,
                                                   VkComputePipelineCreateInfo* forUnmarshaling,
                                                   uint8_t** ptr);

void reservedunmarshal_VkVertexInputBindingDescription(
    VulkanStream* vkStream, VkStructureType rootType,
    VkVertexInputBindingDescription* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkVertexInputAttributeDescription(
    VulkanStream* vkStream, VkStructureType rootType,
    VkVertexInputAttributeDescription* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPipelineVertexInputStateCreateInfo(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPipelineVertexInputStateCreateInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPipelineInputAssemblyStateCreateInfo(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPipelineInputAssemblyStateCreateInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPipelineTessellationStateCreateInfo(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPipelineTessellationStateCreateInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkViewport(VulkanStream* vkStream, VkStructureType rootType,
                                  VkViewport* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPipelineViewportStateCreateInfo(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPipelineViewportStateCreateInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPipelineRasterizationStateCreateInfo(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPipelineRasterizationStateCreateInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPipelineMultisampleStateCreateInfo(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPipelineMultisampleStateCreateInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkStencilOpState(VulkanStream* vkStream, VkStructureType rootType,
                                        VkStencilOpState* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPipelineDepthStencilStateCreateInfo(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPipelineDepthStencilStateCreateInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPipelineColorBlendAttachmentState(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPipelineColorBlendAttachmentState* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPipelineColorBlendStateCreateInfo(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPipelineColorBlendStateCreateInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPipelineDynamicStateCreateInfo(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPipelineDynamicStateCreateInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkGraphicsPipelineCreateInfo(VulkanStream* vkStream,
                                                    VkStructureType rootType,
                                                    VkGraphicsPipelineCreateInfo* forUnmarshaling,
                                                    uint8_t** ptr);

void reservedunmarshal_VkPushConstantRange(VulkanStream* vkStream, VkStructureType rootType,
                                           VkPushConstantRange* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPipelineLayoutCreateInfo(VulkanStream* vkStream, VkStructureType rootType,
                                                  VkPipelineLayoutCreateInfo* forUnmarshaling,
                                                  uint8_t** ptr);

void reservedunmarshal_VkSamplerCreateInfo(VulkanStream* vkStream, VkStructureType rootType,
                                           VkSamplerCreateInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkCopyDescriptorSet(VulkanStream* vkStream, VkStructureType rootType,
                                           VkCopyDescriptorSet* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkDescriptorBufferInfo(VulkanStream* vkStream, VkStructureType rootType,
                                              VkDescriptorBufferInfo* forUnmarshaling,
                                              uint8_t** ptr);

void reservedunmarshal_VkDescriptorImageInfo(VulkanStream* vkStream, VkStructureType rootType,
                                             VkDescriptorImageInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkDescriptorPoolSize(VulkanStream* vkStream, VkStructureType rootType,
                                            VkDescriptorPoolSize* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkDescriptorPoolCreateInfo(VulkanStream* vkStream, VkStructureType rootType,
                                                  VkDescriptorPoolCreateInfo* forUnmarshaling,
                                                  uint8_t** ptr);

void reservedunmarshal_VkDescriptorSetAllocateInfo(VulkanStream* vkStream, VkStructureType rootType,
                                                   VkDescriptorSetAllocateInfo* forUnmarshaling,
                                                   uint8_t** ptr);

void reservedunmarshal_VkDescriptorSetLayoutBinding(VulkanStream* vkStream,
                                                    VkStructureType rootType,
                                                    VkDescriptorSetLayoutBinding* forUnmarshaling,
                                                    uint8_t** ptr);

void reservedunmarshal_VkDescriptorSetLayoutCreateInfo(
    VulkanStream* vkStream, VkStructureType rootType,
    VkDescriptorSetLayoutCreateInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkWriteDescriptorSet(VulkanStream* vkStream, VkStructureType rootType,
                                            VkWriteDescriptorSet* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkAttachmentDescription(VulkanStream* vkStream, VkStructureType rootType,
                                               VkAttachmentDescription* forUnmarshaling,
                                               uint8_t** ptr);

void reservedunmarshal_VkAttachmentReference(VulkanStream* vkStream, VkStructureType rootType,
                                             VkAttachmentReference* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkFramebufferCreateInfo(VulkanStream* vkStream, VkStructureType rootType,
                                               VkFramebufferCreateInfo* forUnmarshaling,
                                               uint8_t** ptr);

void reservedunmarshal_VkSubpassDescription(VulkanStream* vkStream, VkStructureType rootType,
                                            VkSubpassDescription* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkSubpassDependency(VulkanStream* vkStream, VkStructureType rootType,
                                           VkSubpassDependency* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkRenderPassCreateInfo(VulkanStream* vkStream, VkStructureType rootType,
                                              VkRenderPassCreateInfo* forUnmarshaling,
                                              uint8_t** ptr);

void reservedunmarshal_VkCommandPoolCreateInfo(VulkanStream* vkStream, VkStructureType rootType,
                                               VkCommandPoolCreateInfo* forUnmarshaling,
                                               uint8_t** ptr);

void reservedunmarshal_VkCommandBufferAllocateInfo(VulkanStream* vkStream, VkStructureType rootType,
                                                   VkCommandBufferAllocateInfo* forUnmarshaling,
                                                   uint8_t** ptr);

void reservedunmarshal_VkCommandBufferInheritanceInfo(
    VulkanStream* vkStream, VkStructureType rootType,
    VkCommandBufferInheritanceInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkCommandBufferBeginInfo(VulkanStream* vkStream, VkStructureType rootType,
                                                VkCommandBufferBeginInfo* forUnmarshaling,
                                                uint8_t** ptr);

void reservedunmarshal_VkBufferCopy(VulkanStream* vkStream, VkStructureType rootType,
                                    VkBufferCopy* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkImageSubresourceLayers(VulkanStream* vkStream, VkStructureType rootType,
                                                VkImageSubresourceLayers* forUnmarshaling,
                                                uint8_t** ptr);

void reservedunmarshal_VkBufferImageCopy(VulkanStream* vkStream, VkStructureType rootType,
                                         VkBufferImageCopy* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkClearColorValue(VulkanStream* vkStream, VkStructureType rootType,
                                         VkClearColorValue* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkClearDepthStencilValue(VulkanStream* vkStream, VkStructureType rootType,
                                                VkClearDepthStencilValue* forUnmarshaling,
                                                uint8_t** ptr);

void reservedunmarshal_VkClearValue(VulkanStream* vkStream, VkStructureType rootType,
                                    VkClearValue* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkClearAttachment(VulkanStream* vkStream, VkStructureType rootType,
                                         VkClearAttachment* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkClearRect(VulkanStream* vkStream, VkStructureType rootType,
                                   VkClearRect* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkImageBlit(VulkanStream* vkStream, VkStructureType rootType,
                                   VkImageBlit* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkImageCopy(VulkanStream* vkStream, VkStructureType rootType,
                                   VkImageCopy* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkImageResolve(VulkanStream* vkStream, VkStructureType rootType,
                                      VkImageResolve* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkRenderPassBeginInfo(VulkanStream* vkStream, VkStructureType rootType,
                                             VkRenderPassBeginInfo* forUnmarshaling, uint8_t** ptr);

#endif
#ifdef VK_VERSION_1_1
void reservedunmarshal_VkPhysicalDeviceSubgroupProperties(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceSubgroupProperties* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkBindBufferMemoryInfo(VulkanStream* vkStream, VkStructureType rootType,
                                              VkBindBufferMemoryInfo* forUnmarshaling,
                                              uint8_t** ptr);

void reservedunmarshal_VkBindImageMemoryInfo(VulkanStream* vkStream, VkStructureType rootType,
                                             VkBindImageMemoryInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDevice16BitStorageFeatures(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDevice16BitStorageFeatures* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkMemoryDedicatedRequirements(VulkanStream* vkStream,
                                                     VkStructureType rootType,
                                                     VkMemoryDedicatedRequirements* forUnmarshaling,
                                                     uint8_t** ptr);

void reservedunmarshal_VkMemoryDedicatedAllocateInfo(VulkanStream* vkStream,
                                                     VkStructureType rootType,
                                                     VkMemoryDedicatedAllocateInfo* forUnmarshaling,
                                                     uint8_t** ptr);

void reservedunmarshal_VkMemoryAllocateFlagsInfo(VulkanStream* vkStream, VkStructureType rootType,
                                                 VkMemoryAllocateFlagsInfo* forUnmarshaling,
                                                 uint8_t** ptr);

void reservedunmarshal_VkDeviceGroupRenderPassBeginInfo(
    VulkanStream* vkStream, VkStructureType rootType,
    VkDeviceGroupRenderPassBeginInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkDeviceGroupCommandBufferBeginInfo(
    VulkanStream* vkStream, VkStructureType rootType,
    VkDeviceGroupCommandBufferBeginInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkDeviceGroupSubmitInfo(VulkanStream* vkStream, VkStructureType rootType,
                                               VkDeviceGroupSubmitInfo* forUnmarshaling,
                                               uint8_t** ptr);

void reservedunmarshal_VkDeviceGroupBindSparseInfo(VulkanStream* vkStream, VkStructureType rootType,
                                                   VkDeviceGroupBindSparseInfo* forUnmarshaling,
                                                   uint8_t** ptr);

void reservedunmarshal_VkBindBufferMemoryDeviceGroupInfo(
    VulkanStream* vkStream, VkStructureType rootType,
    VkBindBufferMemoryDeviceGroupInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkBindImageMemoryDeviceGroupInfo(
    VulkanStream* vkStream, VkStructureType rootType,
    VkBindImageMemoryDeviceGroupInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceGroupProperties(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceGroupProperties* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkDeviceGroupDeviceCreateInfo(VulkanStream* vkStream,
                                                     VkStructureType rootType,
                                                     VkDeviceGroupDeviceCreateInfo* forUnmarshaling,
                                                     uint8_t** ptr);

void reservedunmarshal_VkBufferMemoryRequirementsInfo2(
    VulkanStream* vkStream, VkStructureType rootType,
    VkBufferMemoryRequirementsInfo2* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkImageMemoryRequirementsInfo2(
    VulkanStream* vkStream, VkStructureType rootType,
    VkImageMemoryRequirementsInfo2* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkImageSparseMemoryRequirementsInfo2(
    VulkanStream* vkStream, VkStructureType rootType,
    VkImageSparseMemoryRequirementsInfo2* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkMemoryRequirements2(VulkanStream* vkStream, VkStructureType rootType,
                                             VkMemoryRequirements2* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkSparseImageMemoryRequirements2(
    VulkanStream* vkStream, VkStructureType rootType,
    VkSparseImageMemoryRequirements2* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceFeatures2(VulkanStream* vkStream, VkStructureType rootType,
                                                 VkPhysicalDeviceFeatures2* forUnmarshaling,
                                                 uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceProperties2(VulkanStream* vkStream, VkStructureType rootType,
                                                   VkPhysicalDeviceProperties2* forUnmarshaling,
                                                   uint8_t** ptr);

void reservedunmarshal_VkFormatProperties2(VulkanStream* vkStream, VkStructureType rootType,
                                           VkFormatProperties2* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkImageFormatProperties2(VulkanStream* vkStream, VkStructureType rootType,
                                                VkImageFormatProperties2* forUnmarshaling,
                                                uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceImageFormatInfo2(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceImageFormatInfo2* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkQueueFamilyProperties2(VulkanStream* vkStream, VkStructureType rootType,
                                                VkQueueFamilyProperties2* forUnmarshaling,
                                                uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceMemoryProperties2(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceMemoryProperties2* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkSparseImageFormatProperties2(
    VulkanStream* vkStream, VkStructureType rootType,
    VkSparseImageFormatProperties2* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceSparseImageFormatInfo2(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceSparseImageFormatInfo2* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDevicePointClippingProperties(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDevicePointClippingProperties* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkInputAttachmentAspectReference(
    VulkanStream* vkStream, VkStructureType rootType,
    VkInputAttachmentAspectReference* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkRenderPassInputAttachmentAspectCreateInfo(
    VulkanStream* vkStream, VkStructureType rootType,
    VkRenderPassInputAttachmentAspectCreateInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkImageViewUsageCreateInfo(VulkanStream* vkStream, VkStructureType rootType,
                                                  VkImageViewUsageCreateInfo* forUnmarshaling,
                                                  uint8_t** ptr);

void reservedunmarshal_VkPipelineTessellationDomainOriginStateCreateInfo(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPipelineTessellationDomainOriginStateCreateInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkRenderPassMultiviewCreateInfo(
    VulkanStream* vkStream, VkStructureType rootType,
    VkRenderPassMultiviewCreateInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceMultiviewFeatures(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceMultiviewFeatures* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceMultiviewProperties(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceMultiviewProperties* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceVariablePointersFeatures(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceVariablePointersFeatures* forUnmarshaling, uint8_t** ptr);

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPhysicalDeviceVariablePointersFeatures,
                      reservedunmarshal_VkPhysicalDeviceVariablePointerFeatures)

void reservedunmarshal_VkPhysicalDeviceProtectedMemoryFeatures(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceProtectedMemoryFeatures* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceProtectedMemoryProperties(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceProtectedMemoryProperties* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkDeviceQueueInfo2(VulkanStream* vkStream, VkStructureType rootType,
                                          VkDeviceQueueInfo2* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkProtectedSubmitInfo(VulkanStream* vkStream, VkStructureType rootType,
                                             VkProtectedSubmitInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkSamplerYcbcrConversionCreateInfo(
    VulkanStream* vkStream, VkStructureType rootType,
    VkSamplerYcbcrConversionCreateInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkSamplerYcbcrConversionInfo(VulkanStream* vkStream,
                                                    VkStructureType rootType,
                                                    VkSamplerYcbcrConversionInfo* forUnmarshaling,
                                                    uint8_t** ptr);

void reservedunmarshal_VkBindImagePlaneMemoryInfo(VulkanStream* vkStream, VkStructureType rootType,
                                                  VkBindImagePlaneMemoryInfo* forUnmarshaling,
                                                  uint8_t** ptr);

void reservedunmarshal_VkImagePlaneMemoryRequirementsInfo(
    VulkanStream* vkStream, VkStructureType rootType,
    VkImagePlaneMemoryRequirementsInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceSamplerYcbcrConversionFeatures(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceSamplerYcbcrConversionFeatures* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkSamplerYcbcrConversionImageFormatProperties(
    VulkanStream* vkStream, VkStructureType rootType,
    VkSamplerYcbcrConversionImageFormatProperties* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkDescriptorUpdateTemplateEntry(
    VulkanStream* vkStream, VkStructureType rootType,
    VkDescriptorUpdateTemplateEntry* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkDescriptorUpdateTemplateCreateInfo(
    VulkanStream* vkStream, VkStructureType rootType,
    VkDescriptorUpdateTemplateCreateInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkExternalMemoryProperties(VulkanStream* vkStream, VkStructureType rootType,
                                                  VkExternalMemoryProperties* forUnmarshaling,
                                                  uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceExternalImageFormatInfo(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceExternalImageFormatInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkExternalImageFormatProperties(
    VulkanStream* vkStream, VkStructureType rootType,
    VkExternalImageFormatProperties* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceExternalBufferInfo(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceExternalBufferInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkExternalBufferProperties(VulkanStream* vkStream, VkStructureType rootType,
                                                  VkExternalBufferProperties* forUnmarshaling,
                                                  uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceIDProperties(VulkanStream* vkStream,
                                                    VkStructureType rootType,
                                                    VkPhysicalDeviceIDProperties* forUnmarshaling,
                                                    uint8_t** ptr);

void reservedunmarshal_VkExternalMemoryImageCreateInfo(
    VulkanStream* vkStream, VkStructureType rootType,
    VkExternalMemoryImageCreateInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkExternalMemoryBufferCreateInfo(
    VulkanStream* vkStream, VkStructureType rootType,
    VkExternalMemoryBufferCreateInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkExportMemoryAllocateInfo(VulkanStream* vkStream, VkStructureType rootType,
                                                  VkExportMemoryAllocateInfo* forUnmarshaling,
                                                  uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceExternalFenceInfo(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceExternalFenceInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkExternalFenceProperties(VulkanStream* vkStream, VkStructureType rootType,
                                                 VkExternalFenceProperties* forUnmarshaling,
                                                 uint8_t** ptr);

void reservedunmarshal_VkExportFenceCreateInfo(VulkanStream* vkStream, VkStructureType rootType,
                                               VkExportFenceCreateInfo* forUnmarshaling,
                                               uint8_t** ptr);

void reservedunmarshal_VkExportSemaphoreCreateInfo(VulkanStream* vkStream, VkStructureType rootType,
                                                   VkExportSemaphoreCreateInfo* forUnmarshaling,
                                                   uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceExternalSemaphoreInfo(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceExternalSemaphoreInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkExternalSemaphoreProperties(VulkanStream* vkStream,
                                                     VkStructureType rootType,
                                                     VkExternalSemaphoreProperties* forUnmarshaling,
                                                     uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceMaintenance3Properties(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceMaintenance3Properties* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkDescriptorSetLayoutSupport(VulkanStream* vkStream,
                                                    VkStructureType rootType,
                                                    VkDescriptorSetLayoutSupport* forUnmarshaling,
                                                    uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceShaderDrawParametersFeatures(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceShaderDrawParametersFeatures* forUnmarshaling, uint8_t** ptr);

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPhysicalDeviceShaderDrawParametersFeatures,
                      reservedunmarshal_VkPhysicalDeviceShaderDrawParameterFeatures)

#endif
#ifdef VK_VERSION_1_2
void reservedunmarshal_VkPhysicalDeviceVulkan11Features(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceVulkan11Features* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceVulkan11Properties(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceVulkan11Properties* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceVulkan12Features(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceVulkan12Features* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkConformanceVersion(VulkanStream* vkStream, VkStructureType rootType,
                                            VkConformanceVersion* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceVulkan12Properties(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceVulkan12Properties* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkImageFormatListCreateInfo(VulkanStream* vkStream, VkStructureType rootType,
                                                   VkImageFormatListCreateInfo* forUnmarshaling,
                                                   uint8_t** ptr);

void reservedunmarshal_VkAttachmentDescription2(VulkanStream* vkStream, VkStructureType rootType,
                                                VkAttachmentDescription2* forUnmarshaling,
                                                uint8_t** ptr);

void reservedunmarshal_VkAttachmentReference2(VulkanStream* vkStream, VkStructureType rootType,
                                              VkAttachmentReference2* forUnmarshaling,
                                              uint8_t** ptr);

void reservedunmarshal_VkSubpassDescription2(VulkanStream* vkStream, VkStructureType rootType,
                                             VkSubpassDescription2* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkSubpassDependency2(VulkanStream* vkStream, VkStructureType rootType,
                                            VkSubpassDependency2* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkRenderPassCreateInfo2(VulkanStream* vkStream, VkStructureType rootType,
                                               VkRenderPassCreateInfo2* forUnmarshaling,
                                               uint8_t** ptr);

void reservedunmarshal_VkSubpassBeginInfo(VulkanStream* vkStream, VkStructureType rootType,
                                          VkSubpassBeginInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkSubpassEndInfo(VulkanStream* vkStream, VkStructureType rootType,
                                        VkSubpassEndInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDevice8BitStorageFeatures(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDevice8BitStorageFeatures* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceDriverProperties(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceDriverProperties* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceShaderAtomicInt64Features(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceShaderAtomicInt64Features* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceShaderFloat16Int8Features(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceShaderFloat16Int8Features* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceFloatControlsProperties(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceFloatControlsProperties* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkDescriptorSetLayoutBindingFlagsCreateInfo(
    VulkanStream* vkStream, VkStructureType rootType,
    VkDescriptorSetLayoutBindingFlagsCreateInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceDescriptorIndexingFeatures(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceDescriptorIndexingFeatures* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceDescriptorIndexingProperties(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceDescriptorIndexingProperties* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkDescriptorSetVariableDescriptorCountAllocateInfo(
    VulkanStream* vkStream, VkStructureType rootType,
    VkDescriptorSetVariableDescriptorCountAllocateInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkDescriptorSetVariableDescriptorCountLayoutSupport(
    VulkanStream* vkStream, VkStructureType rootType,
    VkDescriptorSetVariableDescriptorCountLayoutSupport* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkSubpassDescriptionDepthStencilResolve(
    VulkanStream* vkStream, VkStructureType rootType,
    VkSubpassDescriptionDepthStencilResolve* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceDepthStencilResolveProperties(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceDepthStencilResolveProperties* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceScalarBlockLayoutFeatures(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceScalarBlockLayoutFeatures* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkImageStencilUsageCreateInfo(VulkanStream* vkStream,
                                                     VkStructureType rootType,
                                                     VkImageStencilUsageCreateInfo* forUnmarshaling,
                                                     uint8_t** ptr);

void reservedunmarshal_VkSamplerReductionModeCreateInfo(
    VulkanStream* vkStream, VkStructureType rootType,
    VkSamplerReductionModeCreateInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceSamplerFilterMinmaxProperties(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceSamplerFilterMinmaxProperties* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceVulkanMemoryModelFeatures(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceVulkanMemoryModelFeatures* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceImagelessFramebufferFeatures(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceImagelessFramebufferFeatures* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkFramebufferAttachmentImageInfo(
    VulkanStream* vkStream, VkStructureType rootType,
    VkFramebufferAttachmentImageInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkFramebufferAttachmentsCreateInfo(
    VulkanStream* vkStream, VkStructureType rootType,
    VkFramebufferAttachmentsCreateInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkRenderPassAttachmentBeginInfo(
    VulkanStream* vkStream, VkStructureType rootType,
    VkRenderPassAttachmentBeginInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceUniformBufferStandardLayoutFeatures(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceUniformBufferStandardLayoutFeatures* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkAttachmentReferenceStencilLayout(
    VulkanStream* vkStream, VkStructureType rootType,
    VkAttachmentReferenceStencilLayout* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkAttachmentDescriptionStencilLayout(
    VulkanStream* vkStream, VkStructureType rootType,
    VkAttachmentDescriptionStencilLayout* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceHostQueryResetFeatures(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceHostQueryResetFeatures* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceTimelineSemaphoreFeatures(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceTimelineSemaphoreFeatures* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceTimelineSemaphoreProperties(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceTimelineSemaphoreProperties* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkSemaphoreTypeCreateInfo(VulkanStream* vkStream, VkStructureType rootType,
                                                 VkSemaphoreTypeCreateInfo* forUnmarshaling,
                                                 uint8_t** ptr);

void reservedunmarshal_VkTimelineSemaphoreSubmitInfo(VulkanStream* vkStream,
                                                     VkStructureType rootType,
                                                     VkTimelineSemaphoreSubmitInfo* forUnmarshaling,
                                                     uint8_t** ptr);

void reservedunmarshal_VkSemaphoreWaitInfo(VulkanStream* vkStream, VkStructureType rootType,
                                           VkSemaphoreWaitInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkSemaphoreSignalInfo(VulkanStream* vkStream, VkStructureType rootType,
                                             VkSemaphoreSignalInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceBufferDeviceAddressFeatures(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceBufferDeviceAddressFeatures* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkBufferDeviceAddressInfo(VulkanStream* vkStream, VkStructureType rootType,
                                                 VkBufferDeviceAddressInfo* forUnmarshaling,
                                                 uint8_t** ptr);

void reservedunmarshal_VkBufferOpaqueCaptureAddressCreateInfo(
    VulkanStream* vkStream, VkStructureType rootType,
    VkBufferOpaqueCaptureAddressCreateInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkMemoryOpaqueCaptureAddressAllocateInfo(
    VulkanStream* vkStream, VkStructureType rootType,
    VkMemoryOpaqueCaptureAddressAllocateInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkDeviceMemoryOpaqueCaptureAddressInfo(
    VulkanStream* vkStream, VkStructureType rootType,
    VkDeviceMemoryOpaqueCaptureAddressInfo* forUnmarshaling, uint8_t** ptr);

#endif
#ifdef VK_VERSION_1_3
void reservedunmarshal_VkPhysicalDeviceVulkan13Features(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceVulkan13Features* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceVulkan13Properties(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceVulkan13Properties* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPipelineCreationFeedback(VulkanStream* vkStream, VkStructureType rootType,
                                                  VkPipelineCreationFeedback* forUnmarshaling,
                                                  uint8_t** ptr);

void reservedunmarshal_VkPipelineCreationFeedbackCreateInfo(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPipelineCreationFeedbackCreateInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceShaderTerminateInvocationFeatures(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceShaderTerminateInvocationFeatures* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceToolProperties(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceToolProperties* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDevicePrivateDataFeatures(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDevicePrivateDataFeatures* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkDevicePrivateDataCreateInfo(VulkanStream* vkStream,
                                                     VkStructureType rootType,
                                                     VkDevicePrivateDataCreateInfo* forUnmarshaling,
                                                     uint8_t** ptr);

void reservedunmarshal_VkPrivateDataSlotCreateInfo(VulkanStream* vkStream, VkStructureType rootType,
                                                   VkPrivateDataSlotCreateInfo* forUnmarshaling,
                                                   uint8_t** ptr);

void reservedunmarshal_VkPhysicalDevicePipelineCreationCacheControlFeatures(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDevicePipelineCreationCacheControlFeatures* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkMemoryBarrier2(VulkanStream* vkStream, VkStructureType rootType,
                                        VkMemoryBarrier2* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkBufferMemoryBarrier2(VulkanStream* vkStream, VkStructureType rootType,
                                              VkBufferMemoryBarrier2* forUnmarshaling,
                                              uint8_t** ptr);

void reservedunmarshal_VkImageMemoryBarrier2(VulkanStream* vkStream, VkStructureType rootType,
                                             VkImageMemoryBarrier2* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkDependencyInfo(VulkanStream* vkStream, VkStructureType rootType,
                                        VkDependencyInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkSemaphoreSubmitInfo(VulkanStream* vkStream, VkStructureType rootType,
                                             VkSemaphoreSubmitInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkCommandBufferSubmitInfo(VulkanStream* vkStream, VkStructureType rootType,
                                                 VkCommandBufferSubmitInfo* forUnmarshaling,
                                                 uint8_t** ptr);

void reservedunmarshal_VkSubmitInfo2(VulkanStream* vkStream, VkStructureType rootType,
                                     VkSubmitInfo2* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceSynchronization2Features(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceSynchronization2Features* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceImageRobustnessFeatures(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceImageRobustnessFeatures* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkBufferCopy2(VulkanStream* vkStream, VkStructureType rootType,
                                     VkBufferCopy2* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkCopyBufferInfo2(VulkanStream* vkStream, VkStructureType rootType,
                                         VkCopyBufferInfo2* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkImageCopy2(VulkanStream* vkStream, VkStructureType rootType,
                                    VkImageCopy2* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkCopyImageInfo2(VulkanStream* vkStream, VkStructureType rootType,
                                        VkCopyImageInfo2* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkBufferImageCopy2(VulkanStream* vkStream, VkStructureType rootType,
                                          VkBufferImageCopy2* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkCopyBufferToImageInfo2(VulkanStream* vkStream, VkStructureType rootType,
                                                VkCopyBufferToImageInfo2* forUnmarshaling,
                                                uint8_t** ptr);

void reservedunmarshal_VkCopyImageToBufferInfo2(VulkanStream* vkStream, VkStructureType rootType,
                                                VkCopyImageToBufferInfo2* forUnmarshaling,
                                                uint8_t** ptr);

void reservedunmarshal_VkImageBlit2(VulkanStream* vkStream, VkStructureType rootType,
                                    VkImageBlit2* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkBlitImageInfo2(VulkanStream* vkStream, VkStructureType rootType,
                                        VkBlitImageInfo2* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkImageResolve2(VulkanStream* vkStream, VkStructureType rootType,
                                       VkImageResolve2* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkResolveImageInfo2(VulkanStream* vkStream, VkStructureType rootType,
                                           VkResolveImageInfo2* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceSubgroupSizeControlFeatures(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceSubgroupSizeControlFeatures* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceSubgroupSizeControlProperties(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceSubgroupSizeControlProperties* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPipelineShaderStageRequiredSubgroupSizeCreateInfo(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPipelineShaderStageRequiredSubgroupSizeCreateInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceInlineUniformBlockFeatures(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceInlineUniformBlockFeatures* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceInlineUniformBlockProperties(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceInlineUniformBlockProperties* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkWriteDescriptorSetInlineUniformBlock(
    VulkanStream* vkStream, VkStructureType rootType,
    VkWriteDescriptorSetInlineUniformBlock* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkDescriptorPoolInlineUniformBlockCreateInfo(
    VulkanStream* vkStream, VkStructureType rootType,
    VkDescriptorPoolInlineUniformBlockCreateInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceTextureCompressionASTCHDRFeatures(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceTextureCompressionASTCHDRFeatures* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkRenderingAttachmentInfo(VulkanStream* vkStream, VkStructureType rootType,
                                                 VkRenderingAttachmentInfo* forUnmarshaling,
                                                 uint8_t** ptr);

void reservedunmarshal_VkRenderingInfo(VulkanStream* vkStream, VkStructureType rootType,
                                       VkRenderingInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPipelineRenderingCreateInfo(VulkanStream* vkStream,
                                                     VkStructureType rootType,
                                                     VkPipelineRenderingCreateInfo* forUnmarshaling,
                                                     uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceDynamicRenderingFeatures(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceDynamicRenderingFeatures* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkCommandBufferInheritanceRenderingInfo(
    VulkanStream* vkStream, VkStructureType rootType,
    VkCommandBufferInheritanceRenderingInfo* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceShaderIntegerDotProductFeatures(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceShaderIntegerDotProductFeatures* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceShaderIntegerDotProductProperties(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceShaderIntegerDotProductProperties* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceTexelBufferAlignmentProperties(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceTexelBufferAlignmentProperties* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkFormatProperties3(VulkanStream* vkStream, VkStructureType rootType,
                                           VkFormatProperties3* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceMaintenance4Features(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceMaintenance4Features* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceMaintenance4Properties(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceMaintenance4Properties* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkDeviceBufferMemoryRequirements(
    VulkanStream* vkStream, VkStructureType rootType,
    VkDeviceBufferMemoryRequirements* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkDeviceImageMemoryRequirements(
    VulkanStream* vkStream, VkStructureType rootType,
    VkDeviceImageMemoryRequirements* forUnmarshaling, uint8_t** ptr);

#endif
#ifdef VK_KHR_swapchain
void reservedunmarshal_VkSwapchainCreateInfoKHR(VulkanStream* vkStream, VkStructureType rootType,
                                                VkSwapchainCreateInfoKHR* forUnmarshaling,
                                                uint8_t** ptr);

void reservedunmarshal_VkPresentInfoKHR(VulkanStream* vkStream, VkStructureType rootType,
                                        VkPresentInfoKHR* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkImageSwapchainCreateInfoKHR(VulkanStream* vkStream,
                                                     VkStructureType rootType,
                                                     VkImageSwapchainCreateInfoKHR* forUnmarshaling,
                                                     uint8_t** ptr);

void reservedunmarshal_VkBindImageMemorySwapchainInfoKHR(
    VulkanStream* vkStream, VkStructureType rootType,
    VkBindImageMemorySwapchainInfoKHR* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkAcquireNextImageInfoKHR(VulkanStream* vkStream, VkStructureType rootType,
                                                 VkAcquireNextImageInfoKHR* forUnmarshaling,
                                                 uint8_t** ptr);

void reservedunmarshal_VkDeviceGroupPresentCapabilitiesKHR(
    VulkanStream* vkStream, VkStructureType rootType,
    VkDeviceGroupPresentCapabilitiesKHR* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkDeviceGroupPresentInfoKHR(VulkanStream* vkStream, VkStructureType rootType,
                                                   VkDeviceGroupPresentInfoKHR* forUnmarshaling,
                                                   uint8_t** ptr);

void reservedunmarshal_VkDeviceGroupSwapchainCreateInfoKHR(
    VulkanStream* vkStream, VkStructureType rootType,
    VkDeviceGroupSwapchainCreateInfoKHR* forUnmarshaling, uint8_t** ptr);

#endif
#ifdef VK_KHR_dynamic_rendering
DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkRenderingInfo, reservedunmarshal_VkRenderingInfoKHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkRenderingAttachmentInfo,
                      reservedunmarshal_VkRenderingAttachmentInfoKHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPipelineRenderingCreateInfo,
                      reservedunmarshal_VkPipelineRenderingCreateInfoKHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPhysicalDeviceDynamicRenderingFeatures,
                      reservedunmarshal_VkPhysicalDeviceDynamicRenderingFeaturesKHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkCommandBufferInheritanceRenderingInfo,
                      reservedunmarshal_VkCommandBufferInheritanceRenderingInfoKHR)

void reservedunmarshal_VkRenderingFragmentShadingRateAttachmentInfoKHR(
    VulkanStream* vkStream, VkStructureType rootType,
    VkRenderingFragmentShadingRateAttachmentInfoKHR* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkRenderingFragmentDensityMapAttachmentInfoEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkRenderingFragmentDensityMapAttachmentInfoEXT* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkAttachmentSampleCountInfoAMD(
    VulkanStream* vkStream, VkStructureType rootType,
    VkAttachmentSampleCountInfoAMD* forUnmarshaling, uint8_t** ptr);

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkAttachmentSampleCountInfoAMD,
                      reservedunmarshal_VkAttachmentSampleCountInfoNV)

void reservedunmarshal_VkMultiviewPerViewAttributesInfoNVX(
    VulkanStream* vkStream, VkStructureType rootType,
    VkMultiviewPerViewAttributesInfoNVX* forUnmarshaling, uint8_t** ptr);

#endif
#ifdef VK_KHR_get_physical_device_properties2
DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPhysicalDeviceFeatures2,
                      reservedunmarshal_VkPhysicalDeviceFeatures2KHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPhysicalDeviceProperties2,
                      reservedunmarshal_VkPhysicalDeviceProperties2KHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkFormatProperties2,
                      reservedunmarshal_VkFormatProperties2KHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkImageFormatProperties2,
                      reservedunmarshal_VkImageFormatProperties2KHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPhysicalDeviceImageFormatInfo2,
                      reservedunmarshal_VkPhysicalDeviceImageFormatInfo2KHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkQueueFamilyProperties2,
                      reservedunmarshal_VkQueueFamilyProperties2KHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPhysicalDeviceMemoryProperties2,
                      reservedunmarshal_VkPhysicalDeviceMemoryProperties2KHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkSparseImageFormatProperties2,
                      reservedunmarshal_VkSparseImageFormatProperties2KHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPhysicalDeviceSparseImageFormatInfo2,
                      reservedunmarshal_VkPhysicalDeviceSparseImageFormatInfo2KHR)

#endif
#ifdef VK_KHR_external_memory_capabilities
DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkExternalMemoryProperties,
                      reservedunmarshal_VkExternalMemoryPropertiesKHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPhysicalDeviceExternalImageFormatInfo,
                      reservedunmarshal_VkPhysicalDeviceExternalImageFormatInfoKHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkExternalImageFormatProperties,
                      reservedunmarshal_VkExternalImageFormatPropertiesKHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPhysicalDeviceExternalBufferInfo,
                      reservedunmarshal_VkPhysicalDeviceExternalBufferInfoKHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkExternalBufferProperties,
                      reservedunmarshal_VkExternalBufferPropertiesKHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPhysicalDeviceIDProperties,
                      reservedunmarshal_VkPhysicalDeviceIDPropertiesKHR)

#endif
#ifdef VK_KHR_external_memory
DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkExternalMemoryImageCreateInfo,
                      reservedunmarshal_VkExternalMemoryImageCreateInfoKHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkExternalMemoryBufferCreateInfo,
                      reservedunmarshal_VkExternalMemoryBufferCreateInfoKHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkExportMemoryAllocateInfo,
                      reservedunmarshal_VkExportMemoryAllocateInfoKHR)

#endif
#ifdef VK_KHR_external_semaphore_capabilities
DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPhysicalDeviceExternalSemaphoreInfo,
                      reservedunmarshal_VkPhysicalDeviceExternalSemaphoreInfoKHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkExternalSemaphoreProperties,
                      reservedunmarshal_VkExternalSemaphorePropertiesKHR)

#endif
#ifdef VK_KHR_external_semaphore
DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkExportSemaphoreCreateInfo,
                      reservedunmarshal_VkExportSemaphoreCreateInfoKHR)

#endif
#ifdef VK_KHR_external_semaphore_fd
void reservedunmarshal_VkImportSemaphoreFdInfoKHR(VulkanStream* vkStream, VkStructureType rootType,
                                                  VkImportSemaphoreFdInfoKHR* forUnmarshaling,
                                                  uint8_t** ptr);

void reservedunmarshal_VkSemaphoreGetFdInfoKHR(VulkanStream* vkStream, VkStructureType rootType,
                                               VkSemaphoreGetFdInfoKHR* forUnmarshaling,
                                               uint8_t** ptr);

#endif
#ifdef VK_KHR_shader_float16_int8
DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPhysicalDeviceShaderFloat16Int8Features,
                      reservedunmarshal_VkPhysicalDeviceShaderFloat16Int8FeaturesKHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPhysicalDeviceShaderFloat16Int8Features,
                      reservedunmarshal_VkPhysicalDeviceFloat16Int8FeaturesKHR)

#endif
#ifdef VK_KHR_incremental_present
void reservedunmarshal_VkRectLayerKHR(VulkanStream* vkStream, VkStructureType rootType,
                                      VkRectLayerKHR* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPresentRegionKHR(VulkanStream* vkStream, VkStructureType rootType,
                                          VkPresentRegionKHR* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPresentRegionsKHR(VulkanStream* vkStream, VkStructureType rootType,
                                           VkPresentRegionsKHR* forUnmarshaling, uint8_t** ptr);

#endif
#ifdef VK_KHR_descriptor_update_template
DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkDescriptorUpdateTemplateEntry,
                      reservedunmarshal_VkDescriptorUpdateTemplateEntryKHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkDescriptorUpdateTemplateCreateInfo,
                      reservedunmarshal_VkDescriptorUpdateTemplateCreateInfoKHR)

#endif
#ifdef VK_KHR_imageless_framebuffer
DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPhysicalDeviceImagelessFramebufferFeatures,
                      reservedunmarshal_VkPhysicalDeviceImagelessFramebufferFeaturesKHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkFramebufferAttachmentsCreateInfo,
                      reservedunmarshal_VkFramebufferAttachmentsCreateInfoKHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkFramebufferAttachmentImageInfo,
                      reservedunmarshal_VkFramebufferAttachmentImageInfoKHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkRenderPassAttachmentBeginInfo,
                      reservedunmarshal_VkRenderPassAttachmentBeginInfoKHR)

#endif
#ifdef VK_KHR_create_renderpass2
DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkRenderPassCreateInfo2,
                      reservedunmarshal_VkRenderPassCreateInfo2KHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkAttachmentDescription2,
                      reservedunmarshal_VkAttachmentDescription2KHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkAttachmentReference2,
                      reservedunmarshal_VkAttachmentReference2KHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkSubpassDescription2,
                      reservedunmarshal_VkSubpassDescription2KHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkSubpassDependency2,
                      reservedunmarshal_VkSubpassDependency2KHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkSubpassBeginInfo, reservedunmarshal_VkSubpassBeginInfoKHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkSubpassEndInfo, reservedunmarshal_VkSubpassEndInfoKHR)

#endif
#ifdef VK_KHR_external_fence_capabilities
DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPhysicalDeviceExternalFenceInfo,
                      reservedunmarshal_VkPhysicalDeviceExternalFenceInfoKHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkExternalFenceProperties,
                      reservedunmarshal_VkExternalFencePropertiesKHR)

#endif
#ifdef VK_KHR_external_fence
DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkExportFenceCreateInfo,
                      reservedunmarshal_VkExportFenceCreateInfoKHR)

#endif
#ifdef VK_KHR_external_fence_fd
void reservedunmarshal_VkImportFenceFdInfoKHR(VulkanStream* vkStream, VkStructureType rootType,
                                              VkImportFenceFdInfoKHR* forUnmarshaling,
                                              uint8_t** ptr);

void reservedunmarshal_VkFenceGetFdInfoKHR(VulkanStream* vkStream, VkStructureType rootType,
                                           VkFenceGetFdInfoKHR* forUnmarshaling, uint8_t** ptr);

#endif
#ifdef VK_KHR_maintenance2
DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPhysicalDevicePointClippingProperties,
                      reservedunmarshal_VkPhysicalDevicePointClippingPropertiesKHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkRenderPassInputAttachmentAspectCreateInfo,
                      reservedunmarshal_VkRenderPassInputAttachmentAspectCreateInfoKHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkInputAttachmentAspectReference,
                      reservedunmarshal_VkInputAttachmentAspectReferenceKHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkImageViewUsageCreateInfo,
                      reservedunmarshal_VkImageViewUsageCreateInfoKHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPipelineTessellationDomainOriginStateCreateInfo,
                      reservedunmarshal_VkPipelineTessellationDomainOriginStateCreateInfoKHR)

#endif
#ifdef VK_KHR_dedicated_allocation
DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkMemoryDedicatedRequirements,
                      reservedunmarshal_VkMemoryDedicatedRequirementsKHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkMemoryDedicatedAllocateInfo,
                      reservedunmarshal_VkMemoryDedicatedAllocateInfoKHR)

#endif
#ifdef VK_KHR_get_memory_requirements2
DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkBufferMemoryRequirementsInfo2,
                      reservedunmarshal_VkBufferMemoryRequirementsInfo2KHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkImageMemoryRequirementsInfo2,
                      reservedunmarshal_VkImageMemoryRequirementsInfo2KHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkImageSparseMemoryRequirementsInfo2,
                      reservedunmarshal_VkImageSparseMemoryRequirementsInfo2KHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkMemoryRequirements2,
                      reservedunmarshal_VkMemoryRequirements2KHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkSparseImageMemoryRequirements2,
                      reservedunmarshal_VkSparseImageMemoryRequirements2KHR)

#endif
#ifdef VK_KHR_image_format_list
DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkImageFormatListCreateInfo,
                      reservedunmarshal_VkImageFormatListCreateInfoKHR)

#endif
#ifdef VK_KHR_sampler_ycbcr_conversion
DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkSamplerYcbcrConversionCreateInfo,
                      reservedunmarshal_VkSamplerYcbcrConversionCreateInfoKHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkSamplerYcbcrConversionInfo,
                      reservedunmarshal_VkSamplerYcbcrConversionInfoKHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkBindImagePlaneMemoryInfo,
                      reservedunmarshal_VkBindImagePlaneMemoryInfoKHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkImagePlaneMemoryRequirementsInfo,
                      reservedunmarshal_VkImagePlaneMemoryRequirementsInfoKHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPhysicalDeviceSamplerYcbcrConversionFeatures,
                      reservedunmarshal_VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkSamplerYcbcrConversionImageFormatProperties,
                      reservedunmarshal_VkSamplerYcbcrConversionImageFormatPropertiesKHR)

#endif
#ifdef VK_KHR_bind_memory2
DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkBindBufferMemoryInfo,
                      reservedunmarshal_VkBindBufferMemoryInfoKHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkBindImageMemoryInfo,
                      reservedunmarshal_VkBindImageMemoryInfoKHR)

#endif
#ifdef VK_KHR_maintenance3
DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPhysicalDeviceMaintenance3Properties,
                      reservedunmarshal_VkPhysicalDeviceMaintenance3PropertiesKHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkDescriptorSetLayoutSupport,
                      reservedunmarshal_VkDescriptorSetLayoutSupportKHR)

#endif
#ifdef VK_KHR_shader_subgroup_extended_types
DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures,
                      reservedunmarshal_VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR)

#endif
#ifdef VK_KHR_vulkan_memory_model
DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPhysicalDeviceVulkanMemoryModelFeatures,
                      reservedunmarshal_VkPhysicalDeviceVulkanMemoryModelFeaturesKHR)

#endif
#ifdef VK_KHR_shader_terminate_invocation
DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPhysicalDeviceShaderTerminateInvocationFeatures,
                      reservedunmarshal_VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR)

#endif
#ifdef VK_KHR_buffer_device_address
DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPhysicalDeviceBufferDeviceAddressFeatures,
                      reservedunmarshal_VkPhysicalDeviceBufferDeviceAddressFeaturesKHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkBufferDeviceAddressInfo,
                      reservedunmarshal_VkBufferDeviceAddressInfoKHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkBufferOpaqueCaptureAddressCreateInfo,
                      reservedunmarshal_VkBufferOpaqueCaptureAddressCreateInfoKHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkMemoryOpaqueCaptureAddressAllocateInfo,
                      reservedunmarshal_VkMemoryOpaqueCaptureAddressAllocateInfoKHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkDeviceMemoryOpaqueCaptureAddressInfo,
                      reservedunmarshal_VkDeviceMemoryOpaqueCaptureAddressInfoKHR)

#endif
#ifdef VK_KHR_pipeline_executable_properties
void reservedunmarshal_VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPipelineInfoKHR(VulkanStream* vkStream, VkStructureType rootType,
                                         VkPipelineInfoKHR* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPipelineExecutablePropertiesKHR(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPipelineExecutablePropertiesKHR* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPipelineExecutableInfoKHR(VulkanStream* vkStream, VkStructureType rootType,
                                                   VkPipelineExecutableInfoKHR* forUnmarshaling,
                                                   uint8_t** ptr);

void reservedunmarshal_VkPipelineExecutableStatisticValueKHR(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPipelineExecutableStatisticValueKHR* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPipelineExecutableStatisticKHR(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPipelineExecutableStatisticKHR* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPipelineExecutableInternalRepresentationKHR(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPipelineExecutableInternalRepresentationKHR* forUnmarshaling, uint8_t** ptr);

#endif
#ifdef VK_KHR_shader_integer_dot_product
DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPhysicalDeviceShaderIntegerDotProductFeatures,
                      reservedunmarshal_VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPhysicalDeviceShaderIntegerDotProductProperties,
                      reservedunmarshal_VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR)

#endif
#ifdef VK_KHR_pipeline_library
void reservedunmarshal_VkPipelineLibraryCreateInfoKHR(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPipelineLibraryCreateInfoKHR* forUnmarshaling, uint8_t** ptr);

#endif
#ifdef VK_KHR_synchronization2
DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkMemoryBarrier2, reservedunmarshal_VkMemoryBarrier2KHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkBufferMemoryBarrier2,
                      reservedunmarshal_VkBufferMemoryBarrier2KHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkImageMemoryBarrier2,
                      reservedunmarshal_VkImageMemoryBarrier2KHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkDependencyInfo, reservedunmarshal_VkDependencyInfoKHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkSubmitInfo2, reservedunmarshal_VkSubmitInfo2KHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkSemaphoreSubmitInfo,
                      reservedunmarshal_VkSemaphoreSubmitInfoKHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkCommandBufferSubmitInfo,
                      reservedunmarshal_VkCommandBufferSubmitInfoKHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPhysicalDeviceSynchronization2Features,
                      reservedunmarshal_VkPhysicalDeviceSynchronization2FeaturesKHR)

void reservedunmarshal_VkQueueFamilyCheckpointProperties2NV(
    VulkanStream* vkStream, VkStructureType rootType,
    VkQueueFamilyCheckpointProperties2NV* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkCheckpointData2NV(VulkanStream* vkStream, VkStructureType rootType,
                                           VkCheckpointData2NV* forUnmarshaling, uint8_t** ptr);

#endif
#ifdef VK_KHR_zero_initialize_workgroup_memory
DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures,
                      reservedunmarshal_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR)

#endif
#ifdef VK_KHR_copy_commands2
DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkCopyBufferInfo2, reservedunmarshal_VkCopyBufferInfo2KHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkCopyImageInfo2, reservedunmarshal_VkCopyImageInfo2KHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkCopyBufferToImageInfo2,
                      reservedunmarshal_VkCopyBufferToImageInfo2KHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkCopyImageToBufferInfo2,
                      reservedunmarshal_VkCopyImageToBufferInfo2KHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkBlitImageInfo2, reservedunmarshal_VkBlitImageInfo2KHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkResolveImageInfo2,
                      reservedunmarshal_VkResolveImageInfo2KHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkBufferCopy2, reservedunmarshal_VkBufferCopy2KHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkImageCopy2, reservedunmarshal_VkImageCopy2KHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkImageBlit2, reservedunmarshal_VkImageBlit2KHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkBufferImageCopy2, reservedunmarshal_VkBufferImageCopy2KHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkImageResolve2, reservedunmarshal_VkImageResolve2KHR)

#endif
#ifdef VK_KHR_format_feature_flags2
DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkFormatProperties3,
                      reservedunmarshal_VkFormatProperties3KHR)

#endif
#ifdef VK_KHR_maintenance4
DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPhysicalDeviceMaintenance4Features,
                      reservedunmarshal_VkPhysicalDeviceMaintenance4FeaturesKHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPhysicalDeviceMaintenance4Properties,
                      reservedunmarshal_VkPhysicalDeviceMaintenance4PropertiesKHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkDeviceBufferMemoryRequirements,
                      reservedunmarshal_VkDeviceBufferMemoryRequirementsKHR)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkDeviceImageMemoryRequirements,
                      reservedunmarshal_VkDeviceImageMemoryRequirementsKHR)

#endif
#ifdef VK_KHR_maintenance5
void reservedunmarshal_VkPhysicalDeviceMaintenance5FeaturesKHR(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceMaintenance5FeaturesKHR* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceMaintenance5PropertiesKHR(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceMaintenance5PropertiesKHR* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkRenderingAreaInfoKHR(VulkanStream* vkStream, VkStructureType rootType,
                                              VkRenderingAreaInfoKHR* forUnmarshaling,
                                              uint8_t** ptr);

void reservedunmarshal_VkImageSubresource2KHR(VulkanStream* vkStream, VkStructureType rootType,
                                              VkImageSubresource2KHR* forUnmarshaling,
                                              uint8_t** ptr);

void reservedunmarshal_VkDeviceImageSubresourceInfoKHR(
    VulkanStream* vkStream, VkStructureType rootType,
    VkDeviceImageSubresourceInfoKHR* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkSubresourceLayout2KHR(VulkanStream* vkStream, VkStructureType rootType,
                                               VkSubresourceLayout2KHR* forUnmarshaling,
                                               uint8_t** ptr);

void reservedunmarshal_VkPipelineCreateFlags2CreateInfoKHR(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPipelineCreateFlags2CreateInfoKHR* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkBufferUsageFlags2CreateInfoKHR(
    VulkanStream* vkStream, VkStructureType rootType,
    VkBufferUsageFlags2CreateInfoKHR* forUnmarshaling, uint8_t** ptr);

#endif
#ifdef VK_ANDROID_native_buffer
void reservedunmarshal_VkNativeBufferUsage2ANDROID(VulkanStream* vkStream, VkStructureType rootType,
                                                   VkNativeBufferUsage2ANDROID* forUnmarshaling,
                                                   uint8_t** ptr);

void reservedunmarshal_VkNativeBufferANDROID(VulkanStream* vkStream, VkStructureType rootType,
                                             VkNativeBufferANDROID* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkSwapchainImageCreateInfoANDROID(
    VulkanStream* vkStream, VkStructureType rootType,
    VkSwapchainImageCreateInfoANDROID* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDevicePresentationPropertiesANDROID(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDevicePresentationPropertiesANDROID* forUnmarshaling, uint8_t** ptr);

#endif
#ifdef VK_EXT_debug_report
void reservedunmarshal_VkDebugReportCallbackCreateInfoEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkDebugReportCallbackCreateInfoEXT* forUnmarshaling, uint8_t** ptr);

#endif
#ifdef VK_EXT_transform_feedback
void reservedunmarshal_VkPhysicalDeviceTransformFeedbackFeaturesEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceTransformFeedbackFeaturesEXT* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceTransformFeedbackPropertiesEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceTransformFeedbackPropertiesEXT* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPipelineRasterizationStateStreamCreateInfoEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPipelineRasterizationStateStreamCreateInfoEXT* forUnmarshaling, uint8_t** ptr);

#endif
#ifdef VK_EXT_texture_compression_astc_hdr
DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPhysicalDeviceTextureCompressionASTCHDRFeatures,
                      reservedunmarshal_VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT)

#endif
#ifdef VK_EXT_depth_clip_enable
void reservedunmarshal_VkPhysicalDeviceDepthClipEnableFeaturesEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceDepthClipEnableFeaturesEXT* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPipelineRasterizationDepthClipStateCreateInfoEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPipelineRasterizationDepthClipStateCreateInfoEXT* forUnmarshaling, uint8_t** ptr);

#endif
#ifdef VK_EXT_debug_utils
void reservedunmarshal_VkDebugUtilsLabelEXT(VulkanStream* vkStream, VkStructureType rootType,
                                            VkDebugUtilsLabelEXT* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkDebugUtilsObjectNameInfoEXT(VulkanStream* vkStream,
                                                     VkStructureType rootType,
                                                     VkDebugUtilsObjectNameInfoEXT* forUnmarshaling,
                                                     uint8_t** ptr);

void reservedunmarshal_VkDebugUtilsMessengerCallbackDataEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkDebugUtilsMessengerCallbackDataEXT* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkDebugUtilsMessengerCreateInfoEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkDebugUtilsMessengerCreateInfoEXT* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkDebugUtilsObjectTagInfoEXT(VulkanStream* vkStream,
                                                    VkStructureType rootType,
                                                    VkDebugUtilsObjectTagInfoEXT* forUnmarshaling,
                                                    uint8_t** ptr);

#endif
#ifdef VK_EXT_inline_uniform_block
DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPhysicalDeviceInlineUniformBlockFeatures,
                      reservedunmarshal_VkPhysicalDeviceInlineUniformBlockFeaturesEXT)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPhysicalDeviceInlineUniformBlockProperties,
                      reservedunmarshal_VkPhysicalDeviceInlineUniformBlockPropertiesEXT)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkWriteDescriptorSetInlineUniformBlock,
                      reservedunmarshal_VkWriteDescriptorSetInlineUniformBlockEXT)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkDescriptorPoolInlineUniformBlockCreateInfo,
                      reservedunmarshal_VkDescriptorPoolInlineUniformBlockCreateInfoEXT)

#endif
#ifdef VK_EXT_image_drm_format_modifier
void reservedunmarshal_VkDrmFormatModifierPropertiesEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkDrmFormatModifierPropertiesEXT* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkDrmFormatModifierPropertiesListEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkDrmFormatModifierPropertiesListEXT* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceImageDrmFormatModifierInfoEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceImageDrmFormatModifierInfoEXT* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkImageDrmFormatModifierListCreateInfoEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkImageDrmFormatModifierListCreateInfoEXT* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkImageDrmFormatModifierExplicitCreateInfoEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkImageDrmFormatModifierExplicitCreateInfoEXT* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkImageDrmFormatModifierPropertiesEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkImageDrmFormatModifierPropertiesEXT* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkDrmFormatModifierProperties2EXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkDrmFormatModifierProperties2EXT* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkDrmFormatModifierPropertiesList2EXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkDrmFormatModifierPropertiesList2EXT* forUnmarshaling, uint8_t** ptr);

#endif
#ifdef VK_EXT_external_memory_host
void reservedunmarshal_VkImportMemoryHostPointerInfoEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkImportMemoryHostPointerInfoEXT* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkMemoryHostPointerPropertiesEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkMemoryHostPointerPropertiesEXT* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceExternalMemoryHostPropertiesEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceExternalMemoryHostPropertiesEXT* forUnmarshaling, uint8_t** ptr);

#endif
#ifdef VK_EXT_vertex_attribute_divisor
void reservedunmarshal_VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkVertexInputBindingDivisorDescriptionEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkVertexInputBindingDivisorDescriptionEXT* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPipelineVertexInputDivisorStateCreateInfoEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPipelineVertexInputDivisorStateCreateInfoEXT* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT* forUnmarshaling, uint8_t** ptr);

#endif
#ifdef VK_EXT_pipeline_creation_feedback
DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPipelineCreationFeedbackCreateInfo,
                      reservedunmarshal_VkPipelineCreationFeedbackCreateInfoEXT)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPipelineCreationFeedback,
                      reservedunmarshal_VkPipelineCreationFeedbackEXT)

#endif
#ifdef VK_EXT_fragment_density_map
void reservedunmarshal_VkPhysicalDeviceFragmentDensityMapFeaturesEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceFragmentDensityMapFeaturesEXT* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceFragmentDensityMapPropertiesEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceFragmentDensityMapPropertiesEXT* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkRenderPassFragmentDensityMapCreateInfoEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkRenderPassFragmentDensityMapCreateInfoEXT* forUnmarshaling, uint8_t** ptr);

#endif
#ifdef VK_EXT_scalar_block_layout
DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPhysicalDeviceScalarBlockLayoutFeatures,
                      reservedunmarshal_VkPhysicalDeviceScalarBlockLayoutFeaturesEXT)

#endif
#ifdef VK_EXT_subgroup_size_control
DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPhysicalDeviceSubgroupSizeControlFeatures,
                      reservedunmarshal_VkPhysicalDeviceSubgroupSizeControlFeaturesEXT)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPhysicalDeviceSubgroupSizeControlProperties,
                      reservedunmarshal_VkPhysicalDeviceSubgroupSizeControlPropertiesEXT)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPipelineShaderStageRequiredSubgroupSizeCreateInfo,
                      reservedunmarshal_VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT)

#endif
#ifdef VK_EXT_tooling_info
DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPhysicalDeviceToolProperties,
                      reservedunmarshal_VkPhysicalDeviceToolPropertiesEXT)

#endif
#ifdef VK_EXT_validation_features
void reservedunmarshal_VkValidationFeaturesEXT(VulkanStream* vkStream, VkStructureType rootType,
                                               VkValidationFeaturesEXT* forUnmarshaling,
                                               uint8_t** ptr);

#endif
#ifdef VK_EXT_provoking_vertex
void reservedunmarshal_VkPhysicalDeviceProvokingVertexFeaturesEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceProvokingVertexFeaturesEXT* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceProvokingVertexPropertiesEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceProvokingVertexPropertiesEXT* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPipelineRasterizationProvokingVertexStateCreateInfoEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPipelineRasterizationProvokingVertexStateCreateInfoEXT* forUnmarshaling, uint8_t** ptr);

#endif
#ifdef VK_EXT_line_rasterization
void reservedunmarshal_VkPhysicalDeviceLineRasterizationFeaturesEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceLineRasterizationFeaturesEXT* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceLineRasterizationPropertiesEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceLineRasterizationPropertiesEXT* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPipelineRasterizationLineStateCreateInfoEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPipelineRasterizationLineStateCreateInfoEXT* forUnmarshaling, uint8_t** ptr);

#endif
#ifdef VK_EXT_index_type_uint8
void reservedunmarshal_VkPhysicalDeviceIndexTypeUint8FeaturesEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceIndexTypeUint8FeaturesEXT* forUnmarshaling, uint8_t** ptr);

#endif
#ifdef VK_EXT_extended_dynamic_state
void reservedunmarshal_VkPhysicalDeviceExtendedDynamicStateFeaturesEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceExtendedDynamicStateFeaturesEXT* forUnmarshaling, uint8_t** ptr);

#endif
#ifdef VK_EXT_host_image_copy
void reservedunmarshal_VkPhysicalDeviceHostImageCopyFeaturesEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceHostImageCopyFeaturesEXT* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceHostImageCopyPropertiesEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceHostImageCopyPropertiesEXT* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkMemoryToImageCopyEXT(VulkanStream* vkStream, VkStructureType rootType,
                                              VkMemoryToImageCopyEXT* forUnmarshaling,
                                              uint8_t** ptr);

void reservedunmarshal_VkImageToMemoryCopyEXT(VulkanStream* vkStream, VkStructureType rootType,
                                              VkImageToMemoryCopyEXT* forUnmarshaling,
                                              uint8_t** ptr);

void reservedunmarshal_VkCopyMemoryToImageInfoEXT(VulkanStream* vkStream, VkStructureType rootType,
                                                  VkCopyMemoryToImageInfoEXT* forUnmarshaling,
                                                  uint8_t** ptr);

void reservedunmarshal_VkCopyImageToMemoryInfoEXT(VulkanStream* vkStream, VkStructureType rootType,
                                                  VkCopyImageToMemoryInfoEXT* forUnmarshaling,
                                                  uint8_t** ptr);

void reservedunmarshal_VkCopyImageToImageInfoEXT(VulkanStream* vkStream, VkStructureType rootType,
                                                 VkCopyImageToImageInfoEXT* forUnmarshaling,
                                                 uint8_t** ptr);

void reservedunmarshal_VkHostImageLayoutTransitionInfoEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkHostImageLayoutTransitionInfoEXT* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkSubresourceHostMemcpySizeEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkSubresourceHostMemcpySizeEXT* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkHostImageCopyDevicePerformanceQueryEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkHostImageCopyDevicePerformanceQueryEXT* forUnmarshaling, uint8_t** ptr);

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkSubresourceLayout2KHR,
                      reservedunmarshal_VkSubresourceLayout2EXT)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkImageSubresource2KHR,
                      reservedunmarshal_VkImageSubresource2EXT)

#endif
#ifdef VK_EXT_swapchain_maintenance1
void reservedunmarshal_VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkSwapchainPresentFenceInfoEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkSwapchainPresentFenceInfoEXT* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkSwapchainPresentModesCreateInfoEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkSwapchainPresentModesCreateInfoEXT* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkSwapchainPresentModeInfoEXT(VulkanStream* vkStream,
                                                     VkStructureType rootType,
                                                     VkSwapchainPresentModeInfoEXT* forUnmarshaling,
                                                     uint8_t** ptr);

void reservedunmarshal_VkSwapchainPresentScalingCreateInfoEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkSwapchainPresentScalingCreateInfoEXT* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkReleaseSwapchainImagesInfoEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkReleaseSwapchainImagesInfoEXT* forUnmarshaling, uint8_t** ptr);

#endif
#ifdef VK_EXT_shader_demote_to_helper_invocation
DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures,
                      reservedunmarshal_VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT)

#endif
#ifdef VK_EXT_texel_buffer_alignment
void reservedunmarshal_VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT* forUnmarshaling, uint8_t** ptr);

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPhysicalDeviceTexelBufferAlignmentProperties,
                      reservedunmarshal_VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT)

#endif
#ifdef VK_EXT_device_memory_report
void reservedunmarshal_VkPhysicalDeviceDeviceMemoryReportFeaturesEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceDeviceMemoryReportFeaturesEXT* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkDeviceMemoryReportCallbackDataEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkDeviceMemoryReportCallbackDataEXT* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkDeviceDeviceMemoryReportCreateInfoEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkDeviceDeviceMemoryReportCreateInfoEXT* forUnmarshaling, uint8_t** ptr);

#endif
#ifdef VK_EXT_robustness2
void reservedunmarshal_VkPhysicalDeviceRobustness2FeaturesEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceRobustness2FeaturesEXT* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceRobustness2PropertiesEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceRobustness2PropertiesEXT* forUnmarshaling, uint8_t** ptr);

#endif
#ifdef VK_EXT_custom_border_color
void reservedunmarshal_VkSamplerCustomBorderColorCreateInfoEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkSamplerCustomBorderColorCreateInfoEXT* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceCustomBorderColorPropertiesEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceCustomBorderColorPropertiesEXT* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceCustomBorderColorFeaturesEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceCustomBorderColorFeaturesEXT* forUnmarshaling, uint8_t** ptr);

#endif
#ifdef VK_EXT_private_data
DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPhysicalDevicePrivateDataFeatures,
                      reservedunmarshal_VkPhysicalDevicePrivateDataFeaturesEXT)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkDevicePrivateDataCreateInfo,
                      reservedunmarshal_VkDevicePrivateDataCreateInfoEXT)

DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPrivateDataSlotCreateInfo,
                      reservedunmarshal_VkPrivateDataSlotCreateInfoEXT)

#endif
#ifdef VK_EXT_pipeline_creation_cache_control
DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPhysicalDevicePipelineCreationCacheControlFeatures,
                      reservedunmarshal_VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT)

#endif
#ifdef VK_EXT_graphics_pipeline_library
void reservedunmarshal_VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkGraphicsPipelineLibraryCreateInfoEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkGraphicsPipelineLibraryCreateInfoEXT* forUnmarshaling, uint8_t** ptr);

#endif
#ifdef VK_EXT_ycbcr_2plane_444_formats
void reservedunmarshal_VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT* forUnmarshaling, uint8_t** ptr);

#endif
#ifdef VK_EXT_image_robustness
DEFINE_ALIAS_FUNCTION(reservedunmarshal_VkPhysicalDeviceImageRobustnessFeatures,
                      reservedunmarshal_VkPhysicalDeviceImageRobustnessFeaturesEXT)

#endif
#ifdef VK_EXT_image_compression_control
void reservedunmarshal_VkPhysicalDeviceImageCompressionControlFeaturesEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceImageCompressionControlFeaturesEXT* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkImageCompressionControlEXT(VulkanStream* vkStream,
                                                    VkStructureType rootType,
                                                    VkImageCompressionControlEXT* forUnmarshaling,
                                                    uint8_t** ptr);

void reservedunmarshal_VkImageCompressionPropertiesEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkImageCompressionPropertiesEXT* forUnmarshaling, uint8_t** ptr);

#endif
#ifdef VK_EXT_4444_formats
void reservedunmarshal_VkPhysicalDevice4444FormatsFeaturesEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDevice4444FormatsFeaturesEXT* forUnmarshaling, uint8_t** ptr);

#endif
#ifdef VK_EXT_primitive_topology_list_restart
void reservedunmarshal_VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT* forUnmarshaling, uint8_t** ptr);

#endif
#ifdef VK_EXT_extended_dynamic_state2
void reservedunmarshal_VkPhysicalDeviceExtendedDynamicState2FeaturesEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceExtendedDynamicState2FeaturesEXT* forUnmarshaling, uint8_t** ptr);

#endif
#ifdef VK_EXT_color_write_enable
void reservedunmarshal_VkPhysicalDeviceColorWriteEnableFeaturesEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceColorWriteEnableFeaturesEXT* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPipelineColorWriteCreateInfoEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPipelineColorWriteCreateInfoEXT* forUnmarshaling, uint8_t** ptr);

#endif
#ifdef VK_GOOGLE_gfxstream
void reservedunmarshal_VkImportColorBufferGOOGLE(VulkanStream* vkStream, VkStructureType rootType,
                                                 VkImportColorBufferGOOGLE* forUnmarshaling,
                                                 uint8_t** ptr);

void reservedunmarshal_VkImportBufferGOOGLE(VulkanStream* vkStream, VkStructureType rootType,
                                            VkImportBufferGOOGLE* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkCreateBlobGOOGLE(VulkanStream* vkStream, VkStructureType rootType,
                                          VkCreateBlobGOOGLE* forUnmarshaling, uint8_t** ptr);

#endif
#ifdef VK_EXT_image_compression_control_swapchain
void reservedunmarshal_VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT* forUnmarshaling, uint8_t** ptr);

#endif
#ifdef VK_KHR_ray_tracing_pipeline
void reservedunmarshal_VkRayTracingShaderGroupCreateInfoKHR(
    VulkanStream* vkStream, VkStructureType rootType,
    VkRayTracingShaderGroupCreateInfoKHR* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkRayTracingPipelineInterfaceCreateInfoKHR(
    VulkanStream* vkStream, VkStructureType rootType,
    VkRayTracingPipelineInterfaceCreateInfoKHR* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkRayTracingPipelineCreateInfoKHR(
    VulkanStream* vkStream, VkStructureType rootType,
    VkRayTracingPipelineCreateInfoKHR* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceRayTracingPipelineFeaturesKHR(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceRayTracingPipelineFeaturesKHR* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkPhysicalDeviceRayTracingPipelinePropertiesKHR(
    VulkanStream* vkStream, VkStructureType rootType,
    VkPhysicalDeviceRayTracingPipelinePropertiesKHR* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkStridedDeviceAddressRegionKHR(
    VulkanStream* vkStream, VkStructureType rootType,
    VkStridedDeviceAddressRegionKHR* forUnmarshaling, uint8_t** ptr);

void reservedunmarshal_VkTraceRaysIndirectCommandKHR(VulkanStream* vkStream,
                                                     VkStructureType rootType,
                                                     VkTraceRaysIndirectCommandKHR* forUnmarshaling,
                                                     uint8_t** ptr);

#endif
}  // namespace vk
}  // namespace gfxstream
