// Copyright (C) 2018 The Android Open Source Project
// Copyright (C) 2018 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Autogenerated module goldfish_vk_transform
//
// (header) generated by codegen/vulkan/vulkan-docs-next/scripts/genvk.py -registry
// codegen/vulkan/vulkan-docs-next/xml/vk.xml -registryGfxstream
// codegen/vulkan/vulkan-docs-next/xml/vk_gfxstream.xml cereal -o host/vulkan/cereal
//
// Please do not modify directly;
// re-run gfxstream-protocols/scripts/generate-vulkan-sources.sh,
// or directly from Python by defining:
// VULKAN_REGISTRY_XML_DIR : Directory containing vk.xml
// VULKAN_REGISTRY_SCRIPTS_DIR : Directory containing genvk.py
// CEREAL_OUTPUT_DIR: Where to put the generated sources.
//
// python3 $VULKAN_REGISTRY_SCRIPTS_DIR/genvk.py -registry $VULKAN_REGISTRY_XML_DIR/vk.xml cereal -o
// $CEREAL_OUTPUT_DIR
//
#pragma once
#include <vulkan/vulkan.h>

#include "goldfish_vk_extension_structs.h"
#include "goldfish_vk_private_defs.h"
#include "vk_android_native_buffer_gfxstream.h"
#include "vulkan_gfxstream.h"

namespace gfxstream {
namespace vk {

class VkDecoderGlobalState;
#define LIST_TRIVIAL_TRANSFORMED_TYPES(f)      \
    f(VkPhysicalDeviceExternalImageFormatInfo) \
    f(VkPhysicalDeviceExternalBufferInfo)      \
    f(VkExternalMemoryImageCreateInfo)         \
    f(VkExternalMemoryBufferCreateInfo)        \
    f(VkExportMemoryAllocateInfo)              \
    f(VkExternalImageFormatProperties)         \
    f(VkExternalBufferProperties)

#define LIST_NON_TRIVIAL_TRANSFORMED_TYPES(f) \
    f(VkExternalMemoryProperties)             \
    f(VkImageCreateInfo)

#define LIST_TRANSFORMED_TYPES(f)     \
    LIST_TRIVIAL_TRANSFORMED_TYPES(f) \
    LIST_NON_TRIVIAL_TRANSFORMED_TYPES(f)

#ifdef VK_VERSION_1_0
void transform_tohost_VkExtent2D(VkDecoderGlobalState* resourceTracker, VkExtent2D* toTransform);

void transform_fromhost_VkExtent2D(VkDecoderGlobalState* resourceTracker, VkExtent2D* toTransform);

void transform_tohost_VkExtent3D(VkDecoderGlobalState* resourceTracker, VkExtent3D* toTransform);

void transform_fromhost_VkExtent3D(VkDecoderGlobalState* resourceTracker, VkExtent3D* toTransform);

void transform_tohost_VkOffset2D(VkDecoderGlobalState* resourceTracker, VkOffset2D* toTransform);

void transform_fromhost_VkOffset2D(VkDecoderGlobalState* resourceTracker, VkOffset2D* toTransform);

void transform_tohost_VkOffset3D(VkDecoderGlobalState* resourceTracker, VkOffset3D* toTransform);

void transform_fromhost_VkOffset3D(VkDecoderGlobalState* resourceTracker, VkOffset3D* toTransform);

void transform_tohost_VkRect2D(VkDecoderGlobalState* resourceTracker, VkRect2D* toTransform);

void transform_fromhost_VkRect2D(VkDecoderGlobalState* resourceTracker, VkRect2D* toTransform);

void transform_tohost_VkBaseInStructure(VkDecoderGlobalState* resourceTracker,
                                        VkBaseInStructure* toTransform);

void transform_fromhost_VkBaseInStructure(VkDecoderGlobalState* resourceTracker,
                                          VkBaseInStructure* toTransform);

void transform_tohost_VkBaseOutStructure(VkDecoderGlobalState* resourceTracker,
                                         VkBaseOutStructure* toTransform);

void transform_fromhost_VkBaseOutStructure(VkDecoderGlobalState* resourceTracker,
                                           VkBaseOutStructure* toTransform);

void transform_tohost_VkBufferMemoryBarrier(VkDecoderGlobalState* resourceTracker,
                                            VkBufferMemoryBarrier* toTransform);

void transform_fromhost_VkBufferMemoryBarrier(VkDecoderGlobalState* resourceTracker,
                                              VkBufferMemoryBarrier* toTransform);

void transform_tohost_VkDispatchIndirectCommand(VkDecoderGlobalState* resourceTracker,
                                                VkDispatchIndirectCommand* toTransform);

void transform_fromhost_VkDispatchIndirectCommand(VkDecoderGlobalState* resourceTracker,
                                                  VkDispatchIndirectCommand* toTransform);

void transform_tohost_VkDrawIndexedIndirectCommand(VkDecoderGlobalState* resourceTracker,
                                                   VkDrawIndexedIndirectCommand* toTransform);

void transform_fromhost_VkDrawIndexedIndirectCommand(VkDecoderGlobalState* resourceTracker,
                                                     VkDrawIndexedIndirectCommand* toTransform);

void transform_tohost_VkDrawIndirectCommand(VkDecoderGlobalState* resourceTracker,
                                            VkDrawIndirectCommand* toTransform);

void transform_fromhost_VkDrawIndirectCommand(VkDecoderGlobalState* resourceTracker,
                                              VkDrawIndirectCommand* toTransform);

void transform_tohost_VkImageSubresourceRange(VkDecoderGlobalState* resourceTracker,
                                              VkImageSubresourceRange* toTransform);

void transform_fromhost_VkImageSubresourceRange(VkDecoderGlobalState* resourceTracker,
                                                VkImageSubresourceRange* toTransform);

void transform_tohost_VkImageMemoryBarrier(VkDecoderGlobalState* resourceTracker,
                                           VkImageMemoryBarrier* toTransform);

void transform_fromhost_VkImageMemoryBarrier(VkDecoderGlobalState* resourceTracker,
                                             VkImageMemoryBarrier* toTransform);

void transform_tohost_VkMemoryBarrier(VkDecoderGlobalState* resourceTracker,
                                      VkMemoryBarrier* toTransform);

void transform_fromhost_VkMemoryBarrier(VkDecoderGlobalState* resourceTracker,
                                        VkMemoryBarrier* toTransform);

void transform_tohost_VkPipelineCacheHeaderVersionOne(VkDecoderGlobalState* resourceTracker,
                                                      VkPipelineCacheHeaderVersionOne* toTransform);

void transform_fromhost_VkPipelineCacheHeaderVersionOne(
    VkDecoderGlobalState* resourceTracker, VkPipelineCacheHeaderVersionOne* toTransform);

void transform_tohost_VkAllocationCallbacks(VkDecoderGlobalState* resourceTracker,
                                            VkAllocationCallbacks* toTransform);

void transform_fromhost_VkAllocationCallbacks(VkDecoderGlobalState* resourceTracker,
                                              VkAllocationCallbacks* toTransform);

void transform_tohost_VkApplicationInfo(VkDecoderGlobalState* resourceTracker,
                                        VkApplicationInfo* toTransform);

void transform_fromhost_VkApplicationInfo(VkDecoderGlobalState* resourceTracker,
                                          VkApplicationInfo* toTransform);

void transform_tohost_VkFormatProperties(VkDecoderGlobalState* resourceTracker,
                                         VkFormatProperties* toTransform);

void transform_fromhost_VkFormatProperties(VkDecoderGlobalState* resourceTracker,
                                           VkFormatProperties* toTransform);

void transform_tohost_VkImageFormatProperties(VkDecoderGlobalState* resourceTracker,
                                              VkImageFormatProperties* toTransform);

void transform_fromhost_VkImageFormatProperties(VkDecoderGlobalState* resourceTracker,
                                                VkImageFormatProperties* toTransform);

void transform_tohost_VkInstanceCreateInfo(VkDecoderGlobalState* resourceTracker,
                                           VkInstanceCreateInfo* toTransform);

void transform_fromhost_VkInstanceCreateInfo(VkDecoderGlobalState* resourceTracker,
                                             VkInstanceCreateInfo* toTransform);

void transform_tohost_VkMemoryHeap(VkDecoderGlobalState* resourceTracker,
                                   VkMemoryHeap* toTransform);

void transform_fromhost_VkMemoryHeap(VkDecoderGlobalState* resourceTracker,
                                     VkMemoryHeap* toTransform);

void transform_tohost_VkMemoryType(VkDecoderGlobalState* resourceTracker,
                                   VkMemoryType* toTransform);

void transform_fromhost_VkMemoryType(VkDecoderGlobalState* resourceTracker,
                                     VkMemoryType* toTransform);

void transform_tohost_VkPhysicalDeviceFeatures(VkDecoderGlobalState* resourceTracker,
                                               VkPhysicalDeviceFeatures* toTransform);

void transform_fromhost_VkPhysicalDeviceFeatures(VkDecoderGlobalState* resourceTracker,
                                                 VkPhysicalDeviceFeatures* toTransform);

void transform_tohost_VkPhysicalDeviceLimits(VkDecoderGlobalState* resourceTracker,
                                             VkPhysicalDeviceLimits* toTransform);

void transform_fromhost_VkPhysicalDeviceLimits(VkDecoderGlobalState* resourceTracker,
                                               VkPhysicalDeviceLimits* toTransform);

void transform_tohost_VkPhysicalDeviceMemoryProperties(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceMemoryProperties* toTransform);

void transform_fromhost_VkPhysicalDeviceMemoryProperties(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceMemoryProperties* toTransform);

void transform_tohost_VkPhysicalDeviceSparseProperties(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceSparseProperties* toTransform);

void transform_fromhost_VkPhysicalDeviceSparseProperties(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceSparseProperties* toTransform);

void transform_tohost_VkPhysicalDeviceProperties(VkDecoderGlobalState* resourceTracker,
                                                 VkPhysicalDeviceProperties* toTransform);

void transform_fromhost_VkPhysicalDeviceProperties(VkDecoderGlobalState* resourceTracker,
                                                   VkPhysicalDeviceProperties* toTransform);

void transform_tohost_VkQueueFamilyProperties(VkDecoderGlobalState* resourceTracker,
                                              VkQueueFamilyProperties* toTransform);

void transform_fromhost_VkQueueFamilyProperties(VkDecoderGlobalState* resourceTracker,
                                                VkQueueFamilyProperties* toTransform);

void transform_tohost_VkDeviceQueueCreateInfo(VkDecoderGlobalState* resourceTracker,
                                              VkDeviceQueueCreateInfo* toTransform);

void transform_fromhost_VkDeviceQueueCreateInfo(VkDecoderGlobalState* resourceTracker,
                                                VkDeviceQueueCreateInfo* toTransform);

void transform_tohost_VkDeviceCreateInfo(VkDecoderGlobalState* resourceTracker,
                                         VkDeviceCreateInfo* toTransform);

void transform_fromhost_VkDeviceCreateInfo(VkDecoderGlobalState* resourceTracker,
                                           VkDeviceCreateInfo* toTransform);

void transform_tohost_VkExtensionProperties(VkDecoderGlobalState* resourceTracker,
                                            VkExtensionProperties* toTransform);

void transform_fromhost_VkExtensionProperties(VkDecoderGlobalState* resourceTracker,
                                              VkExtensionProperties* toTransform);

void transform_tohost_VkLayerProperties(VkDecoderGlobalState* resourceTracker,
                                        VkLayerProperties* toTransform);

void transform_fromhost_VkLayerProperties(VkDecoderGlobalState* resourceTracker,
                                          VkLayerProperties* toTransform);

void transform_tohost_VkSubmitInfo(VkDecoderGlobalState* resourceTracker,
                                   VkSubmitInfo* toTransform);

void transform_fromhost_VkSubmitInfo(VkDecoderGlobalState* resourceTracker,
                                     VkSubmitInfo* toTransform);

void transform_tohost_VkMappedMemoryRange(VkDecoderGlobalState* resourceTracker,
                                          VkMappedMemoryRange* toTransform);

void transform_fromhost_VkMappedMemoryRange(VkDecoderGlobalState* resourceTracker,
                                            VkMappedMemoryRange* toTransform);

void transform_tohost_VkMemoryAllocateInfo(VkDecoderGlobalState* resourceTracker,
                                           VkMemoryAllocateInfo* toTransform);

void transform_fromhost_VkMemoryAllocateInfo(VkDecoderGlobalState* resourceTracker,
                                             VkMemoryAllocateInfo* toTransform);

void transform_tohost_VkMemoryRequirements(VkDecoderGlobalState* resourceTracker,
                                           VkMemoryRequirements* toTransform);

void transform_fromhost_VkMemoryRequirements(VkDecoderGlobalState* resourceTracker,
                                             VkMemoryRequirements* toTransform);

void transform_tohost_VkSparseMemoryBind(VkDecoderGlobalState* resourceTracker,
                                         VkSparseMemoryBind* toTransform);

void transform_fromhost_VkSparseMemoryBind(VkDecoderGlobalState* resourceTracker,
                                           VkSparseMemoryBind* toTransform);

void transform_tohost_VkSparseBufferMemoryBindInfo(VkDecoderGlobalState* resourceTracker,
                                                   VkSparseBufferMemoryBindInfo* toTransform);

void transform_fromhost_VkSparseBufferMemoryBindInfo(VkDecoderGlobalState* resourceTracker,
                                                     VkSparseBufferMemoryBindInfo* toTransform);

void transform_tohost_VkSparseImageOpaqueMemoryBindInfo(
    VkDecoderGlobalState* resourceTracker, VkSparseImageOpaqueMemoryBindInfo* toTransform);

void transform_fromhost_VkSparseImageOpaqueMemoryBindInfo(
    VkDecoderGlobalState* resourceTracker, VkSparseImageOpaqueMemoryBindInfo* toTransform);

void transform_tohost_VkImageSubresource(VkDecoderGlobalState* resourceTracker,
                                         VkImageSubresource* toTransform);

void transform_fromhost_VkImageSubresource(VkDecoderGlobalState* resourceTracker,
                                           VkImageSubresource* toTransform);

void transform_tohost_VkSparseImageMemoryBind(VkDecoderGlobalState* resourceTracker,
                                              VkSparseImageMemoryBind* toTransform);

void transform_fromhost_VkSparseImageMemoryBind(VkDecoderGlobalState* resourceTracker,
                                                VkSparseImageMemoryBind* toTransform);

void transform_tohost_VkSparseImageMemoryBindInfo(VkDecoderGlobalState* resourceTracker,
                                                  VkSparseImageMemoryBindInfo* toTransform);

void transform_fromhost_VkSparseImageMemoryBindInfo(VkDecoderGlobalState* resourceTracker,
                                                    VkSparseImageMemoryBindInfo* toTransform);

void transform_tohost_VkBindSparseInfo(VkDecoderGlobalState* resourceTracker,
                                       VkBindSparseInfo* toTransform);

void transform_fromhost_VkBindSparseInfo(VkDecoderGlobalState* resourceTracker,
                                         VkBindSparseInfo* toTransform);

void transform_tohost_VkSparseImageFormatProperties(VkDecoderGlobalState* resourceTracker,
                                                    VkSparseImageFormatProperties* toTransform);

void transform_fromhost_VkSparseImageFormatProperties(VkDecoderGlobalState* resourceTracker,
                                                      VkSparseImageFormatProperties* toTransform);

void transform_tohost_VkSparseImageMemoryRequirements(VkDecoderGlobalState* resourceTracker,
                                                      VkSparseImageMemoryRequirements* toTransform);

void transform_fromhost_VkSparseImageMemoryRequirements(
    VkDecoderGlobalState* resourceTracker, VkSparseImageMemoryRequirements* toTransform);

void transform_tohost_VkFenceCreateInfo(VkDecoderGlobalState* resourceTracker,
                                        VkFenceCreateInfo* toTransform);

void transform_fromhost_VkFenceCreateInfo(VkDecoderGlobalState* resourceTracker,
                                          VkFenceCreateInfo* toTransform);

void transform_tohost_VkSemaphoreCreateInfo(VkDecoderGlobalState* resourceTracker,
                                            VkSemaphoreCreateInfo* toTransform);

void transform_fromhost_VkSemaphoreCreateInfo(VkDecoderGlobalState* resourceTracker,
                                              VkSemaphoreCreateInfo* toTransform);

void transform_tohost_VkEventCreateInfo(VkDecoderGlobalState* resourceTracker,
                                        VkEventCreateInfo* toTransform);

void transform_fromhost_VkEventCreateInfo(VkDecoderGlobalState* resourceTracker,
                                          VkEventCreateInfo* toTransform);

void transform_tohost_VkQueryPoolCreateInfo(VkDecoderGlobalState* resourceTracker,
                                            VkQueryPoolCreateInfo* toTransform);

void transform_fromhost_VkQueryPoolCreateInfo(VkDecoderGlobalState* resourceTracker,
                                              VkQueryPoolCreateInfo* toTransform);

void transform_tohost_VkBufferCreateInfo(VkDecoderGlobalState* resourceTracker,
                                         VkBufferCreateInfo* toTransform);

void transform_fromhost_VkBufferCreateInfo(VkDecoderGlobalState* resourceTracker,
                                           VkBufferCreateInfo* toTransform);

void transform_tohost_VkBufferViewCreateInfo(VkDecoderGlobalState* resourceTracker,
                                             VkBufferViewCreateInfo* toTransform);

void transform_fromhost_VkBufferViewCreateInfo(VkDecoderGlobalState* resourceTracker,
                                               VkBufferViewCreateInfo* toTransform);

void transform_tohost_VkImageCreateInfo(VkDecoderGlobalState* resourceTracker,
                                        VkImageCreateInfo* toTransform);

void transform_fromhost_VkImageCreateInfo(VkDecoderGlobalState* resourceTracker,
                                          VkImageCreateInfo* toTransform);

void transform_tohost_VkSubresourceLayout(VkDecoderGlobalState* resourceTracker,
                                          VkSubresourceLayout* toTransform);

void transform_fromhost_VkSubresourceLayout(VkDecoderGlobalState* resourceTracker,
                                            VkSubresourceLayout* toTransform);

void transform_tohost_VkComponentMapping(VkDecoderGlobalState* resourceTracker,
                                         VkComponentMapping* toTransform);

void transform_fromhost_VkComponentMapping(VkDecoderGlobalState* resourceTracker,
                                           VkComponentMapping* toTransform);

void transform_tohost_VkImageViewCreateInfo(VkDecoderGlobalState* resourceTracker,
                                            VkImageViewCreateInfo* toTransform);

void transform_fromhost_VkImageViewCreateInfo(VkDecoderGlobalState* resourceTracker,
                                              VkImageViewCreateInfo* toTransform);

void transform_tohost_VkShaderModuleCreateInfo(VkDecoderGlobalState* resourceTracker,
                                               VkShaderModuleCreateInfo* toTransform);

void transform_fromhost_VkShaderModuleCreateInfo(VkDecoderGlobalState* resourceTracker,
                                                 VkShaderModuleCreateInfo* toTransform);

void transform_tohost_VkPipelineCacheCreateInfo(VkDecoderGlobalState* resourceTracker,
                                                VkPipelineCacheCreateInfo* toTransform);

void transform_fromhost_VkPipelineCacheCreateInfo(VkDecoderGlobalState* resourceTracker,
                                                  VkPipelineCacheCreateInfo* toTransform);

void transform_tohost_VkSpecializationMapEntry(VkDecoderGlobalState* resourceTracker,
                                               VkSpecializationMapEntry* toTransform);

void transform_fromhost_VkSpecializationMapEntry(VkDecoderGlobalState* resourceTracker,
                                                 VkSpecializationMapEntry* toTransform);

void transform_tohost_VkSpecializationInfo(VkDecoderGlobalState* resourceTracker,
                                           VkSpecializationInfo* toTransform);

void transform_fromhost_VkSpecializationInfo(VkDecoderGlobalState* resourceTracker,
                                             VkSpecializationInfo* toTransform);

void transform_tohost_VkPipelineShaderStageCreateInfo(VkDecoderGlobalState* resourceTracker,
                                                      VkPipelineShaderStageCreateInfo* toTransform);

void transform_fromhost_VkPipelineShaderStageCreateInfo(
    VkDecoderGlobalState* resourceTracker, VkPipelineShaderStageCreateInfo* toTransform);

void transform_tohost_VkComputePipelineCreateInfo(VkDecoderGlobalState* resourceTracker,
                                                  VkComputePipelineCreateInfo* toTransform);

void transform_fromhost_VkComputePipelineCreateInfo(VkDecoderGlobalState* resourceTracker,
                                                    VkComputePipelineCreateInfo* toTransform);

void transform_tohost_VkVertexInputBindingDescription(VkDecoderGlobalState* resourceTracker,
                                                      VkVertexInputBindingDescription* toTransform);

void transform_fromhost_VkVertexInputBindingDescription(
    VkDecoderGlobalState* resourceTracker, VkVertexInputBindingDescription* toTransform);

void transform_tohost_VkVertexInputAttributeDescription(
    VkDecoderGlobalState* resourceTracker, VkVertexInputAttributeDescription* toTransform);

void transform_fromhost_VkVertexInputAttributeDescription(
    VkDecoderGlobalState* resourceTracker, VkVertexInputAttributeDescription* toTransform);

void transform_tohost_VkPipelineVertexInputStateCreateInfo(
    VkDecoderGlobalState* resourceTracker, VkPipelineVertexInputStateCreateInfo* toTransform);

void transform_fromhost_VkPipelineVertexInputStateCreateInfo(
    VkDecoderGlobalState* resourceTracker, VkPipelineVertexInputStateCreateInfo* toTransform);

void transform_tohost_VkPipelineInputAssemblyStateCreateInfo(
    VkDecoderGlobalState* resourceTracker, VkPipelineInputAssemblyStateCreateInfo* toTransform);

void transform_fromhost_VkPipelineInputAssemblyStateCreateInfo(
    VkDecoderGlobalState* resourceTracker, VkPipelineInputAssemblyStateCreateInfo* toTransform);

void transform_tohost_VkPipelineTessellationStateCreateInfo(
    VkDecoderGlobalState* resourceTracker, VkPipelineTessellationStateCreateInfo* toTransform);

void transform_fromhost_VkPipelineTessellationStateCreateInfo(
    VkDecoderGlobalState* resourceTracker, VkPipelineTessellationStateCreateInfo* toTransform);

void transform_tohost_VkViewport(VkDecoderGlobalState* resourceTracker, VkViewport* toTransform);

void transform_fromhost_VkViewport(VkDecoderGlobalState* resourceTracker, VkViewport* toTransform);

void transform_tohost_VkPipelineViewportStateCreateInfo(
    VkDecoderGlobalState* resourceTracker, VkPipelineViewportStateCreateInfo* toTransform);

void transform_fromhost_VkPipelineViewportStateCreateInfo(
    VkDecoderGlobalState* resourceTracker, VkPipelineViewportStateCreateInfo* toTransform);

void transform_tohost_VkPipelineRasterizationStateCreateInfo(
    VkDecoderGlobalState* resourceTracker, VkPipelineRasterizationStateCreateInfo* toTransform);

void transform_fromhost_VkPipelineRasterizationStateCreateInfo(
    VkDecoderGlobalState* resourceTracker, VkPipelineRasterizationStateCreateInfo* toTransform);

void transform_tohost_VkPipelineMultisampleStateCreateInfo(
    VkDecoderGlobalState* resourceTracker, VkPipelineMultisampleStateCreateInfo* toTransform);

void transform_fromhost_VkPipelineMultisampleStateCreateInfo(
    VkDecoderGlobalState* resourceTracker, VkPipelineMultisampleStateCreateInfo* toTransform);

void transform_tohost_VkStencilOpState(VkDecoderGlobalState* resourceTracker,
                                       VkStencilOpState* toTransform);

void transform_fromhost_VkStencilOpState(VkDecoderGlobalState* resourceTracker,
                                         VkStencilOpState* toTransform);

void transform_tohost_VkPipelineDepthStencilStateCreateInfo(
    VkDecoderGlobalState* resourceTracker, VkPipelineDepthStencilStateCreateInfo* toTransform);

void transform_fromhost_VkPipelineDepthStencilStateCreateInfo(
    VkDecoderGlobalState* resourceTracker, VkPipelineDepthStencilStateCreateInfo* toTransform);

void transform_tohost_VkPipelineColorBlendAttachmentState(
    VkDecoderGlobalState* resourceTracker, VkPipelineColorBlendAttachmentState* toTransform);

void transform_fromhost_VkPipelineColorBlendAttachmentState(
    VkDecoderGlobalState* resourceTracker, VkPipelineColorBlendAttachmentState* toTransform);

void transform_tohost_VkPipelineColorBlendStateCreateInfo(
    VkDecoderGlobalState* resourceTracker, VkPipelineColorBlendStateCreateInfo* toTransform);

void transform_fromhost_VkPipelineColorBlendStateCreateInfo(
    VkDecoderGlobalState* resourceTracker, VkPipelineColorBlendStateCreateInfo* toTransform);

void transform_tohost_VkPipelineDynamicStateCreateInfo(
    VkDecoderGlobalState* resourceTracker, VkPipelineDynamicStateCreateInfo* toTransform);

void transform_fromhost_VkPipelineDynamicStateCreateInfo(
    VkDecoderGlobalState* resourceTracker, VkPipelineDynamicStateCreateInfo* toTransform);

void transform_tohost_VkGraphicsPipelineCreateInfo(VkDecoderGlobalState* resourceTracker,
                                                   VkGraphicsPipelineCreateInfo* toTransform);

void transform_fromhost_VkGraphicsPipelineCreateInfo(VkDecoderGlobalState* resourceTracker,
                                                     VkGraphicsPipelineCreateInfo* toTransform);

void transform_tohost_VkPushConstantRange(VkDecoderGlobalState* resourceTracker,
                                          VkPushConstantRange* toTransform);

void transform_fromhost_VkPushConstantRange(VkDecoderGlobalState* resourceTracker,
                                            VkPushConstantRange* toTransform);

void transform_tohost_VkPipelineLayoutCreateInfo(VkDecoderGlobalState* resourceTracker,
                                                 VkPipelineLayoutCreateInfo* toTransform);

void transform_fromhost_VkPipelineLayoutCreateInfo(VkDecoderGlobalState* resourceTracker,
                                                   VkPipelineLayoutCreateInfo* toTransform);

void transform_tohost_VkSamplerCreateInfo(VkDecoderGlobalState* resourceTracker,
                                          VkSamplerCreateInfo* toTransform);

void transform_fromhost_VkSamplerCreateInfo(VkDecoderGlobalState* resourceTracker,
                                            VkSamplerCreateInfo* toTransform);

void transform_tohost_VkCopyDescriptorSet(VkDecoderGlobalState* resourceTracker,
                                          VkCopyDescriptorSet* toTransform);

void transform_fromhost_VkCopyDescriptorSet(VkDecoderGlobalState* resourceTracker,
                                            VkCopyDescriptorSet* toTransform);

void transform_tohost_VkDescriptorBufferInfo(VkDecoderGlobalState* resourceTracker,
                                             VkDescriptorBufferInfo* toTransform);

void transform_fromhost_VkDescriptorBufferInfo(VkDecoderGlobalState* resourceTracker,
                                               VkDescriptorBufferInfo* toTransform);

void transform_tohost_VkDescriptorImageInfo(VkDecoderGlobalState* resourceTracker,
                                            VkDescriptorImageInfo* toTransform);

void transform_fromhost_VkDescriptorImageInfo(VkDecoderGlobalState* resourceTracker,
                                              VkDescriptorImageInfo* toTransform);

void transform_tohost_VkDescriptorPoolSize(VkDecoderGlobalState* resourceTracker,
                                           VkDescriptorPoolSize* toTransform);

void transform_fromhost_VkDescriptorPoolSize(VkDecoderGlobalState* resourceTracker,
                                             VkDescriptorPoolSize* toTransform);

void transform_tohost_VkDescriptorPoolCreateInfo(VkDecoderGlobalState* resourceTracker,
                                                 VkDescriptorPoolCreateInfo* toTransform);

void transform_fromhost_VkDescriptorPoolCreateInfo(VkDecoderGlobalState* resourceTracker,
                                                   VkDescriptorPoolCreateInfo* toTransform);

void transform_tohost_VkDescriptorSetAllocateInfo(VkDecoderGlobalState* resourceTracker,
                                                  VkDescriptorSetAllocateInfo* toTransform);

void transform_fromhost_VkDescriptorSetAllocateInfo(VkDecoderGlobalState* resourceTracker,
                                                    VkDescriptorSetAllocateInfo* toTransform);

void transform_tohost_VkDescriptorSetLayoutBinding(VkDecoderGlobalState* resourceTracker,
                                                   VkDescriptorSetLayoutBinding* toTransform);

void transform_fromhost_VkDescriptorSetLayoutBinding(VkDecoderGlobalState* resourceTracker,
                                                     VkDescriptorSetLayoutBinding* toTransform);

void transform_tohost_VkDescriptorSetLayoutCreateInfo(VkDecoderGlobalState* resourceTracker,
                                                      VkDescriptorSetLayoutCreateInfo* toTransform);

void transform_fromhost_VkDescriptorSetLayoutCreateInfo(
    VkDecoderGlobalState* resourceTracker, VkDescriptorSetLayoutCreateInfo* toTransform);

void transform_tohost_VkWriteDescriptorSet(VkDecoderGlobalState* resourceTracker,
                                           VkWriteDescriptorSet* toTransform);

void transform_fromhost_VkWriteDescriptorSet(VkDecoderGlobalState* resourceTracker,
                                             VkWriteDescriptorSet* toTransform);

void transform_tohost_VkAttachmentDescription(VkDecoderGlobalState* resourceTracker,
                                              VkAttachmentDescription* toTransform);

void transform_fromhost_VkAttachmentDescription(VkDecoderGlobalState* resourceTracker,
                                                VkAttachmentDescription* toTransform);

void transform_tohost_VkAttachmentReference(VkDecoderGlobalState* resourceTracker,
                                            VkAttachmentReference* toTransform);

void transform_fromhost_VkAttachmentReference(VkDecoderGlobalState* resourceTracker,
                                              VkAttachmentReference* toTransform);

void transform_tohost_VkFramebufferCreateInfo(VkDecoderGlobalState* resourceTracker,
                                              VkFramebufferCreateInfo* toTransform);

void transform_fromhost_VkFramebufferCreateInfo(VkDecoderGlobalState* resourceTracker,
                                                VkFramebufferCreateInfo* toTransform);

void transform_tohost_VkSubpassDescription(VkDecoderGlobalState* resourceTracker,
                                           VkSubpassDescription* toTransform);

void transform_fromhost_VkSubpassDescription(VkDecoderGlobalState* resourceTracker,
                                             VkSubpassDescription* toTransform);

void transform_tohost_VkSubpassDependency(VkDecoderGlobalState* resourceTracker,
                                          VkSubpassDependency* toTransform);

void transform_fromhost_VkSubpassDependency(VkDecoderGlobalState* resourceTracker,
                                            VkSubpassDependency* toTransform);

void transform_tohost_VkRenderPassCreateInfo(VkDecoderGlobalState* resourceTracker,
                                             VkRenderPassCreateInfo* toTransform);

void transform_fromhost_VkRenderPassCreateInfo(VkDecoderGlobalState* resourceTracker,
                                               VkRenderPassCreateInfo* toTransform);

void transform_tohost_VkCommandPoolCreateInfo(VkDecoderGlobalState* resourceTracker,
                                              VkCommandPoolCreateInfo* toTransform);

void transform_fromhost_VkCommandPoolCreateInfo(VkDecoderGlobalState* resourceTracker,
                                                VkCommandPoolCreateInfo* toTransform);

void transform_tohost_VkCommandBufferAllocateInfo(VkDecoderGlobalState* resourceTracker,
                                                  VkCommandBufferAllocateInfo* toTransform);

void transform_fromhost_VkCommandBufferAllocateInfo(VkDecoderGlobalState* resourceTracker,
                                                    VkCommandBufferAllocateInfo* toTransform);

void transform_tohost_VkCommandBufferInheritanceInfo(VkDecoderGlobalState* resourceTracker,
                                                     VkCommandBufferInheritanceInfo* toTransform);

void transform_fromhost_VkCommandBufferInheritanceInfo(VkDecoderGlobalState* resourceTracker,
                                                       VkCommandBufferInheritanceInfo* toTransform);

void transform_tohost_VkCommandBufferBeginInfo(VkDecoderGlobalState* resourceTracker,
                                               VkCommandBufferBeginInfo* toTransform);

void transform_fromhost_VkCommandBufferBeginInfo(VkDecoderGlobalState* resourceTracker,
                                                 VkCommandBufferBeginInfo* toTransform);

void transform_tohost_VkBufferCopy(VkDecoderGlobalState* resourceTracker,
                                   VkBufferCopy* toTransform);

void transform_fromhost_VkBufferCopy(VkDecoderGlobalState* resourceTracker,
                                     VkBufferCopy* toTransform);

void transform_tohost_VkImageSubresourceLayers(VkDecoderGlobalState* resourceTracker,
                                               VkImageSubresourceLayers* toTransform);

void transform_fromhost_VkImageSubresourceLayers(VkDecoderGlobalState* resourceTracker,
                                                 VkImageSubresourceLayers* toTransform);

void transform_tohost_VkBufferImageCopy(VkDecoderGlobalState* resourceTracker,
                                        VkBufferImageCopy* toTransform);

void transform_fromhost_VkBufferImageCopy(VkDecoderGlobalState* resourceTracker,
                                          VkBufferImageCopy* toTransform);

void transform_tohost_VkClearColorValue(VkDecoderGlobalState* resourceTracker,
                                        VkClearColorValue* toTransform);

void transform_fromhost_VkClearColorValue(VkDecoderGlobalState* resourceTracker,
                                          VkClearColorValue* toTransform);

void transform_tohost_VkClearDepthStencilValue(VkDecoderGlobalState* resourceTracker,
                                               VkClearDepthStencilValue* toTransform);

void transform_fromhost_VkClearDepthStencilValue(VkDecoderGlobalState* resourceTracker,
                                                 VkClearDepthStencilValue* toTransform);

void transform_tohost_VkClearValue(VkDecoderGlobalState* resourceTracker,
                                   VkClearValue* toTransform);

void transform_fromhost_VkClearValue(VkDecoderGlobalState* resourceTracker,
                                     VkClearValue* toTransform);

void transform_tohost_VkClearAttachment(VkDecoderGlobalState* resourceTracker,
                                        VkClearAttachment* toTransform);

void transform_fromhost_VkClearAttachment(VkDecoderGlobalState* resourceTracker,
                                          VkClearAttachment* toTransform);

void transform_tohost_VkClearRect(VkDecoderGlobalState* resourceTracker, VkClearRect* toTransform);

void transform_fromhost_VkClearRect(VkDecoderGlobalState* resourceTracker,
                                    VkClearRect* toTransform);

void transform_tohost_VkImageBlit(VkDecoderGlobalState* resourceTracker, VkImageBlit* toTransform);

void transform_fromhost_VkImageBlit(VkDecoderGlobalState* resourceTracker,
                                    VkImageBlit* toTransform);

void transform_tohost_VkImageCopy(VkDecoderGlobalState* resourceTracker, VkImageCopy* toTransform);

void transform_fromhost_VkImageCopy(VkDecoderGlobalState* resourceTracker,
                                    VkImageCopy* toTransform);

void transform_tohost_VkImageResolve(VkDecoderGlobalState* resourceTracker,
                                     VkImageResolve* toTransform);

void transform_fromhost_VkImageResolve(VkDecoderGlobalState* resourceTracker,
                                       VkImageResolve* toTransform);

void transform_tohost_VkRenderPassBeginInfo(VkDecoderGlobalState* resourceTracker,
                                            VkRenderPassBeginInfo* toTransform);

void transform_fromhost_VkRenderPassBeginInfo(VkDecoderGlobalState* resourceTracker,
                                              VkRenderPassBeginInfo* toTransform);

#endif
#ifdef VK_VERSION_1_1
void transform_tohost_VkPhysicalDeviceSubgroupProperties(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceSubgroupProperties* toTransform);

void transform_fromhost_VkPhysicalDeviceSubgroupProperties(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceSubgroupProperties* toTransform);

void transform_tohost_VkBindBufferMemoryInfo(VkDecoderGlobalState* resourceTracker,
                                             VkBindBufferMemoryInfo* toTransform);

void transform_fromhost_VkBindBufferMemoryInfo(VkDecoderGlobalState* resourceTracker,
                                               VkBindBufferMemoryInfo* toTransform);

void transform_tohost_VkBindImageMemoryInfo(VkDecoderGlobalState* resourceTracker,
                                            VkBindImageMemoryInfo* toTransform);

void transform_fromhost_VkBindImageMemoryInfo(VkDecoderGlobalState* resourceTracker,
                                              VkBindImageMemoryInfo* toTransform);

void transform_tohost_VkPhysicalDevice16BitStorageFeatures(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDevice16BitStorageFeatures* toTransform);

void transform_fromhost_VkPhysicalDevice16BitStorageFeatures(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDevice16BitStorageFeatures* toTransform);

void transform_tohost_VkMemoryDedicatedRequirements(VkDecoderGlobalState* resourceTracker,
                                                    VkMemoryDedicatedRequirements* toTransform);

void transform_fromhost_VkMemoryDedicatedRequirements(VkDecoderGlobalState* resourceTracker,
                                                      VkMemoryDedicatedRequirements* toTransform);

void transform_tohost_VkMemoryDedicatedAllocateInfo(VkDecoderGlobalState* resourceTracker,
                                                    VkMemoryDedicatedAllocateInfo* toTransform);

void transform_fromhost_VkMemoryDedicatedAllocateInfo(VkDecoderGlobalState* resourceTracker,
                                                      VkMemoryDedicatedAllocateInfo* toTransform);

void transform_tohost_VkMemoryAllocateFlagsInfo(VkDecoderGlobalState* resourceTracker,
                                                VkMemoryAllocateFlagsInfo* toTransform);

void transform_fromhost_VkMemoryAllocateFlagsInfo(VkDecoderGlobalState* resourceTracker,
                                                  VkMemoryAllocateFlagsInfo* toTransform);

void transform_tohost_VkDeviceGroupRenderPassBeginInfo(
    VkDecoderGlobalState* resourceTracker, VkDeviceGroupRenderPassBeginInfo* toTransform);

void transform_fromhost_VkDeviceGroupRenderPassBeginInfo(
    VkDecoderGlobalState* resourceTracker, VkDeviceGroupRenderPassBeginInfo* toTransform);

void transform_tohost_VkDeviceGroupCommandBufferBeginInfo(
    VkDecoderGlobalState* resourceTracker, VkDeviceGroupCommandBufferBeginInfo* toTransform);

void transform_fromhost_VkDeviceGroupCommandBufferBeginInfo(
    VkDecoderGlobalState* resourceTracker, VkDeviceGroupCommandBufferBeginInfo* toTransform);

void transform_tohost_VkDeviceGroupSubmitInfo(VkDecoderGlobalState* resourceTracker,
                                              VkDeviceGroupSubmitInfo* toTransform);

void transform_fromhost_VkDeviceGroupSubmitInfo(VkDecoderGlobalState* resourceTracker,
                                                VkDeviceGroupSubmitInfo* toTransform);

void transform_tohost_VkDeviceGroupBindSparseInfo(VkDecoderGlobalState* resourceTracker,
                                                  VkDeviceGroupBindSparseInfo* toTransform);

void transform_fromhost_VkDeviceGroupBindSparseInfo(VkDecoderGlobalState* resourceTracker,
                                                    VkDeviceGroupBindSparseInfo* toTransform);

void transform_tohost_VkBindBufferMemoryDeviceGroupInfo(
    VkDecoderGlobalState* resourceTracker, VkBindBufferMemoryDeviceGroupInfo* toTransform);

void transform_fromhost_VkBindBufferMemoryDeviceGroupInfo(
    VkDecoderGlobalState* resourceTracker, VkBindBufferMemoryDeviceGroupInfo* toTransform);

void transform_tohost_VkBindImageMemoryDeviceGroupInfo(
    VkDecoderGlobalState* resourceTracker, VkBindImageMemoryDeviceGroupInfo* toTransform);

void transform_fromhost_VkBindImageMemoryDeviceGroupInfo(
    VkDecoderGlobalState* resourceTracker, VkBindImageMemoryDeviceGroupInfo* toTransform);

void transform_tohost_VkPhysicalDeviceGroupProperties(VkDecoderGlobalState* resourceTracker,
                                                      VkPhysicalDeviceGroupProperties* toTransform);

void transform_fromhost_VkPhysicalDeviceGroupProperties(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceGroupProperties* toTransform);

void transform_tohost_VkDeviceGroupDeviceCreateInfo(VkDecoderGlobalState* resourceTracker,
                                                    VkDeviceGroupDeviceCreateInfo* toTransform);

void transform_fromhost_VkDeviceGroupDeviceCreateInfo(VkDecoderGlobalState* resourceTracker,
                                                      VkDeviceGroupDeviceCreateInfo* toTransform);

void transform_tohost_VkBufferMemoryRequirementsInfo2(VkDecoderGlobalState* resourceTracker,
                                                      VkBufferMemoryRequirementsInfo2* toTransform);

void transform_fromhost_VkBufferMemoryRequirementsInfo2(
    VkDecoderGlobalState* resourceTracker, VkBufferMemoryRequirementsInfo2* toTransform);

void transform_tohost_VkImageMemoryRequirementsInfo2(VkDecoderGlobalState* resourceTracker,
                                                     VkImageMemoryRequirementsInfo2* toTransform);

void transform_fromhost_VkImageMemoryRequirementsInfo2(VkDecoderGlobalState* resourceTracker,
                                                       VkImageMemoryRequirementsInfo2* toTransform);

void transform_tohost_VkImageSparseMemoryRequirementsInfo2(
    VkDecoderGlobalState* resourceTracker, VkImageSparseMemoryRequirementsInfo2* toTransform);

void transform_fromhost_VkImageSparseMemoryRequirementsInfo2(
    VkDecoderGlobalState* resourceTracker, VkImageSparseMemoryRequirementsInfo2* toTransform);

void transform_tohost_VkMemoryRequirements2(VkDecoderGlobalState* resourceTracker,
                                            VkMemoryRequirements2* toTransform);

void transform_fromhost_VkMemoryRequirements2(VkDecoderGlobalState* resourceTracker,
                                              VkMemoryRequirements2* toTransform);

void transform_tohost_VkSparseImageMemoryRequirements2(
    VkDecoderGlobalState* resourceTracker, VkSparseImageMemoryRequirements2* toTransform);

void transform_fromhost_VkSparseImageMemoryRequirements2(
    VkDecoderGlobalState* resourceTracker, VkSparseImageMemoryRequirements2* toTransform);

void transform_tohost_VkPhysicalDeviceFeatures2(VkDecoderGlobalState* resourceTracker,
                                                VkPhysicalDeviceFeatures2* toTransform);

void transform_fromhost_VkPhysicalDeviceFeatures2(VkDecoderGlobalState* resourceTracker,
                                                  VkPhysicalDeviceFeatures2* toTransform);

void transform_tohost_VkPhysicalDeviceProperties2(VkDecoderGlobalState* resourceTracker,
                                                  VkPhysicalDeviceProperties2* toTransform);

void transform_fromhost_VkPhysicalDeviceProperties2(VkDecoderGlobalState* resourceTracker,
                                                    VkPhysicalDeviceProperties2* toTransform);

void transform_tohost_VkFormatProperties2(VkDecoderGlobalState* resourceTracker,
                                          VkFormatProperties2* toTransform);

void transform_fromhost_VkFormatProperties2(VkDecoderGlobalState* resourceTracker,
                                            VkFormatProperties2* toTransform);

void transform_tohost_VkImageFormatProperties2(VkDecoderGlobalState* resourceTracker,
                                               VkImageFormatProperties2* toTransform);

void transform_fromhost_VkImageFormatProperties2(VkDecoderGlobalState* resourceTracker,
                                                 VkImageFormatProperties2* toTransform);

void transform_tohost_VkPhysicalDeviceImageFormatInfo2(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceImageFormatInfo2* toTransform);

void transform_fromhost_VkPhysicalDeviceImageFormatInfo2(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceImageFormatInfo2* toTransform);

void transform_tohost_VkQueueFamilyProperties2(VkDecoderGlobalState* resourceTracker,
                                               VkQueueFamilyProperties2* toTransform);

void transform_fromhost_VkQueueFamilyProperties2(VkDecoderGlobalState* resourceTracker,
                                                 VkQueueFamilyProperties2* toTransform);

void transform_tohost_VkPhysicalDeviceMemoryProperties2(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceMemoryProperties2* toTransform);

void transform_fromhost_VkPhysicalDeviceMemoryProperties2(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceMemoryProperties2* toTransform);

void transform_tohost_VkSparseImageFormatProperties2(VkDecoderGlobalState* resourceTracker,
                                                     VkSparseImageFormatProperties2* toTransform);

void transform_fromhost_VkSparseImageFormatProperties2(VkDecoderGlobalState* resourceTracker,
                                                       VkSparseImageFormatProperties2* toTransform);

void transform_tohost_VkPhysicalDeviceSparseImageFormatInfo2(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceSparseImageFormatInfo2* toTransform);

void transform_fromhost_VkPhysicalDeviceSparseImageFormatInfo2(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceSparseImageFormatInfo2* toTransform);

void transform_tohost_VkPhysicalDevicePointClippingProperties(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDevicePointClippingProperties* toTransform);

void transform_fromhost_VkPhysicalDevicePointClippingProperties(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDevicePointClippingProperties* toTransform);

void transform_tohost_VkInputAttachmentAspectReference(
    VkDecoderGlobalState* resourceTracker, VkInputAttachmentAspectReference* toTransform);

void transform_fromhost_VkInputAttachmentAspectReference(
    VkDecoderGlobalState* resourceTracker, VkInputAttachmentAspectReference* toTransform);

void transform_tohost_VkRenderPassInputAttachmentAspectCreateInfo(
    VkDecoderGlobalState* resourceTracker,
    VkRenderPassInputAttachmentAspectCreateInfo* toTransform);

void transform_fromhost_VkRenderPassInputAttachmentAspectCreateInfo(
    VkDecoderGlobalState* resourceTracker,
    VkRenderPassInputAttachmentAspectCreateInfo* toTransform);

void transform_tohost_VkImageViewUsageCreateInfo(VkDecoderGlobalState* resourceTracker,
                                                 VkImageViewUsageCreateInfo* toTransform);

void transform_fromhost_VkImageViewUsageCreateInfo(VkDecoderGlobalState* resourceTracker,
                                                   VkImageViewUsageCreateInfo* toTransform);

void transform_tohost_VkPipelineTessellationDomainOriginStateCreateInfo(
    VkDecoderGlobalState* resourceTracker,
    VkPipelineTessellationDomainOriginStateCreateInfo* toTransform);

void transform_fromhost_VkPipelineTessellationDomainOriginStateCreateInfo(
    VkDecoderGlobalState* resourceTracker,
    VkPipelineTessellationDomainOriginStateCreateInfo* toTransform);

void transform_tohost_VkRenderPassMultiviewCreateInfo(VkDecoderGlobalState* resourceTracker,
                                                      VkRenderPassMultiviewCreateInfo* toTransform);

void transform_fromhost_VkRenderPassMultiviewCreateInfo(
    VkDecoderGlobalState* resourceTracker, VkRenderPassMultiviewCreateInfo* toTransform);

void transform_tohost_VkPhysicalDeviceMultiviewFeatures(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceMultiviewFeatures* toTransform);

void transform_fromhost_VkPhysicalDeviceMultiviewFeatures(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceMultiviewFeatures* toTransform);

void transform_tohost_VkPhysicalDeviceMultiviewProperties(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceMultiviewProperties* toTransform);

void transform_fromhost_VkPhysicalDeviceMultiviewProperties(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceMultiviewProperties* toTransform);

void transform_tohost_VkPhysicalDeviceVariablePointersFeatures(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceVariablePointersFeatures* toTransform);

void transform_fromhost_VkPhysicalDeviceVariablePointersFeatures(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceVariablePointersFeatures* toTransform);

DEFINE_ALIAS_FUNCTION(transform_tohost_VkPhysicalDeviceVariablePointersFeatures,
                      transform_tohost_VkPhysicalDeviceVariablePointerFeatures)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPhysicalDeviceVariablePointersFeatures,
                      transform_fromhost_VkPhysicalDeviceVariablePointerFeatures)

void transform_tohost_VkPhysicalDeviceProtectedMemoryFeatures(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceProtectedMemoryFeatures* toTransform);

void transform_fromhost_VkPhysicalDeviceProtectedMemoryFeatures(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceProtectedMemoryFeatures* toTransform);

void transform_tohost_VkPhysicalDeviceProtectedMemoryProperties(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceProtectedMemoryProperties* toTransform);

void transform_fromhost_VkPhysicalDeviceProtectedMemoryProperties(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceProtectedMemoryProperties* toTransform);

void transform_tohost_VkDeviceQueueInfo2(VkDecoderGlobalState* resourceTracker,
                                         VkDeviceQueueInfo2* toTransform);

void transform_fromhost_VkDeviceQueueInfo2(VkDecoderGlobalState* resourceTracker,
                                           VkDeviceQueueInfo2* toTransform);

void transform_tohost_VkProtectedSubmitInfo(VkDecoderGlobalState* resourceTracker,
                                            VkProtectedSubmitInfo* toTransform);

void transform_fromhost_VkProtectedSubmitInfo(VkDecoderGlobalState* resourceTracker,
                                              VkProtectedSubmitInfo* toTransform);

void transform_tohost_VkSamplerYcbcrConversionCreateInfo(
    VkDecoderGlobalState* resourceTracker, VkSamplerYcbcrConversionCreateInfo* toTransform);

void transform_fromhost_VkSamplerYcbcrConversionCreateInfo(
    VkDecoderGlobalState* resourceTracker, VkSamplerYcbcrConversionCreateInfo* toTransform);

void transform_tohost_VkSamplerYcbcrConversionInfo(VkDecoderGlobalState* resourceTracker,
                                                   VkSamplerYcbcrConversionInfo* toTransform);

void transform_fromhost_VkSamplerYcbcrConversionInfo(VkDecoderGlobalState* resourceTracker,
                                                     VkSamplerYcbcrConversionInfo* toTransform);

void transform_tohost_VkBindImagePlaneMemoryInfo(VkDecoderGlobalState* resourceTracker,
                                                 VkBindImagePlaneMemoryInfo* toTransform);

void transform_fromhost_VkBindImagePlaneMemoryInfo(VkDecoderGlobalState* resourceTracker,
                                                   VkBindImagePlaneMemoryInfo* toTransform);

void transform_tohost_VkImagePlaneMemoryRequirementsInfo(
    VkDecoderGlobalState* resourceTracker, VkImagePlaneMemoryRequirementsInfo* toTransform);

void transform_fromhost_VkImagePlaneMemoryRequirementsInfo(
    VkDecoderGlobalState* resourceTracker, VkImagePlaneMemoryRequirementsInfo* toTransform);

void transform_tohost_VkPhysicalDeviceSamplerYcbcrConversionFeatures(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceSamplerYcbcrConversionFeatures* toTransform);

void transform_fromhost_VkPhysicalDeviceSamplerYcbcrConversionFeatures(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceSamplerYcbcrConversionFeatures* toTransform);

void transform_tohost_VkSamplerYcbcrConversionImageFormatProperties(
    VkDecoderGlobalState* resourceTracker,
    VkSamplerYcbcrConversionImageFormatProperties* toTransform);

void transform_fromhost_VkSamplerYcbcrConversionImageFormatProperties(
    VkDecoderGlobalState* resourceTracker,
    VkSamplerYcbcrConversionImageFormatProperties* toTransform);

void transform_tohost_VkDescriptorUpdateTemplateEntry(VkDecoderGlobalState* resourceTracker,
                                                      VkDescriptorUpdateTemplateEntry* toTransform);

void transform_fromhost_VkDescriptorUpdateTemplateEntry(
    VkDecoderGlobalState* resourceTracker, VkDescriptorUpdateTemplateEntry* toTransform);

void transform_tohost_VkDescriptorUpdateTemplateCreateInfo(
    VkDecoderGlobalState* resourceTracker, VkDescriptorUpdateTemplateCreateInfo* toTransform);

void transform_fromhost_VkDescriptorUpdateTemplateCreateInfo(
    VkDecoderGlobalState* resourceTracker, VkDescriptorUpdateTemplateCreateInfo* toTransform);

void transform_tohost_VkExternalMemoryProperties(VkDecoderGlobalState* resourceTracker,
                                                 VkExternalMemoryProperties* toTransform);

void transform_fromhost_VkExternalMemoryProperties(VkDecoderGlobalState* resourceTracker,
                                                   VkExternalMemoryProperties* toTransform);

void transform_tohost_VkPhysicalDeviceExternalImageFormatInfo(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceExternalImageFormatInfo* toTransform);

void transform_fromhost_VkPhysicalDeviceExternalImageFormatInfo(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceExternalImageFormatInfo* toTransform);

void transform_tohost_VkExternalImageFormatProperties(VkDecoderGlobalState* resourceTracker,
                                                      VkExternalImageFormatProperties* toTransform);

void transform_fromhost_VkExternalImageFormatProperties(
    VkDecoderGlobalState* resourceTracker, VkExternalImageFormatProperties* toTransform);

void transform_tohost_VkPhysicalDeviceExternalBufferInfo(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceExternalBufferInfo* toTransform);

void transform_fromhost_VkPhysicalDeviceExternalBufferInfo(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceExternalBufferInfo* toTransform);

void transform_tohost_VkExternalBufferProperties(VkDecoderGlobalState* resourceTracker,
                                                 VkExternalBufferProperties* toTransform);

void transform_fromhost_VkExternalBufferProperties(VkDecoderGlobalState* resourceTracker,
                                                   VkExternalBufferProperties* toTransform);

void transform_tohost_VkPhysicalDeviceIDProperties(VkDecoderGlobalState* resourceTracker,
                                                   VkPhysicalDeviceIDProperties* toTransform);

void transform_fromhost_VkPhysicalDeviceIDProperties(VkDecoderGlobalState* resourceTracker,
                                                     VkPhysicalDeviceIDProperties* toTransform);

void transform_tohost_VkExternalMemoryImageCreateInfo(VkDecoderGlobalState* resourceTracker,
                                                      VkExternalMemoryImageCreateInfo* toTransform);

void transform_fromhost_VkExternalMemoryImageCreateInfo(
    VkDecoderGlobalState* resourceTracker, VkExternalMemoryImageCreateInfo* toTransform);

void transform_tohost_VkExternalMemoryBufferCreateInfo(
    VkDecoderGlobalState* resourceTracker, VkExternalMemoryBufferCreateInfo* toTransform);

void transform_fromhost_VkExternalMemoryBufferCreateInfo(
    VkDecoderGlobalState* resourceTracker, VkExternalMemoryBufferCreateInfo* toTransform);

void transform_tohost_VkExportMemoryAllocateInfo(VkDecoderGlobalState* resourceTracker,
                                                 VkExportMemoryAllocateInfo* toTransform);

void transform_fromhost_VkExportMemoryAllocateInfo(VkDecoderGlobalState* resourceTracker,
                                                   VkExportMemoryAllocateInfo* toTransform);

void transform_tohost_VkPhysicalDeviceExternalFenceInfo(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceExternalFenceInfo* toTransform);

void transform_fromhost_VkPhysicalDeviceExternalFenceInfo(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceExternalFenceInfo* toTransform);

void transform_tohost_VkExternalFenceProperties(VkDecoderGlobalState* resourceTracker,
                                                VkExternalFenceProperties* toTransform);

void transform_fromhost_VkExternalFenceProperties(VkDecoderGlobalState* resourceTracker,
                                                  VkExternalFenceProperties* toTransform);

void transform_tohost_VkExportFenceCreateInfo(VkDecoderGlobalState* resourceTracker,
                                              VkExportFenceCreateInfo* toTransform);

void transform_fromhost_VkExportFenceCreateInfo(VkDecoderGlobalState* resourceTracker,
                                                VkExportFenceCreateInfo* toTransform);

void transform_tohost_VkExportSemaphoreCreateInfo(VkDecoderGlobalState* resourceTracker,
                                                  VkExportSemaphoreCreateInfo* toTransform);

void transform_fromhost_VkExportSemaphoreCreateInfo(VkDecoderGlobalState* resourceTracker,
                                                    VkExportSemaphoreCreateInfo* toTransform);

void transform_tohost_VkPhysicalDeviceExternalSemaphoreInfo(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceExternalSemaphoreInfo* toTransform);

void transform_fromhost_VkPhysicalDeviceExternalSemaphoreInfo(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceExternalSemaphoreInfo* toTransform);

void transform_tohost_VkExternalSemaphoreProperties(VkDecoderGlobalState* resourceTracker,
                                                    VkExternalSemaphoreProperties* toTransform);

void transform_fromhost_VkExternalSemaphoreProperties(VkDecoderGlobalState* resourceTracker,
                                                      VkExternalSemaphoreProperties* toTransform);

void transform_tohost_VkPhysicalDeviceMaintenance3Properties(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceMaintenance3Properties* toTransform);

void transform_fromhost_VkPhysicalDeviceMaintenance3Properties(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceMaintenance3Properties* toTransform);

void transform_tohost_VkDescriptorSetLayoutSupport(VkDecoderGlobalState* resourceTracker,
                                                   VkDescriptorSetLayoutSupport* toTransform);

void transform_fromhost_VkDescriptorSetLayoutSupport(VkDecoderGlobalState* resourceTracker,
                                                     VkDescriptorSetLayoutSupport* toTransform);

void transform_tohost_VkPhysicalDeviceShaderDrawParametersFeatures(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceShaderDrawParametersFeatures* toTransform);

void transform_fromhost_VkPhysicalDeviceShaderDrawParametersFeatures(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceShaderDrawParametersFeatures* toTransform);

DEFINE_ALIAS_FUNCTION(transform_tohost_VkPhysicalDeviceShaderDrawParametersFeatures,
                      transform_tohost_VkPhysicalDeviceShaderDrawParameterFeatures)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPhysicalDeviceShaderDrawParametersFeatures,
                      transform_fromhost_VkPhysicalDeviceShaderDrawParameterFeatures)

#endif
#ifdef VK_VERSION_1_2
void transform_tohost_VkPhysicalDeviceVulkan11Features(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceVulkan11Features* toTransform);

void transform_fromhost_VkPhysicalDeviceVulkan11Features(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceVulkan11Features* toTransform);

void transform_tohost_VkPhysicalDeviceVulkan11Properties(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceVulkan11Properties* toTransform);

void transform_fromhost_VkPhysicalDeviceVulkan11Properties(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceVulkan11Properties* toTransform);

void transform_tohost_VkPhysicalDeviceVulkan12Features(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceVulkan12Features* toTransform);

void transform_fromhost_VkPhysicalDeviceVulkan12Features(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceVulkan12Features* toTransform);

void transform_tohost_VkConformanceVersion(VkDecoderGlobalState* resourceTracker,
                                           VkConformanceVersion* toTransform);

void transform_fromhost_VkConformanceVersion(VkDecoderGlobalState* resourceTracker,
                                             VkConformanceVersion* toTransform);

void transform_tohost_VkPhysicalDeviceVulkan12Properties(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceVulkan12Properties* toTransform);

void transform_fromhost_VkPhysicalDeviceVulkan12Properties(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceVulkan12Properties* toTransform);

void transform_tohost_VkImageFormatListCreateInfo(VkDecoderGlobalState* resourceTracker,
                                                  VkImageFormatListCreateInfo* toTransform);

void transform_fromhost_VkImageFormatListCreateInfo(VkDecoderGlobalState* resourceTracker,
                                                    VkImageFormatListCreateInfo* toTransform);

void transform_tohost_VkAttachmentDescription2(VkDecoderGlobalState* resourceTracker,
                                               VkAttachmentDescription2* toTransform);

void transform_fromhost_VkAttachmentDescription2(VkDecoderGlobalState* resourceTracker,
                                                 VkAttachmentDescription2* toTransform);

void transform_tohost_VkAttachmentReference2(VkDecoderGlobalState* resourceTracker,
                                             VkAttachmentReference2* toTransform);

void transform_fromhost_VkAttachmentReference2(VkDecoderGlobalState* resourceTracker,
                                               VkAttachmentReference2* toTransform);

void transform_tohost_VkSubpassDescription2(VkDecoderGlobalState* resourceTracker,
                                            VkSubpassDescription2* toTransform);

void transform_fromhost_VkSubpassDescription2(VkDecoderGlobalState* resourceTracker,
                                              VkSubpassDescription2* toTransform);

void transform_tohost_VkSubpassDependency2(VkDecoderGlobalState* resourceTracker,
                                           VkSubpassDependency2* toTransform);

void transform_fromhost_VkSubpassDependency2(VkDecoderGlobalState* resourceTracker,
                                             VkSubpassDependency2* toTransform);

void transform_tohost_VkRenderPassCreateInfo2(VkDecoderGlobalState* resourceTracker,
                                              VkRenderPassCreateInfo2* toTransform);

void transform_fromhost_VkRenderPassCreateInfo2(VkDecoderGlobalState* resourceTracker,
                                                VkRenderPassCreateInfo2* toTransform);

void transform_tohost_VkSubpassBeginInfo(VkDecoderGlobalState* resourceTracker,
                                         VkSubpassBeginInfo* toTransform);

void transform_fromhost_VkSubpassBeginInfo(VkDecoderGlobalState* resourceTracker,
                                           VkSubpassBeginInfo* toTransform);

void transform_tohost_VkSubpassEndInfo(VkDecoderGlobalState* resourceTracker,
                                       VkSubpassEndInfo* toTransform);

void transform_fromhost_VkSubpassEndInfo(VkDecoderGlobalState* resourceTracker,
                                         VkSubpassEndInfo* toTransform);

void transform_tohost_VkPhysicalDevice8BitStorageFeatures(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDevice8BitStorageFeatures* toTransform);

void transform_fromhost_VkPhysicalDevice8BitStorageFeatures(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDevice8BitStorageFeatures* toTransform);

void transform_tohost_VkPhysicalDeviceDriverProperties(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceDriverProperties* toTransform);

void transform_fromhost_VkPhysicalDeviceDriverProperties(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceDriverProperties* toTransform);

void transform_tohost_VkPhysicalDeviceShaderAtomicInt64Features(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceShaderAtomicInt64Features* toTransform);

void transform_fromhost_VkPhysicalDeviceShaderAtomicInt64Features(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceShaderAtomicInt64Features* toTransform);

void transform_tohost_VkPhysicalDeviceShaderFloat16Int8Features(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceShaderFloat16Int8Features* toTransform);

void transform_fromhost_VkPhysicalDeviceShaderFloat16Int8Features(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceShaderFloat16Int8Features* toTransform);

void transform_tohost_VkPhysicalDeviceFloatControlsProperties(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceFloatControlsProperties* toTransform);

void transform_fromhost_VkPhysicalDeviceFloatControlsProperties(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceFloatControlsProperties* toTransform);

void transform_tohost_VkDescriptorSetLayoutBindingFlagsCreateInfo(
    VkDecoderGlobalState* resourceTracker,
    VkDescriptorSetLayoutBindingFlagsCreateInfo* toTransform);

void transform_fromhost_VkDescriptorSetLayoutBindingFlagsCreateInfo(
    VkDecoderGlobalState* resourceTracker,
    VkDescriptorSetLayoutBindingFlagsCreateInfo* toTransform);

void transform_tohost_VkPhysicalDeviceDescriptorIndexingFeatures(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceDescriptorIndexingFeatures* toTransform);

void transform_fromhost_VkPhysicalDeviceDescriptorIndexingFeatures(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceDescriptorIndexingFeatures* toTransform);

void transform_tohost_VkPhysicalDeviceDescriptorIndexingProperties(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceDescriptorIndexingProperties* toTransform);

void transform_fromhost_VkPhysicalDeviceDescriptorIndexingProperties(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceDescriptorIndexingProperties* toTransform);

void transform_tohost_VkDescriptorSetVariableDescriptorCountAllocateInfo(
    VkDecoderGlobalState* resourceTracker,
    VkDescriptorSetVariableDescriptorCountAllocateInfo* toTransform);

void transform_fromhost_VkDescriptorSetVariableDescriptorCountAllocateInfo(
    VkDecoderGlobalState* resourceTracker,
    VkDescriptorSetVariableDescriptorCountAllocateInfo* toTransform);

void transform_tohost_VkDescriptorSetVariableDescriptorCountLayoutSupport(
    VkDecoderGlobalState* resourceTracker,
    VkDescriptorSetVariableDescriptorCountLayoutSupport* toTransform);

void transform_fromhost_VkDescriptorSetVariableDescriptorCountLayoutSupport(
    VkDecoderGlobalState* resourceTracker,
    VkDescriptorSetVariableDescriptorCountLayoutSupport* toTransform);

void transform_tohost_VkSubpassDescriptionDepthStencilResolve(
    VkDecoderGlobalState* resourceTracker, VkSubpassDescriptionDepthStencilResolve* toTransform);

void transform_fromhost_VkSubpassDescriptionDepthStencilResolve(
    VkDecoderGlobalState* resourceTracker, VkSubpassDescriptionDepthStencilResolve* toTransform);

void transform_tohost_VkPhysicalDeviceDepthStencilResolveProperties(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceDepthStencilResolveProperties* toTransform);

void transform_fromhost_VkPhysicalDeviceDepthStencilResolveProperties(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceDepthStencilResolveProperties* toTransform);

void transform_tohost_VkPhysicalDeviceScalarBlockLayoutFeatures(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceScalarBlockLayoutFeatures* toTransform);

void transform_fromhost_VkPhysicalDeviceScalarBlockLayoutFeatures(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceScalarBlockLayoutFeatures* toTransform);

void transform_tohost_VkImageStencilUsageCreateInfo(VkDecoderGlobalState* resourceTracker,
                                                    VkImageStencilUsageCreateInfo* toTransform);

void transform_fromhost_VkImageStencilUsageCreateInfo(VkDecoderGlobalState* resourceTracker,
                                                      VkImageStencilUsageCreateInfo* toTransform);

void transform_tohost_VkSamplerReductionModeCreateInfo(
    VkDecoderGlobalState* resourceTracker, VkSamplerReductionModeCreateInfo* toTransform);

void transform_fromhost_VkSamplerReductionModeCreateInfo(
    VkDecoderGlobalState* resourceTracker, VkSamplerReductionModeCreateInfo* toTransform);

void transform_tohost_VkPhysicalDeviceSamplerFilterMinmaxProperties(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceSamplerFilterMinmaxProperties* toTransform);

void transform_fromhost_VkPhysicalDeviceSamplerFilterMinmaxProperties(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceSamplerFilterMinmaxProperties* toTransform);

void transform_tohost_VkPhysicalDeviceVulkanMemoryModelFeatures(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceVulkanMemoryModelFeatures* toTransform);

void transform_fromhost_VkPhysicalDeviceVulkanMemoryModelFeatures(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceVulkanMemoryModelFeatures* toTransform);

void transform_tohost_VkPhysicalDeviceImagelessFramebufferFeatures(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceImagelessFramebufferFeatures* toTransform);

void transform_fromhost_VkPhysicalDeviceImagelessFramebufferFeatures(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceImagelessFramebufferFeatures* toTransform);

void transform_tohost_VkFramebufferAttachmentImageInfo(
    VkDecoderGlobalState* resourceTracker, VkFramebufferAttachmentImageInfo* toTransform);

void transform_fromhost_VkFramebufferAttachmentImageInfo(
    VkDecoderGlobalState* resourceTracker, VkFramebufferAttachmentImageInfo* toTransform);

void transform_tohost_VkFramebufferAttachmentsCreateInfo(
    VkDecoderGlobalState* resourceTracker, VkFramebufferAttachmentsCreateInfo* toTransform);

void transform_fromhost_VkFramebufferAttachmentsCreateInfo(
    VkDecoderGlobalState* resourceTracker, VkFramebufferAttachmentsCreateInfo* toTransform);

void transform_tohost_VkRenderPassAttachmentBeginInfo(VkDecoderGlobalState* resourceTracker,
                                                      VkRenderPassAttachmentBeginInfo* toTransform);

void transform_fromhost_VkRenderPassAttachmentBeginInfo(
    VkDecoderGlobalState* resourceTracker, VkRenderPassAttachmentBeginInfo* toTransform);

void transform_tohost_VkPhysicalDeviceUniformBufferStandardLayoutFeatures(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceUniformBufferStandardLayoutFeatures* toTransform);

void transform_fromhost_VkPhysicalDeviceUniformBufferStandardLayoutFeatures(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceUniformBufferStandardLayoutFeatures* toTransform);

void transform_tohost_VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures* toTransform);

void transform_fromhost_VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures* toTransform);

void transform_tohost_VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures* toTransform);

void transform_fromhost_VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures* toTransform);

void transform_tohost_VkAttachmentReferenceStencilLayout(
    VkDecoderGlobalState* resourceTracker, VkAttachmentReferenceStencilLayout* toTransform);

void transform_fromhost_VkAttachmentReferenceStencilLayout(
    VkDecoderGlobalState* resourceTracker, VkAttachmentReferenceStencilLayout* toTransform);

void transform_tohost_VkAttachmentDescriptionStencilLayout(
    VkDecoderGlobalState* resourceTracker, VkAttachmentDescriptionStencilLayout* toTransform);

void transform_fromhost_VkAttachmentDescriptionStencilLayout(
    VkDecoderGlobalState* resourceTracker, VkAttachmentDescriptionStencilLayout* toTransform);

void transform_tohost_VkPhysicalDeviceHostQueryResetFeatures(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceHostQueryResetFeatures* toTransform);

void transform_fromhost_VkPhysicalDeviceHostQueryResetFeatures(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceHostQueryResetFeatures* toTransform);

void transform_tohost_VkPhysicalDeviceTimelineSemaphoreFeatures(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceTimelineSemaphoreFeatures* toTransform);

void transform_fromhost_VkPhysicalDeviceTimelineSemaphoreFeatures(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceTimelineSemaphoreFeatures* toTransform);

void transform_tohost_VkPhysicalDeviceTimelineSemaphoreProperties(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceTimelineSemaphoreProperties* toTransform);

void transform_fromhost_VkPhysicalDeviceTimelineSemaphoreProperties(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceTimelineSemaphoreProperties* toTransform);

void transform_tohost_VkSemaphoreTypeCreateInfo(VkDecoderGlobalState* resourceTracker,
                                                VkSemaphoreTypeCreateInfo* toTransform);

void transform_fromhost_VkSemaphoreTypeCreateInfo(VkDecoderGlobalState* resourceTracker,
                                                  VkSemaphoreTypeCreateInfo* toTransform);

void transform_tohost_VkTimelineSemaphoreSubmitInfo(VkDecoderGlobalState* resourceTracker,
                                                    VkTimelineSemaphoreSubmitInfo* toTransform);

void transform_fromhost_VkTimelineSemaphoreSubmitInfo(VkDecoderGlobalState* resourceTracker,
                                                      VkTimelineSemaphoreSubmitInfo* toTransform);

void transform_tohost_VkSemaphoreWaitInfo(VkDecoderGlobalState* resourceTracker,
                                          VkSemaphoreWaitInfo* toTransform);

void transform_fromhost_VkSemaphoreWaitInfo(VkDecoderGlobalState* resourceTracker,
                                            VkSemaphoreWaitInfo* toTransform);

void transform_tohost_VkSemaphoreSignalInfo(VkDecoderGlobalState* resourceTracker,
                                            VkSemaphoreSignalInfo* toTransform);

void transform_fromhost_VkSemaphoreSignalInfo(VkDecoderGlobalState* resourceTracker,
                                              VkSemaphoreSignalInfo* toTransform);

void transform_tohost_VkPhysicalDeviceBufferDeviceAddressFeatures(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceBufferDeviceAddressFeatures* toTransform);

void transform_fromhost_VkPhysicalDeviceBufferDeviceAddressFeatures(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceBufferDeviceAddressFeatures* toTransform);

void transform_tohost_VkBufferDeviceAddressInfo(VkDecoderGlobalState* resourceTracker,
                                                VkBufferDeviceAddressInfo* toTransform);

void transform_fromhost_VkBufferDeviceAddressInfo(VkDecoderGlobalState* resourceTracker,
                                                  VkBufferDeviceAddressInfo* toTransform);

void transform_tohost_VkBufferOpaqueCaptureAddressCreateInfo(
    VkDecoderGlobalState* resourceTracker, VkBufferOpaqueCaptureAddressCreateInfo* toTransform);

void transform_fromhost_VkBufferOpaqueCaptureAddressCreateInfo(
    VkDecoderGlobalState* resourceTracker, VkBufferOpaqueCaptureAddressCreateInfo* toTransform);

void transform_tohost_VkMemoryOpaqueCaptureAddressAllocateInfo(
    VkDecoderGlobalState* resourceTracker, VkMemoryOpaqueCaptureAddressAllocateInfo* toTransform);

void transform_fromhost_VkMemoryOpaqueCaptureAddressAllocateInfo(
    VkDecoderGlobalState* resourceTracker, VkMemoryOpaqueCaptureAddressAllocateInfo* toTransform);

void transform_tohost_VkDeviceMemoryOpaqueCaptureAddressInfo(
    VkDecoderGlobalState* resourceTracker, VkDeviceMemoryOpaqueCaptureAddressInfo* toTransform);

void transform_fromhost_VkDeviceMemoryOpaqueCaptureAddressInfo(
    VkDecoderGlobalState* resourceTracker, VkDeviceMemoryOpaqueCaptureAddressInfo* toTransform);

#endif
#ifdef VK_VERSION_1_3
void transform_tohost_VkPhysicalDeviceVulkan13Features(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceVulkan13Features* toTransform);

void transform_fromhost_VkPhysicalDeviceVulkan13Features(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceVulkan13Features* toTransform);

void transform_tohost_VkPhysicalDeviceVulkan13Properties(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceVulkan13Properties* toTransform);

void transform_fromhost_VkPhysicalDeviceVulkan13Properties(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceVulkan13Properties* toTransform);

void transform_tohost_VkPipelineCreationFeedback(VkDecoderGlobalState* resourceTracker,
                                                 VkPipelineCreationFeedback* toTransform);

void transform_fromhost_VkPipelineCreationFeedback(VkDecoderGlobalState* resourceTracker,
                                                   VkPipelineCreationFeedback* toTransform);

void transform_tohost_VkPipelineCreationFeedbackCreateInfo(
    VkDecoderGlobalState* resourceTracker, VkPipelineCreationFeedbackCreateInfo* toTransform);

void transform_fromhost_VkPipelineCreationFeedbackCreateInfo(
    VkDecoderGlobalState* resourceTracker, VkPipelineCreationFeedbackCreateInfo* toTransform);

void transform_tohost_VkPhysicalDeviceShaderTerminateInvocationFeatures(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceShaderTerminateInvocationFeatures* toTransform);

void transform_fromhost_VkPhysicalDeviceShaderTerminateInvocationFeatures(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceShaderTerminateInvocationFeatures* toTransform);

void transform_tohost_VkPhysicalDeviceToolProperties(VkDecoderGlobalState* resourceTracker,
                                                     VkPhysicalDeviceToolProperties* toTransform);

void transform_fromhost_VkPhysicalDeviceToolProperties(VkDecoderGlobalState* resourceTracker,
                                                       VkPhysicalDeviceToolProperties* toTransform);

void transform_tohost_VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures* toTransform);

void transform_fromhost_VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures* toTransform);

void transform_tohost_VkPhysicalDevicePrivateDataFeatures(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDevicePrivateDataFeatures* toTransform);

void transform_fromhost_VkPhysicalDevicePrivateDataFeatures(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDevicePrivateDataFeatures* toTransform);

void transform_tohost_VkDevicePrivateDataCreateInfo(VkDecoderGlobalState* resourceTracker,
                                                    VkDevicePrivateDataCreateInfo* toTransform);

void transform_fromhost_VkDevicePrivateDataCreateInfo(VkDecoderGlobalState* resourceTracker,
                                                      VkDevicePrivateDataCreateInfo* toTransform);

void transform_tohost_VkPrivateDataSlotCreateInfo(VkDecoderGlobalState* resourceTracker,
                                                  VkPrivateDataSlotCreateInfo* toTransform);

void transform_fromhost_VkPrivateDataSlotCreateInfo(VkDecoderGlobalState* resourceTracker,
                                                    VkPrivateDataSlotCreateInfo* toTransform);

void transform_tohost_VkPhysicalDevicePipelineCreationCacheControlFeatures(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDevicePipelineCreationCacheControlFeatures* toTransform);

void transform_fromhost_VkPhysicalDevicePipelineCreationCacheControlFeatures(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDevicePipelineCreationCacheControlFeatures* toTransform);

void transform_tohost_VkMemoryBarrier2(VkDecoderGlobalState* resourceTracker,
                                       VkMemoryBarrier2* toTransform);

void transform_fromhost_VkMemoryBarrier2(VkDecoderGlobalState* resourceTracker,
                                         VkMemoryBarrier2* toTransform);

void transform_tohost_VkBufferMemoryBarrier2(VkDecoderGlobalState* resourceTracker,
                                             VkBufferMemoryBarrier2* toTransform);

void transform_fromhost_VkBufferMemoryBarrier2(VkDecoderGlobalState* resourceTracker,
                                               VkBufferMemoryBarrier2* toTransform);

void transform_tohost_VkImageMemoryBarrier2(VkDecoderGlobalState* resourceTracker,
                                            VkImageMemoryBarrier2* toTransform);

void transform_fromhost_VkImageMemoryBarrier2(VkDecoderGlobalState* resourceTracker,
                                              VkImageMemoryBarrier2* toTransform);

void transform_tohost_VkDependencyInfo(VkDecoderGlobalState* resourceTracker,
                                       VkDependencyInfo* toTransform);

void transform_fromhost_VkDependencyInfo(VkDecoderGlobalState* resourceTracker,
                                         VkDependencyInfo* toTransform);

void transform_tohost_VkSemaphoreSubmitInfo(VkDecoderGlobalState* resourceTracker,
                                            VkSemaphoreSubmitInfo* toTransform);

void transform_fromhost_VkSemaphoreSubmitInfo(VkDecoderGlobalState* resourceTracker,
                                              VkSemaphoreSubmitInfo* toTransform);

void transform_tohost_VkCommandBufferSubmitInfo(VkDecoderGlobalState* resourceTracker,
                                                VkCommandBufferSubmitInfo* toTransform);

void transform_fromhost_VkCommandBufferSubmitInfo(VkDecoderGlobalState* resourceTracker,
                                                  VkCommandBufferSubmitInfo* toTransform);

void transform_tohost_VkSubmitInfo2(VkDecoderGlobalState* resourceTracker,
                                    VkSubmitInfo2* toTransform);

void transform_fromhost_VkSubmitInfo2(VkDecoderGlobalState* resourceTracker,
                                      VkSubmitInfo2* toTransform);

void transform_tohost_VkPhysicalDeviceSynchronization2Features(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceSynchronization2Features* toTransform);

void transform_fromhost_VkPhysicalDeviceSynchronization2Features(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceSynchronization2Features* toTransform);

void transform_tohost_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures* toTransform);

void transform_fromhost_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures* toTransform);

void transform_tohost_VkPhysicalDeviceImageRobustnessFeatures(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceImageRobustnessFeatures* toTransform);

void transform_fromhost_VkPhysicalDeviceImageRobustnessFeatures(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceImageRobustnessFeatures* toTransform);

void transform_tohost_VkBufferCopy2(VkDecoderGlobalState* resourceTracker,
                                    VkBufferCopy2* toTransform);

void transform_fromhost_VkBufferCopy2(VkDecoderGlobalState* resourceTracker,
                                      VkBufferCopy2* toTransform);

void transform_tohost_VkCopyBufferInfo2(VkDecoderGlobalState* resourceTracker,
                                        VkCopyBufferInfo2* toTransform);

void transform_fromhost_VkCopyBufferInfo2(VkDecoderGlobalState* resourceTracker,
                                          VkCopyBufferInfo2* toTransform);

void transform_tohost_VkImageCopy2(VkDecoderGlobalState* resourceTracker,
                                   VkImageCopy2* toTransform);

void transform_fromhost_VkImageCopy2(VkDecoderGlobalState* resourceTracker,
                                     VkImageCopy2* toTransform);

void transform_tohost_VkCopyImageInfo2(VkDecoderGlobalState* resourceTracker,
                                       VkCopyImageInfo2* toTransform);

void transform_fromhost_VkCopyImageInfo2(VkDecoderGlobalState* resourceTracker,
                                         VkCopyImageInfo2* toTransform);

void transform_tohost_VkBufferImageCopy2(VkDecoderGlobalState* resourceTracker,
                                         VkBufferImageCopy2* toTransform);

void transform_fromhost_VkBufferImageCopy2(VkDecoderGlobalState* resourceTracker,
                                           VkBufferImageCopy2* toTransform);

void transform_tohost_VkCopyBufferToImageInfo2(VkDecoderGlobalState* resourceTracker,
                                               VkCopyBufferToImageInfo2* toTransform);

void transform_fromhost_VkCopyBufferToImageInfo2(VkDecoderGlobalState* resourceTracker,
                                                 VkCopyBufferToImageInfo2* toTransform);

void transform_tohost_VkCopyImageToBufferInfo2(VkDecoderGlobalState* resourceTracker,
                                               VkCopyImageToBufferInfo2* toTransform);

void transform_fromhost_VkCopyImageToBufferInfo2(VkDecoderGlobalState* resourceTracker,
                                                 VkCopyImageToBufferInfo2* toTransform);

void transform_tohost_VkImageBlit2(VkDecoderGlobalState* resourceTracker,
                                   VkImageBlit2* toTransform);

void transform_fromhost_VkImageBlit2(VkDecoderGlobalState* resourceTracker,
                                     VkImageBlit2* toTransform);

void transform_tohost_VkBlitImageInfo2(VkDecoderGlobalState* resourceTracker,
                                       VkBlitImageInfo2* toTransform);

void transform_fromhost_VkBlitImageInfo2(VkDecoderGlobalState* resourceTracker,
                                         VkBlitImageInfo2* toTransform);

void transform_tohost_VkImageResolve2(VkDecoderGlobalState* resourceTracker,
                                      VkImageResolve2* toTransform);

void transform_fromhost_VkImageResolve2(VkDecoderGlobalState* resourceTracker,
                                        VkImageResolve2* toTransform);

void transform_tohost_VkResolveImageInfo2(VkDecoderGlobalState* resourceTracker,
                                          VkResolveImageInfo2* toTransform);

void transform_fromhost_VkResolveImageInfo2(VkDecoderGlobalState* resourceTracker,
                                            VkResolveImageInfo2* toTransform);

void transform_tohost_VkPhysicalDeviceSubgroupSizeControlFeatures(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceSubgroupSizeControlFeatures* toTransform);

void transform_fromhost_VkPhysicalDeviceSubgroupSizeControlFeatures(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceSubgroupSizeControlFeatures* toTransform);

void transform_tohost_VkPhysicalDeviceSubgroupSizeControlProperties(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceSubgroupSizeControlProperties* toTransform);

void transform_fromhost_VkPhysicalDeviceSubgroupSizeControlProperties(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceSubgroupSizeControlProperties* toTransform);

void transform_tohost_VkPipelineShaderStageRequiredSubgroupSizeCreateInfo(
    VkDecoderGlobalState* resourceTracker,
    VkPipelineShaderStageRequiredSubgroupSizeCreateInfo* toTransform);

void transform_fromhost_VkPipelineShaderStageRequiredSubgroupSizeCreateInfo(
    VkDecoderGlobalState* resourceTracker,
    VkPipelineShaderStageRequiredSubgroupSizeCreateInfo* toTransform);

void transform_tohost_VkPhysicalDeviceInlineUniformBlockFeatures(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceInlineUniformBlockFeatures* toTransform);

void transform_fromhost_VkPhysicalDeviceInlineUniformBlockFeatures(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceInlineUniformBlockFeatures* toTransform);

void transform_tohost_VkPhysicalDeviceInlineUniformBlockProperties(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceInlineUniformBlockProperties* toTransform);

void transform_fromhost_VkPhysicalDeviceInlineUniformBlockProperties(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceInlineUniformBlockProperties* toTransform);

void transform_tohost_VkWriteDescriptorSetInlineUniformBlock(
    VkDecoderGlobalState* resourceTracker, VkWriteDescriptorSetInlineUniformBlock* toTransform);

void transform_fromhost_VkWriteDescriptorSetInlineUniformBlock(
    VkDecoderGlobalState* resourceTracker, VkWriteDescriptorSetInlineUniformBlock* toTransform);

void transform_tohost_VkDescriptorPoolInlineUniformBlockCreateInfo(
    VkDecoderGlobalState* resourceTracker,
    VkDescriptorPoolInlineUniformBlockCreateInfo* toTransform);

void transform_fromhost_VkDescriptorPoolInlineUniformBlockCreateInfo(
    VkDecoderGlobalState* resourceTracker,
    VkDescriptorPoolInlineUniformBlockCreateInfo* toTransform);

void transform_tohost_VkPhysicalDeviceTextureCompressionASTCHDRFeatures(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceTextureCompressionASTCHDRFeatures* toTransform);

void transform_fromhost_VkPhysicalDeviceTextureCompressionASTCHDRFeatures(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceTextureCompressionASTCHDRFeatures* toTransform);

void transform_tohost_VkRenderingAttachmentInfo(VkDecoderGlobalState* resourceTracker,
                                                VkRenderingAttachmentInfo* toTransform);

void transform_fromhost_VkRenderingAttachmentInfo(VkDecoderGlobalState* resourceTracker,
                                                  VkRenderingAttachmentInfo* toTransform);

void transform_tohost_VkRenderingInfo(VkDecoderGlobalState* resourceTracker,
                                      VkRenderingInfo* toTransform);

void transform_fromhost_VkRenderingInfo(VkDecoderGlobalState* resourceTracker,
                                        VkRenderingInfo* toTransform);

void transform_tohost_VkPipelineRenderingCreateInfo(VkDecoderGlobalState* resourceTracker,
                                                    VkPipelineRenderingCreateInfo* toTransform);

void transform_fromhost_VkPipelineRenderingCreateInfo(VkDecoderGlobalState* resourceTracker,
                                                      VkPipelineRenderingCreateInfo* toTransform);

void transform_tohost_VkPhysicalDeviceDynamicRenderingFeatures(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceDynamicRenderingFeatures* toTransform);

void transform_fromhost_VkPhysicalDeviceDynamicRenderingFeatures(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceDynamicRenderingFeatures* toTransform);

void transform_tohost_VkCommandBufferInheritanceRenderingInfo(
    VkDecoderGlobalState* resourceTracker, VkCommandBufferInheritanceRenderingInfo* toTransform);

void transform_fromhost_VkCommandBufferInheritanceRenderingInfo(
    VkDecoderGlobalState* resourceTracker, VkCommandBufferInheritanceRenderingInfo* toTransform);

void transform_tohost_VkPhysicalDeviceShaderIntegerDotProductFeatures(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceShaderIntegerDotProductFeatures* toTransform);

void transform_fromhost_VkPhysicalDeviceShaderIntegerDotProductFeatures(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceShaderIntegerDotProductFeatures* toTransform);

void transform_tohost_VkPhysicalDeviceShaderIntegerDotProductProperties(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceShaderIntegerDotProductProperties* toTransform);

void transform_fromhost_VkPhysicalDeviceShaderIntegerDotProductProperties(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceShaderIntegerDotProductProperties* toTransform);

void transform_tohost_VkPhysicalDeviceTexelBufferAlignmentProperties(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceTexelBufferAlignmentProperties* toTransform);

void transform_fromhost_VkPhysicalDeviceTexelBufferAlignmentProperties(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceTexelBufferAlignmentProperties* toTransform);

void transform_tohost_VkFormatProperties3(VkDecoderGlobalState* resourceTracker,
                                          VkFormatProperties3* toTransform);

void transform_fromhost_VkFormatProperties3(VkDecoderGlobalState* resourceTracker,
                                            VkFormatProperties3* toTransform);

void transform_tohost_VkPhysicalDeviceMaintenance4Features(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceMaintenance4Features* toTransform);

void transform_fromhost_VkPhysicalDeviceMaintenance4Features(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceMaintenance4Features* toTransform);

void transform_tohost_VkPhysicalDeviceMaintenance4Properties(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceMaintenance4Properties* toTransform);

void transform_fromhost_VkPhysicalDeviceMaintenance4Properties(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceMaintenance4Properties* toTransform);

void transform_tohost_VkDeviceBufferMemoryRequirements(
    VkDecoderGlobalState* resourceTracker, VkDeviceBufferMemoryRequirements* toTransform);

void transform_fromhost_VkDeviceBufferMemoryRequirements(
    VkDecoderGlobalState* resourceTracker, VkDeviceBufferMemoryRequirements* toTransform);

void transform_tohost_VkDeviceImageMemoryRequirements(VkDecoderGlobalState* resourceTracker,
                                                      VkDeviceImageMemoryRequirements* toTransform);

void transform_fromhost_VkDeviceImageMemoryRequirements(
    VkDecoderGlobalState* resourceTracker, VkDeviceImageMemoryRequirements* toTransform);

#endif
#ifdef VK_KHR_swapchain
void transform_tohost_VkSwapchainCreateInfoKHR(VkDecoderGlobalState* resourceTracker,
                                               VkSwapchainCreateInfoKHR* toTransform);

void transform_fromhost_VkSwapchainCreateInfoKHR(VkDecoderGlobalState* resourceTracker,
                                                 VkSwapchainCreateInfoKHR* toTransform);

void transform_tohost_VkPresentInfoKHR(VkDecoderGlobalState* resourceTracker,
                                       VkPresentInfoKHR* toTransform);

void transform_fromhost_VkPresentInfoKHR(VkDecoderGlobalState* resourceTracker,
                                         VkPresentInfoKHR* toTransform);

void transform_tohost_VkImageSwapchainCreateInfoKHR(VkDecoderGlobalState* resourceTracker,
                                                    VkImageSwapchainCreateInfoKHR* toTransform);

void transform_fromhost_VkImageSwapchainCreateInfoKHR(VkDecoderGlobalState* resourceTracker,
                                                      VkImageSwapchainCreateInfoKHR* toTransform);

void transform_tohost_VkBindImageMemorySwapchainInfoKHR(
    VkDecoderGlobalState* resourceTracker, VkBindImageMemorySwapchainInfoKHR* toTransform);

void transform_fromhost_VkBindImageMemorySwapchainInfoKHR(
    VkDecoderGlobalState* resourceTracker, VkBindImageMemorySwapchainInfoKHR* toTransform);

void transform_tohost_VkAcquireNextImageInfoKHR(VkDecoderGlobalState* resourceTracker,
                                                VkAcquireNextImageInfoKHR* toTransform);

void transform_fromhost_VkAcquireNextImageInfoKHR(VkDecoderGlobalState* resourceTracker,
                                                  VkAcquireNextImageInfoKHR* toTransform);

void transform_tohost_VkDeviceGroupPresentCapabilitiesKHR(
    VkDecoderGlobalState* resourceTracker, VkDeviceGroupPresentCapabilitiesKHR* toTransform);

void transform_fromhost_VkDeviceGroupPresentCapabilitiesKHR(
    VkDecoderGlobalState* resourceTracker, VkDeviceGroupPresentCapabilitiesKHR* toTransform);

void transform_tohost_VkDeviceGroupPresentInfoKHR(VkDecoderGlobalState* resourceTracker,
                                                  VkDeviceGroupPresentInfoKHR* toTransform);

void transform_fromhost_VkDeviceGroupPresentInfoKHR(VkDecoderGlobalState* resourceTracker,
                                                    VkDeviceGroupPresentInfoKHR* toTransform);

void transform_tohost_VkDeviceGroupSwapchainCreateInfoKHR(
    VkDecoderGlobalState* resourceTracker, VkDeviceGroupSwapchainCreateInfoKHR* toTransform);

void transform_fromhost_VkDeviceGroupSwapchainCreateInfoKHR(
    VkDecoderGlobalState* resourceTracker, VkDeviceGroupSwapchainCreateInfoKHR* toTransform);

#endif
#ifdef VK_KHR_dynamic_rendering
DEFINE_ALIAS_FUNCTION(transform_tohost_VkRenderingInfo, transform_tohost_VkRenderingInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkRenderingInfo, transform_fromhost_VkRenderingInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkRenderingAttachmentInfo,
                      transform_tohost_VkRenderingAttachmentInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkRenderingAttachmentInfo,
                      transform_fromhost_VkRenderingAttachmentInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkPipelineRenderingCreateInfo,
                      transform_tohost_VkPipelineRenderingCreateInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPipelineRenderingCreateInfo,
                      transform_fromhost_VkPipelineRenderingCreateInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkPhysicalDeviceDynamicRenderingFeatures,
                      transform_tohost_VkPhysicalDeviceDynamicRenderingFeaturesKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPhysicalDeviceDynamicRenderingFeatures,
                      transform_fromhost_VkPhysicalDeviceDynamicRenderingFeaturesKHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkCommandBufferInheritanceRenderingInfo,
                      transform_tohost_VkCommandBufferInheritanceRenderingInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkCommandBufferInheritanceRenderingInfo,
                      transform_fromhost_VkCommandBufferInheritanceRenderingInfoKHR)

void transform_tohost_VkRenderingFragmentShadingRateAttachmentInfoKHR(
    VkDecoderGlobalState* resourceTracker,
    VkRenderingFragmentShadingRateAttachmentInfoKHR* toTransform);

void transform_fromhost_VkRenderingFragmentShadingRateAttachmentInfoKHR(
    VkDecoderGlobalState* resourceTracker,
    VkRenderingFragmentShadingRateAttachmentInfoKHR* toTransform);

void transform_tohost_VkRenderingFragmentDensityMapAttachmentInfoEXT(
    VkDecoderGlobalState* resourceTracker,
    VkRenderingFragmentDensityMapAttachmentInfoEXT* toTransform);

void transform_fromhost_VkRenderingFragmentDensityMapAttachmentInfoEXT(
    VkDecoderGlobalState* resourceTracker,
    VkRenderingFragmentDensityMapAttachmentInfoEXT* toTransform);

void transform_tohost_VkAttachmentSampleCountInfoAMD(VkDecoderGlobalState* resourceTracker,
                                                     VkAttachmentSampleCountInfoAMD* toTransform);

void transform_fromhost_VkAttachmentSampleCountInfoAMD(VkDecoderGlobalState* resourceTracker,
                                                       VkAttachmentSampleCountInfoAMD* toTransform);

DEFINE_ALIAS_FUNCTION(transform_tohost_VkAttachmentSampleCountInfoAMD,
                      transform_tohost_VkAttachmentSampleCountInfoNV)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkAttachmentSampleCountInfoAMD,
                      transform_fromhost_VkAttachmentSampleCountInfoNV)

void transform_tohost_VkMultiviewPerViewAttributesInfoNVX(
    VkDecoderGlobalState* resourceTracker, VkMultiviewPerViewAttributesInfoNVX* toTransform);

void transform_fromhost_VkMultiviewPerViewAttributesInfoNVX(
    VkDecoderGlobalState* resourceTracker, VkMultiviewPerViewAttributesInfoNVX* toTransform);

#endif
#ifdef VK_KHR_get_physical_device_properties2
DEFINE_ALIAS_FUNCTION(transform_tohost_VkPhysicalDeviceFeatures2,
                      transform_tohost_VkPhysicalDeviceFeatures2KHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPhysicalDeviceFeatures2,
                      transform_fromhost_VkPhysicalDeviceFeatures2KHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkPhysicalDeviceProperties2,
                      transform_tohost_VkPhysicalDeviceProperties2KHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPhysicalDeviceProperties2,
                      transform_fromhost_VkPhysicalDeviceProperties2KHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkFormatProperties2, transform_tohost_VkFormatProperties2KHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkFormatProperties2,
                      transform_fromhost_VkFormatProperties2KHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkImageFormatProperties2,
                      transform_tohost_VkImageFormatProperties2KHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkImageFormatProperties2,
                      transform_fromhost_VkImageFormatProperties2KHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkPhysicalDeviceImageFormatInfo2,
                      transform_tohost_VkPhysicalDeviceImageFormatInfo2KHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPhysicalDeviceImageFormatInfo2,
                      transform_fromhost_VkPhysicalDeviceImageFormatInfo2KHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkQueueFamilyProperties2,
                      transform_tohost_VkQueueFamilyProperties2KHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkQueueFamilyProperties2,
                      transform_fromhost_VkQueueFamilyProperties2KHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkPhysicalDeviceMemoryProperties2,
                      transform_tohost_VkPhysicalDeviceMemoryProperties2KHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPhysicalDeviceMemoryProperties2,
                      transform_fromhost_VkPhysicalDeviceMemoryProperties2KHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkSparseImageFormatProperties2,
                      transform_tohost_VkSparseImageFormatProperties2KHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkSparseImageFormatProperties2,
                      transform_fromhost_VkSparseImageFormatProperties2KHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkPhysicalDeviceSparseImageFormatInfo2,
                      transform_tohost_VkPhysicalDeviceSparseImageFormatInfo2KHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPhysicalDeviceSparseImageFormatInfo2,
                      transform_fromhost_VkPhysicalDeviceSparseImageFormatInfo2KHR)

#endif
#ifdef VK_KHR_external_memory_capabilities
DEFINE_ALIAS_FUNCTION(transform_tohost_VkExternalMemoryProperties,
                      transform_tohost_VkExternalMemoryPropertiesKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkExternalMemoryProperties,
                      transform_fromhost_VkExternalMemoryPropertiesKHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkPhysicalDeviceExternalImageFormatInfo,
                      transform_tohost_VkPhysicalDeviceExternalImageFormatInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPhysicalDeviceExternalImageFormatInfo,
                      transform_fromhost_VkPhysicalDeviceExternalImageFormatInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkExternalImageFormatProperties,
                      transform_tohost_VkExternalImageFormatPropertiesKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkExternalImageFormatProperties,
                      transform_fromhost_VkExternalImageFormatPropertiesKHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkPhysicalDeviceExternalBufferInfo,
                      transform_tohost_VkPhysicalDeviceExternalBufferInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPhysicalDeviceExternalBufferInfo,
                      transform_fromhost_VkPhysicalDeviceExternalBufferInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkExternalBufferProperties,
                      transform_tohost_VkExternalBufferPropertiesKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkExternalBufferProperties,
                      transform_fromhost_VkExternalBufferPropertiesKHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkPhysicalDeviceIDProperties,
                      transform_tohost_VkPhysicalDeviceIDPropertiesKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPhysicalDeviceIDProperties,
                      transform_fromhost_VkPhysicalDeviceIDPropertiesKHR)

#endif
#ifdef VK_KHR_external_memory
DEFINE_ALIAS_FUNCTION(transform_tohost_VkExternalMemoryImageCreateInfo,
                      transform_tohost_VkExternalMemoryImageCreateInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkExternalMemoryImageCreateInfo,
                      transform_fromhost_VkExternalMemoryImageCreateInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkExternalMemoryBufferCreateInfo,
                      transform_tohost_VkExternalMemoryBufferCreateInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkExternalMemoryBufferCreateInfo,
                      transform_fromhost_VkExternalMemoryBufferCreateInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkExportMemoryAllocateInfo,
                      transform_tohost_VkExportMemoryAllocateInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkExportMemoryAllocateInfo,
                      transform_fromhost_VkExportMemoryAllocateInfoKHR)

#endif
#ifdef VK_KHR_external_semaphore_capabilities
DEFINE_ALIAS_FUNCTION(transform_tohost_VkPhysicalDeviceExternalSemaphoreInfo,
                      transform_tohost_VkPhysicalDeviceExternalSemaphoreInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPhysicalDeviceExternalSemaphoreInfo,
                      transform_fromhost_VkPhysicalDeviceExternalSemaphoreInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkExternalSemaphoreProperties,
                      transform_tohost_VkExternalSemaphorePropertiesKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkExternalSemaphoreProperties,
                      transform_fromhost_VkExternalSemaphorePropertiesKHR)

#endif
#ifdef VK_KHR_external_semaphore
DEFINE_ALIAS_FUNCTION(transform_tohost_VkExportSemaphoreCreateInfo,
                      transform_tohost_VkExportSemaphoreCreateInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkExportSemaphoreCreateInfo,
                      transform_fromhost_VkExportSemaphoreCreateInfoKHR)

#endif
#ifdef VK_KHR_external_semaphore_fd
void transform_tohost_VkImportSemaphoreFdInfoKHR(VkDecoderGlobalState* resourceTracker,
                                                 VkImportSemaphoreFdInfoKHR* toTransform);

void transform_fromhost_VkImportSemaphoreFdInfoKHR(VkDecoderGlobalState* resourceTracker,
                                                   VkImportSemaphoreFdInfoKHR* toTransform);

void transform_tohost_VkSemaphoreGetFdInfoKHR(VkDecoderGlobalState* resourceTracker,
                                              VkSemaphoreGetFdInfoKHR* toTransform);

void transform_fromhost_VkSemaphoreGetFdInfoKHR(VkDecoderGlobalState* resourceTracker,
                                                VkSemaphoreGetFdInfoKHR* toTransform);

#endif
#ifdef VK_KHR_shader_float16_int8
DEFINE_ALIAS_FUNCTION(transform_tohost_VkPhysicalDeviceShaderFloat16Int8Features,
                      transform_tohost_VkPhysicalDeviceShaderFloat16Int8FeaturesKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPhysicalDeviceShaderFloat16Int8Features,
                      transform_fromhost_VkPhysicalDeviceShaderFloat16Int8FeaturesKHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkPhysicalDeviceShaderFloat16Int8Features,
                      transform_tohost_VkPhysicalDeviceFloat16Int8FeaturesKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPhysicalDeviceShaderFloat16Int8Features,
                      transform_fromhost_VkPhysicalDeviceFloat16Int8FeaturesKHR)

#endif
#ifdef VK_KHR_incremental_present
void transform_tohost_VkRectLayerKHR(VkDecoderGlobalState* resourceTracker,
                                     VkRectLayerKHR* toTransform);

void transform_fromhost_VkRectLayerKHR(VkDecoderGlobalState* resourceTracker,
                                       VkRectLayerKHR* toTransform);

void transform_tohost_VkPresentRegionKHR(VkDecoderGlobalState* resourceTracker,
                                         VkPresentRegionKHR* toTransform);

void transform_fromhost_VkPresentRegionKHR(VkDecoderGlobalState* resourceTracker,
                                           VkPresentRegionKHR* toTransform);

void transform_tohost_VkPresentRegionsKHR(VkDecoderGlobalState* resourceTracker,
                                          VkPresentRegionsKHR* toTransform);

void transform_fromhost_VkPresentRegionsKHR(VkDecoderGlobalState* resourceTracker,
                                            VkPresentRegionsKHR* toTransform);

#endif
#ifdef VK_KHR_descriptor_update_template
DEFINE_ALIAS_FUNCTION(transform_tohost_VkDescriptorUpdateTemplateEntry,
                      transform_tohost_VkDescriptorUpdateTemplateEntryKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkDescriptorUpdateTemplateEntry,
                      transform_fromhost_VkDescriptorUpdateTemplateEntryKHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkDescriptorUpdateTemplateCreateInfo,
                      transform_tohost_VkDescriptorUpdateTemplateCreateInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkDescriptorUpdateTemplateCreateInfo,
                      transform_fromhost_VkDescriptorUpdateTemplateCreateInfoKHR)

#endif
#ifdef VK_KHR_imageless_framebuffer
DEFINE_ALIAS_FUNCTION(transform_tohost_VkPhysicalDeviceImagelessFramebufferFeatures,
                      transform_tohost_VkPhysicalDeviceImagelessFramebufferFeaturesKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPhysicalDeviceImagelessFramebufferFeatures,
                      transform_fromhost_VkPhysicalDeviceImagelessFramebufferFeaturesKHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkFramebufferAttachmentsCreateInfo,
                      transform_tohost_VkFramebufferAttachmentsCreateInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkFramebufferAttachmentsCreateInfo,
                      transform_fromhost_VkFramebufferAttachmentsCreateInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkFramebufferAttachmentImageInfo,
                      transform_tohost_VkFramebufferAttachmentImageInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkFramebufferAttachmentImageInfo,
                      transform_fromhost_VkFramebufferAttachmentImageInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkRenderPassAttachmentBeginInfo,
                      transform_tohost_VkRenderPassAttachmentBeginInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkRenderPassAttachmentBeginInfo,
                      transform_fromhost_VkRenderPassAttachmentBeginInfoKHR)

#endif
#ifdef VK_KHR_create_renderpass2
DEFINE_ALIAS_FUNCTION(transform_tohost_VkRenderPassCreateInfo2,
                      transform_tohost_VkRenderPassCreateInfo2KHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkRenderPassCreateInfo2,
                      transform_fromhost_VkRenderPassCreateInfo2KHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkAttachmentDescription2,
                      transform_tohost_VkAttachmentDescription2KHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkAttachmentDescription2,
                      transform_fromhost_VkAttachmentDescription2KHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkAttachmentReference2,
                      transform_tohost_VkAttachmentReference2KHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkAttachmentReference2,
                      transform_fromhost_VkAttachmentReference2KHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkSubpassDescription2,
                      transform_tohost_VkSubpassDescription2KHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkSubpassDescription2,
                      transform_fromhost_VkSubpassDescription2KHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkSubpassDependency2,
                      transform_tohost_VkSubpassDependency2KHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkSubpassDependency2,
                      transform_fromhost_VkSubpassDependency2KHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkSubpassBeginInfo, transform_tohost_VkSubpassBeginInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkSubpassBeginInfo,
                      transform_fromhost_VkSubpassBeginInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkSubpassEndInfo, transform_tohost_VkSubpassEndInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkSubpassEndInfo, transform_fromhost_VkSubpassEndInfoKHR)

#endif
#ifdef VK_KHR_external_fence_capabilities
DEFINE_ALIAS_FUNCTION(transform_tohost_VkPhysicalDeviceExternalFenceInfo,
                      transform_tohost_VkPhysicalDeviceExternalFenceInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPhysicalDeviceExternalFenceInfo,
                      transform_fromhost_VkPhysicalDeviceExternalFenceInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkExternalFenceProperties,
                      transform_tohost_VkExternalFencePropertiesKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkExternalFenceProperties,
                      transform_fromhost_VkExternalFencePropertiesKHR)

#endif
#ifdef VK_KHR_external_fence
DEFINE_ALIAS_FUNCTION(transform_tohost_VkExportFenceCreateInfo,
                      transform_tohost_VkExportFenceCreateInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkExportFenceCreateInfo,
                      transform_fromhost_VkExportFenceCreateInfoKHR)

#endif
#ifdef VK_KHR_external_fence_fd
void transform_tohost_VkImportFenceFdInfoKHR(VkDecoderGlobalState* resourceTracker,
                                             VkImportFenceFdInfoKHR* toTransform);

void transform_fromhost_VkImportFenceFdInfoKHR(VkDecoderGlobalState* resourceTracker,
                                               VkImportFenceFdInfoKHR* toTransform);

void transform_tohost_VkFenceGetFdInfoKHR(VkDecoderGlobalState* resourceTracker,
                                          VkFenceGetFdInfoKHR* toTransform);

void transform_fromhost_VkFenceGetFdInfoKHR(VkDecoderGlobalState* resourceTracker,
                                            VkFenceGetFdInfoKHR* toTransform);

#endif
#ifdef VK_KHR_maintenance2
DEFINE_ALIAS_FUNCTION(transform_tohost_VkPhysicalDevicePointClippingProperties,
                      transform_tohost_VkPhysicalDevicePointClippingPropertiesKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPhysicalDevicePointClippingProperties,
                      transform_fromhost_VkPhysicalDevicePointClippingPropertiesKHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkRenderPassInputAttachmentAspectCreateInfo,
                      transform_tohost_VkRenderPassInputAttachmentAspectCreateInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkRenderPassInputAttachmentAspectCreateInfo,
                      transform_fromhost_VkRenderPassInputAttachmentAspectCreateInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkInputAttachmentAspectReference,
                      transform_tohost_VkInputAttachmentAspectReferenceKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkInputAttachmentAspectReference,
                      transform_fromhost_VkInputAttachmentAspectReferenceKHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkImageViewUsageCreateInfo,
                      transform_tohost_VkImageViewUsageCreateInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkImageViewUsageCreateInfo,
                      transform_fromhost_VkImageViewUsageCreateInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkPipelineTessellationDomainOriginStateCreateInfo,
                      transform_tohost_VkPipelineTessellationDomainOriginStateCreateInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPipelineTessellationDomainOriginStateCreateInfo,
                      transform_fromhost_VkPipelineTessellationDomainOriginStateCreateInfoKHR)

#endif
#ifdef VK_KHR_dedicated_allocation
DEFINE_ALIAS_FUNCTION(transform_tohost_VkMemoryDedicatedRequirements,
                      transform_tohost_VkMemoryDedicatedRequirementsKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkMemoryDedicatedRequirements,
                      transform_fromhost_VkMemoryDedicatedRequirementsKHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkMemoryDedicatedAllocateInfo,
                      transform_tohost_VkMemoryDedicatedAllocateInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkMemoryDedicatedAllocateInfo,
                      transform_fromhost_VkMemoryDedicatedAllocateInfoKHR)

#endif
#ifdef VK_KHR_get_memory_requirements2
DEFINE_ALIAS_FUNCTION(transform_tohost_VkBufferMemoryRequirementsInfo2,
                      transform_tohost_VkBufferMemoryRequirementsInfo2KHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkBufferMemoryRequirementsInfo2,
                      transform_fromhost_VkBufferMemoryRequirementsInfo2KHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkImageMemoryRequirementsInfo2,
                      transform_tohost_VkImageMemoryRequirementsInfo2KHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkImageMemoryRequirementsInfo2,
                      transform_fromhost_VkImageMemoryRequirementsInfo2KHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkImageSparseMemoryRequirementsInfo2,
                      transform_tohost_VkImageSparseMemoryRequirementsInfo2KHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkImageSparseMemoryRequirementsInfo2,
                      transform_fromhost_VkImageSparseMemoryRequirementsInfo2KHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkMemoryRequirements2,
                      transform_tohost_VkMemoryRequirements2KHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkMemoryRequirements2,
                      transform_fromhost_VkMemoryRequirements2KHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkSparseImageMemoryRequirements2,
                      transform_tohost_VkSparseImageMemoryRequirements2KHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkSparseImageMemoryRequirements2,
                      transform_fromhost_VkSparseImageMemoryRequirements2KHR)

#endif
#ifdef VK_KHR_image_format_list
DEFINE_ALIAS_FUNCTION(transform_tohost_VkImageFormatListCreateInfo,
                      transform_tohost_VkImageFormatListCreateInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkImageFormatListCreateInfo,
                      transform_fromhost_VkImageFormatListCreateInfoKHR)

#endif
#ifdef VK_KHR_sampler_ycbcr_conversion
DEFINE_ALIAS_FUNCTION(transform_tohost_VkSamplerYcbcrConversionCreateInfo,
                      transform_tohost_VkSamplerYcbcrConversionCreateInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkSamplerYcbcrConversionCreateInfo,
                      transform_fromhost_VkSamplerYcbcrConversionCreateInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkSamplerYcbcrConversionInfo,
                      transform_tohost_VkSamplerYcbcrConversionInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkSamplerYcbcrConversionInfo,
                      transform_fromhost_VkSamplerYcbcrConversionInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkBindImagePlaneMemoryInfo,
                      transform_tohost_VkBindImagePlaneMemoryInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkBindImagePlaneMemoryInfo,
                      transform_fromhost_VkBindImagePlaneMemoryInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkImagePlaneMemoryRequirementsInfo,
                      transform_tohost_VkImagePlaneMemoryRequirementsInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkImagePlaneMemoryRequirementsInfo,
                      transform_fromhost_VkImagePlaneMemoryRequirementsInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkPhysicalDeviceSamplerYcbcrConversionFeatures,
                      transform_tohost_VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPhysicalDeviceSamplerYcbcrConversionFeatures,
                      transform_fromhost_VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkSamplerYcbcrConversionImageFormatProperties,
                      transform_tohost_VkSamplerYcbcrConversionImageFormatPropertiesKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkSamplerYcbcrConversionImageFormatProperties,
                      transform_fromhost_VkSamplerYcbcrConversionImageFormatPropertiesKHR)

#endif
#ifdef VK_KHR_bind_memory2
DEFINE_ALIAS_FUNCTION(transform_tohost_VkBindBufferMemoryInfo,
                      transform_tohost_VkBindBufferMemoryInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkBindBufferMemoryInfo,
                      transform_fromhost_VkBindBufferMemoryInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkBindImageMemoryInfo,
                      transform_tohost_VkBindImageMemoryInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkBindImageMemoryInfo,
                      transform_fromhost_VkBindImageMemoryInfoKHR)

#endif
#ifdef VK_KHR_maintenance3
DEFINE_ALIAS_FUNCTION(transform_tohost_VkPhysicalDeviceMaintenance3Properties,
                      transform_tohost_VkPhysicalDeviceMaintenance3PropertiesKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPhysicalDeviceMaintenance3Properties,
                      transform_fromhost_VkPhysicalDeviceMaintenance3PropertiesKHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkDescriptorSetLayoutSupport,
                      transform_tohost_VkDescriptorSetLayoutSupportKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkDescriptorSetLayoutSupport,
                      transform_fromhost_VkDescriptorSetLayoutSupportKHR)

#endif
#ifdef VK_KHR_shader_subgroup_extended_types
DEFINE_ALIAS_FUNCTION(transform_tohost_VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures,
                      transform_tohost_VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures,
                      transform_fromhost_VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR)

#endif
#ifdef VK_KHR_vulkan_memory_model
DEFINE_ALIAS_FUNCTION(transform_tohost_VkPhysicalDeviceVulkanMemoryModelFeatures,
                      transform_tohost_VkPhysicalDeviceVulkanMemoryModelFeaturesKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPhysicalDeviceVulkanMemoryModelFeatures,
                      transform_fromhost_VkPhysicalDeviceVulkanMemoryModelFeaturesKHR)

#endif
#ifdef VK_KHR_shader_terminate_invocation
DEFINE_ALIAS_FUNCTION(transform_tohost_VkPhysicalDeviceShaderTerminateInvocationFeatures,
                      transform_tohost_VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPhysicalDeviceShaderTerminateInvocationFeatures,
                      transform_fromhost_VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR)

#endif
#ifdef VK_KHR_buffer_device_address
DEFINE_ALIAS_FUNCTION(transform_tohost_VkPhysicalDeviceBufferDeviceAddressFeatures,
                      transform_tohost_VkPhysicalDeviceBufferDeviceAddressFeaturesKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPhysicalDeviceBufferDeviceAddressFeatures,
                      transform_fromhost_VkPhysicalDeviceBufferDeviceAddressFeaturesKHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkBufferDeviceAddressInfo,
                      transform_tohost_VkBufferDeviceAddressInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkBufferDeviceAddressInfo,
                      transform_fromhost_VkBufferDeviceAddressInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkBufferOpaqueCaptureAddressCreateInfo,
                      transform_tohost_VkBufferOpaqueCaptureAddressCreateInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkBufferOpaqueCaptureAddressCreateInfo,
                      transform_fromhost_VkBufferOpaqueCaptureAddressCreateInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkMemoryOpaqueCaptureAddressAllocateInfo,
                      transform_tohost_VkMemoryOpaqueCaptureAddressAllocateInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkMemoryOpaqueCaptureAddressAllocateInfo,
                      transform_fromhost_VkMemoryOpaqueCaptureAddressAllocateInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkDeviceMemoryOpaqueCaptureAddressInfo,
                      transform_tohost_VkDeviceMemoryOpaqueCaptureAddressInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkDeviceMemoryOpaqueCaptureAddressInfo,
                      transform_fromhost_VkDeviceMemoryOpaqueCaptureAddressInfoKHR)

#endif
#ifdef VK_KHR_pipeline_executable_properties
void transform_tohost_VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR* toTransform);

void transform_fromhost_VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR* toTransform);

void transform_tohost_VkPipelineInfoKHR(VkDecoderGlobalState* resourceTracker,
                                        VkPipelineInfoKHR* toTransform);

void transform_fromhost_VkPipelineInfoKHR(VkDecoderGlobalState* resourceTracker,
                                          VkPipelineInfoKHR* toTransform);

void transform_tohost_VkPipelineExecutablePropertiesKHR(
    VkDecoderGlobalState* resourceTracker, VkPipelineExecutablePropertiesKHR* toTransform);

void transform_fromhost_VkPipelineExecutablePropertiesKHR(
    VkDecoderGlobalState* resourceTracker, VkPipelineExecutablePropertiesKHR* toTransform);

void transform_tohost_VkPipelineExecutableInfoKHR(VkDecoderGlobalState* resourceTracker,
                                                  VkPipelineExecutableInfoKHR* toTransform);

void transform_fromhost_VkPipelineExecutableInfoKHR(VkDecoderGlobalState* resourceTracker,
                                                    VkPipelineExecutableInfoKHR* toTransform);

void transform_tohost_VkPipelineExecutableStatisticValueKHR(
    VkDecoderGlobalState* resourceTracker, VkPipelineExecutableStatisticValueKHR* toTransform);

void transform_fromhost_VkPipelineExecutableStatisticValueKHR(
    VkDecoderGlobalState* resourceTracker, VkPipelineExecutableStatisticValueKHR* toTransform);

void transform_tohost_VkPipelineExecutableStatisticKHR(
    VkDecoderGlobalState* resourceTracker, VkPipelineExecutableStatisticKHR* toTransform);

void transform_fromhost_VkPipelineExecutableStatisticKHR(
    VkDecoderGlobalState* resourceTracker, VkPipelineExecutableStatisticKHR* toTransform);

void transform_tohost_VkPipelineExecutableInternalRepresentationKHR(
    VkDecoderGlobalState* resourceTracker,
    VkPipelineExecutableInternalRepresentationKHR* toTransform);

void transform_fromhost_VkPipelineExecutableInternalRepresentationKHR(
    VkDecoderGlobalState* resourceTracker,
    VkPipelineExecutableInternalRepresentationKHR* toTransform);

#endif
#ifdef VK_KHR_shader_integer_dot_product
DEFINE_ALIAS_FUNCTION(transform_tohost_VkPhysicalDeviceShaderIntegerDotProductFeatures,
                      transform_tohost_VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPhysicalDeviceShaderIntegerDotProductFeatures,
                      transform_fromhost_VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkPhysicalDeviceShaderIntegerDotProductProperties,
                      transform_tohost_VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPhysicalDeviceShaderIntegerDotProductProperties,
                      transform_fromhost_VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR)

#endif
#ifdef VK_KHR_pipeline_library
void transform_tohost_VkPipelineLibraryCreateInfoKHR(VkDecoderGlobalState* resourceTracker,
                                                     VkPipelineLibraryCreateInfoKHR* toTransform);

void transform_fromhost_VkPipelineLibraryCreateInfoKHR(VkDecoderGlobalState* resourceTracker,
                                                       VkPipelineLibraryCreateInfoKHR* toTransform);

#endif
#ifdef VK_KHR_synchronization2
DEFINE_ALIAS_FUNCTION(transform_tohost_VkMemoryBarrier2, transform_tohost_VkMemoryBarrier2KHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkMemoryBarrier2, transform_fromhost_VkMemoryBarrier2KHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkBufferMemoryBarrier2,
                      transform_tohost_VkBufferMemoryBarrier2KHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkBufferMemoryBarrier2,
                      transform_fromhost_VkBufferMemoryBarrier2KHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkImageMemoryBarrier2,
                      transform_tohost_VkImageMemoryBarrier2KHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkImageMemoryBarrier2,
                      transform_fromhost_VkImageMemoryBarrier2KHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkDependencyInfo, transform_tohost_VkDependencyInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkDependencyInfo, transform_fromhost_VkDependencyInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkSubmitInfo2, transform_tohost_VkSubmitInfo2KHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkSubmitInfo2, transform_fromhost_VkSubmitInfo2KHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkSemaphoreSubmitInfo,
                      transform_tohost_VkSemaphoreSubmitInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkSemaphoreSubmitInfo,
                      transform_fromhost_VkSemaphoreSubmitInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkCommandBufferSubmitInfo,
                      transform_tohost_VkCommandBufferSubmitInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkCommandBufferSubmitInfo,
                      transform_fromhost_VkCommandBufferSubmitInfoKHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkPhysicalDeviceSynchronization2Features,
                      transform_tohost_VkPhysicalDeviceSynchronization2FeaturesKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPhysicalDeviceSynchronization2Features,
                      transform_fromhost_VkPhysicalDeviceSynchronization2FeaturesKHR)

void transform_tohost_VkQueueFamilyCheckpointProperties2NV(
    VkDecoderGlobalState* resourceTracker, VkQueueFamilyCheckpointProperties2NV* toTransform);

void transform_fromhost_VkQueueFamilyCheckpointProperties2NV(
    VkDecoderGlobalState* resourceTracker, VkQueueFamilyCheckpointProperties2NV* toTransform);

void transform_tohost_VkCheckpointData2NV(VkDecoderGlobalState* resourceTracker,
                                          VkCheckpointData2NV* toTransform);

void transform_fromhost_VkCheckpointData2NV(VkDecoderGlobalState* resourceTracker,
                                            VkCheckpointData2NV* toTransform);

#endif
#ifdef VK_KHR_zero_initialize_workgroup_memory
DEFINE_ALIAS_FUNCTION(transform_tohost_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures,
                      transform_tohost_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures,
                      transform_fromhost_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR)

#endif
#ifdef VK_KHR_copy_commands2
DEFINE_ALIAS_FUNCTION(transform_tohost_VkCopyBufferInfo2, transform_tohost_VkCopyBufferInfo2KHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkCopyBufferInfo2, transform_fromhost_VkCopyBufferInfo2KHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkCopyImageInfo2, transform_tohost_VkCopyImageInfo2KHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkCopyImageInfo2, transform_fromhost_VkCopyImageInfo2KHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkCopyBufferToImageInfo2,
                      transform_tohost_VkCopyBufferToImageInfo2KHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkCopyBufferToImageInfo2,
                      transform_fromhost_VkCopyBufferToImageInfo2KHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkCopyImageToBufferInfo2,
                      transform_tohost_VkCopyImageToBufferInfo2KHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkCopyImageToBufferInfo2,
                      transform_fromhost_VkCopyImageToBufferInfo2KHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkBlitImageInfo2, transform_tohost_VkBlitImageInfo2KHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkBlitImageInfo2, transform_fromhost_VkBlitImageInfo2KHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkResolveImageInfo2, transform_tohost_VkResolveImageInfo2KHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkResolveImageInfo2,
                      transform_fromhost_VkResolveImageInfo2KHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkBufferCopy2, transform_tohost_VkBufferCopy2KHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkBufferCopy2, transform_fromhost_VkBufferCopy2KHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkImageCopy2, transform_tohost_VkImageCopy2KHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkImageCopy2, transform_fromhost_VkImageCopy2KHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkImageBlit2, transform_tohost_VkImageBlit2KHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkImageBlit2, transform_fromhost_VkImageBlit2KHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkBufferImageCopy2, transform_tohost_VkBufferImageCopy2KHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkBufferImageCopy2,
                      transform_fromhost_VkBufferImageCopy2KHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkImageResolve2, transform_tohost_VkImageResolve2KHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkImageResolve2, transform_fromhost_VkImageResolve2KHR)

#endif
#ifdef VK_KHR_format_feature_flags2
DEFINE_ALIAS_FUNCTION(transform_tohost_VkFormatProperties3, transform_tohost_VkFormatProperties3KHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkFormatProperties3,
                      transform_fromhost_VkFormatProperties3KHR)

#endif
#ifdef VK_KHR_maintenance4
DEFINE_ALIAS_FUNCTION(transform_tohost_VkPhysicalDeviceMaintenance4Features,
                      transform_tohost_VkPhysicalDeviceMaintenance4FeaturesKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPhysicalDeviceMaintenance4Features,
                      transform_fromhost_VkPhysicalDeviceMaintenance4FeaturesKHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkPhysicalDeviceMaintenance4Properties,
                      transform_tohost_VkPhysicalDeviceMaintenance4PropertiesKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPhysicalDeviceMaintenance4Properties,
                      transform_fromhost_VkPhysicalDeviceMaintenance4PropertiesKHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkDeviceBufferMemoryRequirements,
                      transform_tohost_VkDeviceBufferMemoryRequirementsKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkDeviceBufferMemoryRequirements,
                      transform_fromhost_VkDeviceBufferMemoryRequirementsKHR)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkDeviceImageMemoryRequirements,
                      transform_tohost_VkDeviceImageMemoryRequirementsKHR)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkDeviceImageMemoryRequirements,
                      transform_fromhost_VkDeviceImageMemoryRequirementsKHR)

#endif
#ifdef VK_KHR_maintenance5
void transform_tohost_VkPhysicalDeviceMaintenance5FeaturesKHR(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceMaintenance5FeaturesKHR* toTransform);

void transform_fromhost_VkPhysicalDeviceMaintenance5FeaturesKHR(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceMaintenance5FeaturesKHR* toTransform);

void transform_tohost_VkPhysicalDeviceMaintenance5PropertiesKHR(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceMaintenance5PropertiesKHR* toTransform);

void transform_fromhost_VkPhysicalDeviceMaintenance5PropertiesKHR(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceMaintenance5PropertiesKHR* toTransform);

void transform_tohost_VkRenderingAreaInfoKHR(VkDecoderGlobalState* resourceTracker,
                                             VkRenderingAreaInfoKHR* toTransform);

void transform_fromhost_VkRenderingAreaInfoKHR(VkDecoderGlobalState* resourceTracker,
                                               VkRenderingAreaInfoKHR* toTransform);

void transform_tohost_VkImageSubresource2KHR(VkDecoderGlobalState* resourceTracker,
                                             VkImageSubresource2KHR* toTransform);

void transform_fromhost_VkImageSubresource2KHR(VkDecoderGlobalState* resourceTracker,
                                               VkImageSubresource2KHR* toTransform);

void transform_tohost_VkDeviceImageSubresourceInfoKHR(VkDecoderGlobalState* resourceTracker,
                                                      VkDeviceImageSubresourceInfoKHR* toTransform);

void transform_fromhost_VkDeviceImageSubresourceInfoKHR(
    VkDecoderGlobalState* resourceTracker, VkDeviceImageSubresourceInfoKHR* toTransform);

void transform_tohost_VkSubresourceLayout2KHR(VkDecoderGlobalState* resourceTracker,
                                              VkSubresourceLayout2KHR* toTransform);

void transform_fromhost_VkSubresourceLayout2KHR(VkDecoderGlobalState* resourceTracker,
                                                VkSubresourceLayout2KHR* toTransform);

void transform_tohost_VkPipelineCreateFlags2CreateInfoKHR(
    VkDecoderGlobalState* resourceTracker, VkPipelineCreateFlags2CreateInfoKHR* toTransform);

void transform_fromhost_VkPipelineCreateFlags2CreateInfoKHR(
    VkDecoderGlobalState* resourceTracker, VkPipelineCreateFlags2CreateInfoKHR* toTransform);

void transform_tohost_VkBufferUsageFlags2CreateInfoKHR(
    VkDecoderGlobalState* resourceTracker, VkBufferUsageFlags2CreateInfoKHR* toTransform);

void transform_fromhost_VkBufferUsageFlags2CreateInfoKHR(
    VkDecoderGlobalState* resourceTracker, VkBufferUsageFlags2CreateInfoKHR* toTransform);

#endif
#ifdef VK_ANDROID_native_buffer
void transform_tohost_VkNativeBufferUsage2ANDROID(VkDecoderGlobalState* resourceTracker,
                                                  VkNativeBufferUsage2ANDROID* toTransform);

void transform_fromhost_VkNativeBufferUsage2ANDROID(VkDecoderGlobalState* resourceTracker,
                                                    VkNativeBufferUsage2ANDROID* toTransform);

void transform_tohost_VkNativeBufferANDROID(VkDecoderGlobalState* resourceTracker,
                                            VkNativeBufferANDROID* toTransform);

void transform_fromhost_VkNativeBufferANDROID(VkDecoderGlobalState* resourceTracker,
                                              VkNativeBufferANDROID* toTransform);

void transform_tohost_VkSwapchainImageCreateInfoANDROID(
    VkDecoderGlobalState* resourceTracker, VkSwapchainImageCreateInfoANDROID* toTransform);

void transform_fromhost_VkSwapchainImageCreateInfoANDROID(
    VkDecoderGlobalState* resourceTracker, VkSwapchainImageCreateInfoANDROID* toTransform);

void transform_tohost_VkPhysicalDevicePresentationPropertiesANDROID(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDevicePresentationPropertiesANDROID* toTransform);

void transform_fromhost_VkPhysicalDevicePresentationPropertiesANDROID(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDevicePresentationPropertiesANDROID* toTransform);

#endif
#ifdef VK_EXT_debug_report
void transform_tohost_VkDebugReportCallbackCreateInfoEXT(
    VkDecoderGlobalState* resourceTracker, VkDebugReportCallbackCreateInfoEXT* toTransform);

void transform_fromhost_VkDebugReportCallbackCreateInfoEXT(
    VkDecoderGlobalState* resourceTracker, VkDebugReportCallbackCreateInfoEXT* toTransform);

#endif
#ifdef VK_EXT_transform_feedback
void transform_tohost_VkPhysicalDeviceTransformFeedbackFeaturesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceTransformFeedbackFeaturesEXT* toTransform);

void transform_fromhost_VkPhysicalDeviceTransformFeedbackFeaturesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceTransformFeedbackFeaturesEXT* toTransform);

void transform_tohost_VkPhysicalDeviceTransformFeedbackPropertiesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceTransformFeedbackPropertiesEXT* toTransform);

void transform_fromhost_VkPhysicalDeviceTransformFeedbackPropertiesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceTransformFeedbackPropertiesEXT* toTransform);

void transform_tohost_VkPipelineRasterizationStateStreamCreateInfoEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPipelineRasterizationStateStreamCreateInfoEXT* toTransform);

void transform_fromhost_VkPipelineRasterizationStateStreamCreateInfoEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPipelineRasterizationStateStreamCreateInfoEXT* toTransform);

#endif
#ifdef VK_EXT_texture_compression_astc_hdr
DEFINE_ALIAS_FUNCTION(transform_tohost_VkPhysicalDeviceTextureCompressionASTCHDRFeatures,
                      transform_tohost_VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPhysicalDeviceTextureCompressionASTCHDRFeatures,
                      transform_fromhost_VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT)

#endif
#ifdef VK_EXT_depth_clip_enable
void transform_tohost_VkPhysicalDeviceDepthClipEnableFeaturesEXT(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceDepthClipEnableFeaturesEXT* toTransform);

void transform_fromhost_VkPhysicalDeviceDepthClipEnableFeaturesEXT(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceDepthClipEnableFeaturesEXT* toTransform);

void transform_tohost_VkPipelineRasterizationDepthClipStateCreateInfoEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPipelineRasterizationDepthClipStateCreateInfoEXT* toTransform);

void transform_fromhost_VkPipelineRasterizationDepthClipStateCreateInfoEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPipelineRasterizationDepthClipStateCreateInfoEXT* toTransform);

#endif
#ifdef VK_EXT_debug_utils
void transform_tohost_VkDebugUtilsLabelEXT(VkDecoderGlobalState* resourceTracker,
                                           VkDebugUtilsLabelEXT* toTransform);

void transform_fromhost_VkDebugUtilsLabelEXT(VkDecoderGlobalState* resourceTracker,
                                             VkDebugUtilsLabelEXT* toTransform);

void transform_tohost_VkDebugUtilsObjectNameInfoEXT(VkDecoderGlobalState* resourceTracker,
                                                    VkDebugUtilsObjectNameInfoEXT* toTransform);

void transform_fromhost_VkDebugUtilsObjectNameInfoEXT(VkDecoderGlobalState* resourceTracker,
                                                      VkDebugUtilsObjectNameInfoEXT* toTransform);

void transform_tohost_VkDebugUtilsMessengerCallbackDataEXT(
    VkDecoderGlobalState* resourceTracker, VkDebugUtilsMessengerCallbackDataEXT* toTransform);

void transform_fromhost_VkDebugUtilsMessengerCallbackDataEXT(
    VkDecoderGlobalState* resourceTracker, VkDebugUtilsMessengerCallbackDataEXT* toTransform);

void transform_tohost_VkDebugUtilsMessengerCreateInfoEXT(
    VkDecoderGlobalState* resourceTracker, VkDebugUtilsMessengerCreateInfoEXT* toTransform);

void transform_fromhost_VkDebugUtilsMessengerCreateInfoEXT(
    VkDecoderGlobalState* resourceTracker, VkDebugUtilsMessengerCreateInfoEXT* toTransform);

void transform_tohost_VkDebugUtilsObjectTagInfoEXT(VkDecoderGlobalState* resourceTracker,
                                                   VkDebugUtilsObjectTagInfoEXT* toTransform);

void transform_fromhost_VkDebugUtilsObjectTagInfoEXT(VkDecoderGlobalState* resourceTracker,
                                                     VkDebugUtilsObjectTagInfoEXT* toTransform);

#endif
#ifdef VK_EXT_inline_uniform_block
DEFINE_ALIAS_FUNCTION(transform_tohost_VkPhysicalDeviceInlineUniformBlockFeatures,
                      transform_tohost_VkPhysicalDeviceInlineUniformBlockFeaturesEXT)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPhysicalDeviceInlineUniformBlockFeatures,
                      transform_fromhost_VkPhysicalDeviceInlineUniformBlockFeaturesEXT)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkPhysicalDeviceInlineUniformBlockProperties,
                      transform_tohost_VkPhysicalDeviceInlineUniformBlockPropertiesEXT)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPhysicalDeviceInlineUniformBlockProperties,
                      transform_fromhost_VkPhysicalDeviceInlineUniformBlockPropertiesEXT)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkWriteDescriptorSetInlineUniformBlock,
                      transform_tohost_VkWriteDescriptorSetInlineUniformBlockEXT)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkWriteDescriptorSetInlineUniformBlock,
                      transform_fromhost_VkWriteDescriptorSetInlineUniformBlockEXT)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkDescriptorPoolInlineUniformBlockCreateInfo,
                      transform_tohost_VkDescriptorPoolInlineUniformBlockCreateInfoEXT)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkDescriptorPoolInlineUniformBlockCreateInfo,
                      transform_fromhost_VkDescriptorPoolInlineUniformBlockCreateInfoEXT)

#endif
#ifdef VK_EXT_image_drm_format_modifier
void transform_tohost_VkDrmFormatModifierPropertiesEXT(
    VkDecoderGlobalState* resourceTracker, VkDrmFormatModifierPropertiesEXT* toTransform);

void transform_fromhost_VkDrmFormatModifierPropertiesEXT(
    VkDecoderGlobalState* resourceTracker, VkDrmFormatModifierPropertiesEXT* toTransform);

void transform_tohost_VkDrmFormatModifierPropertiesListEXT(
    VkDecoderGlobalState* resourceTracker, VkDrmFormatModifierPropertiesListEXT* toTransform);

void transform_fromhost_VkDrmFormatModifierPropertiesListEXT(
    VkDecoderGlobalState* resourceTracker, VkDrmFormatModifierPropertiesListEXT* toTransform);

void transform_tohost_VkPhysicalDeviceImageDrmFormatModifierInfoEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceImageDrmFormatModifierInfoEXT* toTransform);

void transform_fromhost_VkPhysicalDeviceImageDrmFormatModifierInfoEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceImageDrmFormatModifierInfoEXT* toTransform);

void transform_tohost_VkImageDrmFormatModifierListCreateInfoEXT(
    VkDecoderGlobalState* resourceTracker, VkImageDrmFormatModifierListCreateInfoEXT* toTransform);

void transform_fromhost_VkImageDrmFormatModifierListCreateInfoEXT(
    VkDecoderGlobalState* resourceTracker, VkImageDrmFormatModifierListCreateInfoEXT* toTransform);

void transform_tohost_VkImageDrmFormatModifierExplicitCreateInfoEXT(
    VkDecoderGlobalState* resourceTracker,
    VkImageDrmFormatModifierExplicitCreateInfoEXT* toTransform);

void transform_fromhost_VkImageDrmFormatModifierExplicitCreateInfoEXT(
    VkDecoderGlobalState* resourceTracker,
    VkImageDrmFormatModifierExplicitCreateInfoEXT* toTransform);

void transform_tohost_VkImageDrmFormatModifierPropertiesEXT(
    VkDecoderGlobalState* resourceTracker, VkImageDrmFormatModifierPropertiesEXT* toTransform);

void transform_fromhost_VkImageDrmFormatModifierPropertiesEXT(
    VkDecoderGlobalState* resourceTracker, VkImageDrmFormatModifierPropertiesEXT* toTransform);

void transform_tohost_VkDrmFormatModifierProperties2EXT(
    VkDecoderGlobalState* resourceTracker, VkDrmFormatModifierProperties2EXT* toTransform);

void transform_fromhost_VkDrmFormatModifierProperties2EXT(
    VkDecoderGlobalState* resourceTracker, VkDrmFormatModifierProperties2EXT* toTransform);

void transform_tohost_VkDrmFormatModifierPropertiesList2EXT(
    VkDecoderGlobalState* resourceTracker, VkDrmFormatModifierPropertiesList2EXT* toTransform);

void transform_fromhost_VkDrmFormatModifierPropertiesList2EXT(
    VkDecoderGlobalState* resourceTracker, VkDrmFormatModifierPropertiesList2EXT* toTransform);

#endif
#ifdef VK_EXT_external_memory_host
void transform_tohost_VkImportMemoryHostPointerInfoEXT(
    VkDecoderGlobalState* resourceTracker, VkImportMemoryHostPointerInfoEXT* toTransform);

void transform_fromhost_VkImportMemoryHostPointerInfoEXT(
    VkDecoderGlobalState* resourceTracker, VkImportMemoryHostPointerInfoEXT* toTransform);

void transform_tohost_VkMemoryHostPointerPropertiesEXT(
    VkDecoderGlobalState* resourceTracker, VkMemoryHostPointerPropertiesEXT* toTransform);

void transform_fromhost_VkMemoryHostPointerPropertiesEXT(
    VkDecoderGlobalState* resourceTracker, VkMemoryHostPointerPropertiesEXT* toTransform);

void transform_tohost_VkPhysicalDeviceExternalMemoryHostPropertiesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceExternalMemoryHostPropertiesEXT* toTransform);

void transform_fromhost_VkPhysicalDeviceExternalMemoryHostPropertiesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceExternalMemoryHostPropertiesEXT* toTransform);

#endif
#ifdef VK_EXT_vertex_attribute_divisor
void transform_tohost_VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT* toTransform);

void transform_fromhost_VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT* toTransform);

void transform_tohost_VkVertexInputBindingDivisorDescriptionEXT(
    VkDecoderGlobalState* resourceTracker, VkVertexInputBindingDivisorDescriptionEXT* toTransform);

void transform_fromhost_VkVertexInputBindingDivisorDescriptionEXT(
    VkDecoderGlobalState* resourceTracker, VkVertexInputBindingDivisorDescriptionEXT* toTransform);

void transform_tohost_VkPipelineVertexInputDivisorStateCreateInfoEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPipelineVertexInputDivisorStateCreateInfoEXT* toTransform);

void transform_fromhost_VkPipelineVertexInputDivisorStateCreateInfoEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPipelineVertexInputDivisorStateCreateInfoEXT* toTransform);

void transform_tohost_VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT* toTransform);

void transform_fromhost_VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT* toTransform);

#endif
#ifdef VK_EXT_pipeline_creation_feedback
DEFINE_ALIAS_FUNCTION(transform_tohost_VkPipelineCreationFeedbackCreateInfo,
                      transform_tohost_VkPipelineCreationFeedbackCreateInfoEXT)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPipelineCreationFeedbackCreateInfo,
                      transform_fromhost_VkPipelineCreationFeedbackCreateInfoEXT)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkPipelineCreationFeedback,
                      transform_tohost_VkPipelineCreationFeedbackEXT)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPipelineCreationFeedback,
                      transform_fromhost_VkPipelineCreationFeedbackEXT)

#endif
#ifdef VK_EXT_fragment_density_map
void transform_tohost_VkPhysicalDeviceFragmentDensityMapFeaturesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceFragmentDensityMapFeaturesEXT* toTransform);

void transform_fromhost_VkPhysicalDeviceFragmentDensityMapFeaturesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceFragmentDensityMapFeaturesEXT* toTransform);

void transform_tohost_VkPhysicalDeviceFragmentDensityMapPropertiesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceFragmentDensityMapPropertiesEXT* toTransform);

void transform_fromhost_VkPhysicalDeviceFragmentDensityMapPropertiesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceFragmentDensityMapPropertiesEXT* toTransform);

void transform_tohost_VkRenderPassFragmentDensityMapCreateInfoEXT(
    VkDecoderGlobalState* resourceTracker,
    VkRenderPassFragmentDensityMapCreateInfoEXT* toTransform);

void transform_fromhost_VkRenderPassFragmentDensityMapCreateInfoEXT(
    VkDecoderGlobalState* resourceTracker,
    VkRenderPassFragmentDensityMapCreateInfoEXT* toTransform);

#endif
#ifdef VK_EXT_scalar_block_layout
DEFINE_ALIAS_FUNCTION(transform_tohost_VkPhysicalDeviceScalarBlockLayoutFeatures,
                      transform_tohost_VkPhysicalDeviceScalarBlockLayoutFeaturesEXT)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPhysicalDeviceScalarBlockLayoutFeatures,
                      transform_fromhost_VkPhysicalDeviceScalarBlockLayoutFeaturesEXT)

#endif
#ifdef VK_EXT_subgroup_size_control
DEFINE_ALIAS_FUNCTION(transform_tohost_VkPhysicalDeviceSubgroupSizeControlFeatures,
                      transform_tohost_VkPhysicalDeviceSubgroupSizeControlFeaturesEXT)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPhysicalDeviceSubgroupSizeControlFeatures,
                      transform_fromhost_VkPhysicalDeviceSubgroupSizeControlFeaturesEXT)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkPhysicalDeviceSubgroupSizeControlProperties,
                      transform_tohost_VkPhysicalDeviceSubgroupSizeControlPropertiesEXT)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPhysicalDeviceSubgroupSizeControlProperties,
                      transform_fromhost_VkPhysicalDeviceSubgroupSizeControlPropertiesEXT)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkPipelineShaderStageRequiredSubgroupSizeCreateInfo,
                      transform_tohost_VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPipelineShaderStageRequiredSubgroupSizeCreateInfo,
                      transform_fromhost_VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT)

#endif
#ifdef VK_EXT_tooling_info
DEFINE_ALIAS_FUNCTION(transform_tohost_VkPhysicalDeviceToolProperties,
                      transform_tohost_VkPhysicalDeviceToolPropertiesEXT)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPhysicalDeviceToolProperties,
                      transform_fromhost_VkPhysicalDeviceToolPropertiesEXT)

#endif
#ifdef VK_EXT_validation_features
void transform_tohost_VkValidationFeaturesEXT(VkDecoderGlobalState* resourceTracker,
                                              VkValidationFeaturesEXT* toTransform);

void transform_fromhost_VkValidationFeaturesEXT(VkDecoderGlobalState* resourceTracker,
                                                VkValidationFeaturesEXT* toTransform);

#endif
#ifdef VK_EXT_provoking_vertex
void transform_tohost_VkPhysicalDeviceProvokingVertexFeaturesEXT(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceProvokingVertexFeaturesEXT* toTransform);

void transform_fromhost_VkPhysicalDeviceProvokingVertexFeaturesEXT(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceProvokingVertexFeaturesEXT* toTransform);

void transform_tohost_VkPhysicalDeviceProvokingVertexPropertiesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceProvokingVertexPropertiesEXT* toTransform);

void transform_fromhost_VkPhysicalDeviceProvokingVertexPropertiesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceProvokingVertexPropertiesEXT* toTransform);

void transform_tohost_VkPipelineRasterizationProvokingVertexStateCreateInfoEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPipelineRasterizationProvokingVertexStateCreateInfoEXT* toTransform);

void transform_fromhost_VkPipelineRasterizationProvokingVertexStateCreateInfoEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPipelineRasterizationProvokingVertexStateCreateInfoEXT* toTransform);

#endif
#ifdef VK_EXT_line_rasterization
void transform_tohost_VkPhysicalDeviceLineRasterizationFeaturesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceLineRasterizationFeaturesEXT* toTransform);

void transform_fromhost_VkPhysicalDeviceLineRasterizationFeaturesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceLineRasterizationFeaturesEXT* toTransform);

void transform_tohost_VkPhysicalDeviceLineRasterizationPropertiesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceLineRasterizationPropertiesEXT* toTransform);

void transform_fromhost_VkPhysicalDeviceLineRasterizationPropertiesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceLineRasterizationPropertiesEXT* toTransform);

void transform_tohost_VkPipelineRasterizationLineStateCreateInfoEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPipelineRasterizationLineStateCreateInfoEXT* toTransform);

void transform_fromhost_VkPipelineRasterizationLineStateCreateInfoEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPipelineRasterizationLineStateCreateInfoEXT* toTransform);

#endif
#ifdef VK_EXT_index_type_uint8
void transform_tohost_VkPhysicalDeviceIndexTypeUint8FeaturesEXT(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceIndexTypeUint8FeaturesEXT* toTransform);

void transform_fromhost_VkPhysicalDeviceIndexTypeUint8FeaturesEXT(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceIndexTypeUint8FeaturesEXT* toTransform);

#endif
#ifdef VK_EXT_extended_dynamic_state
void transform_tohost_VkPhysicalDeviceExtendedDynamicStateFeaturesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceExtendedDynamicStateFeaturesEXT* toTransform);

void transform_fromhost_VkPhysicalDeviceExtendedDynamicStateFeaturesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceExtendedDynamicStateFeaturesEXT* toTransform);

#endif
#ifdef VK_EXT_host_image_copy
void transform_tohost_VkPhysicalDeviceHostImageCopyFeaturesEXT(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceHostImageCopyFeaturesEXT* toTransform);

void transform_fromhost_VkPhysicalDeviceHostImageCopyFeaturesEXT(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceHostImageCopyFeaturesEXT* toTransform);

void transform_tohost_VkPhysicalDeviceHostImageCopyPropertiesEXT(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceHostImageCopyPropertiesEXT* toTransform);

void transform_fromhost_VkPhysicalDeviceHostImageCopyPropertiesEXT(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceHostImageCopyPropertiesEXT* toTransform);

void transform_tohost_VkMemoryToImageCopyEXT(VkDecoderGlobalState* resourceTracker,
                                             VkMemoryToImageCopyEXT* toTransform);

void transform_fromhost_VkMemoryToImageCopyEXT(VkDecoderGlobalState* resourceTracker,
                                               VkMemoryToImageCopyEXT* toTransform);

void transform_tohost_VkImageToMemoryCopyEXT(VkDecoderGlobalState* resourceTracker,
                                             VkImageToMemoryCopyEXT* toTransform);

void transform_fromhost_VkImageToMemoryCopyEXT(VkDecoderGlobalState* resourceTracker,
                                               VkImageToMemoryCopyEXT* toTransform);

void transform_tohost_VkCopyMemoryToImageInfoEXT(VkDecoderGlobalState* resourceTracker,
                                                 VkCopyMemoryToImageInfoEXT* toTransform);

void transform_fromhost_VkCopyMemoryToImageInfoEXT(VkDecoderGlobalState* resourceTracker,
                                                   VkCopyMemoryToImageInfoEXT* toTransform);

void transform_tohost_VkCopyImageToMemoryInfoEXT(VkDecoderGlobalState* resourceTracker,
                                                 VkCopyImageToMemoryInfoEXT* toTransform);

void transform_fromhost_VkCopyImageToMemoryInfoEXT(VkDecoderGlobalState* resourceTracker,
                                                   VkCopyImageToMemoryInfoEXT* toTransform);

void transform_tohost_VkCopyImageToImageInfoEXT(VkDecoderGlobalState* resourceTracker,
                                                VkCopyImageToImageInfoEXT* toTransform);

void transform_fromhost_VkCopyImageToImageInfoEXT(VkDecoderGlobalState* resourceTracker,
                                                  VkCopyImageToImageInfoEXT* toTransform);

void transform_tohost_VkHostImageLayoutTransitionInfoEXT(
    VkDecoderGlobalState* resourceTracker, VkHostImageLayoutTransitionInfoEXT* toTransform);

void transform_fromhost_VkHostImageLayoutTransitionInfoEXT(
    VkDecoderGlobalState* resourceTracker, VkHostImageLayoutTransitionInfoEXT* toTransform);

void transform_tohost_VkSubresourceHostMemcpySizeEXT(VkDecoderGlobalState* resourceTracker,
                                                     VkSubresourceHostMemcpySizeEXT* toTransform);

void transform_fromhost_VkSubresourceHostMemcpySizeEXT(VkDecoderGlobalState* resourceTracker,
                                                       VkSubresourceHostMemcpySizeEXT* toTransform);

void transform_tohost_VkHostImageCopyDevicePerformanceQueryEXT(
    VkDecoderGlobalState* resourceTracker, VkHostImageCopyDevicePerformanceQueryEXT* toTransform);

void transform_fromhost_VkHostImageCopyDevicePerformanceQueryEXT(
    VkDecoderGlobalState* resourceTracker, VkHostImageCopyDevicePerformanceQueryEXT* toTransform);

DEFINE_ALIAS_FUNCTION(transform_tohost_VkSubresourceLayout2KHR,
                      transform_tohost_VkSubresourceLayout2EXT)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkSubresourceLayout2KHR,
                      transform_fromhost_VkSubresourceLayout2EXT)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkImageSubresource2KHR,
                      transform_tohost_VkImageSubresource2EXT)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkImageSubresource2KHR,
                      transform_fromhost_VkImageSubresource2EXT)

#endif
#ifdef VK_EXT_swapchain_maintenance1
void transform_tohost_VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT* toTransform);

void transform_fromhost_VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT* toTransform);

void transform_tohost_VkSwapchainPresentFenceInfoEXT(VkDecoderGlobalState* resourceTracker,
                                                     VkSwapchainPresentFenceInfoEXT* toTransform);

void transform_fromhost_VkSwapchainPresentFenceInfoEXT(VkDecoderGlobalState* resourceTracker,
                                                       VkSwapchainPresentFenceInfoEXT* toTransform);

void transform_tohost_VkSwapchainPresentModesCreateInfoEXT(
    VkDecoderGlobalState* resourceTracker, VkSwapchainPresentModesCreateInfoEXT* toTransform);

void transform_fromhost_VkSwapchainPresentModesCreateInfoEXT(
    VkDecoderGlobalState* resourceTracker, VkSwapchainPresentModesCreateInfoEXT* toTransform);

void transform_tohost_VkSwapchainPresentModeInfoEXT(VkDecoderGlobalState* resourceTracker,
                                                    VkSwapchainPresentModeInfoEXT* toTransform);

void transform_fromhost_VkSwapchainPresentModeInfoEXT(VkDecoderGlobalState* resourceTracker,
                                                      VkSwapchainPresentModeInfoEXT* toTransform);

void transform_tohost_VkSwapchainPresentScalingCreateInfoEXT(
    VkDecoderGlobalState* resourceTracker, VkSwapchainPresentScalingCreateInfoEXT* toTransform);

void transform_fromhost_VkSwapchainPresentScalingCreateInfoEXT(
    VkDecoderGlobalState* resourceTracker, VkSwapchainPresentScalingCreateInfoEXT* toTransform);

void transform_tohost_VkReleaseSwapchainImagesInfoEXT(VkDecoderGlobalState* resourceTracker,
                                                      VkReleaseSwapchainImagesInfoEXT* toTransform);

void transform_fromhost_VkReleaseSwapchainImagesInfoEXT(
    VkDecoderGlobalState* resourceTracker, VkReleaseSwapchainImagesInfoEXT* toTransform);

#endif
#ifdef VK_EXT_shader_demote_to_helper_invocation
DEFINE_ALIAS_FUNCTION(transform_tohost_VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures,
                      transform_tohost_VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures,
                      transform_fromhost_VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT)

#endif
#ifdef VK_EXT_texel_buffer_alignment
void transform_tohost_VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT* toTransform);

void transform_fromhost_VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT* toTransform);

DEFINE_ALIAS_FUNCTION(transform_tohost_VkPhysicalDeviceTexelBufferAlignmentProperties,
                      transform_tohost_VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPhysicalDeviceTexelBufferAlignmentProperties,
                      transform_fromhost_VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT)

#endif
#ifdef VK_EXT_device_memory_report
void transform_tohost_VkPhysicalDeviceDeviceMemoryReportFeaturesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceDeviceMemoryReportFeaturesEXT* toTransform);

void transform_fromhost_VkPhysicalDeviceDeviceMemoryReportFeaturesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceDeviceMemoryReportFeaturesEXT* toTransform);

void transform_tohost_VkDeviceMemoryReportCallbackDataEXT(
    VkDecoderGlobalState* resourceTracker, VkDeviceMemoryReportCallbackDataEXT* toTransform);

void transform_fromhost_VkDeviceMemoryReportCallbackDataEXT(
    VkDecoderGlobalState* resourceTracker, VkDeviceMemoryReportCallbackDataEXT* toTransform);

void transform_tohost_VkDeviceDeviceMemoryReportCreateInfoEXT(
    VkDecoderGlobalState* resourceTracker, VkDeviceDeviceMemoryReportCreateInfoEXT* toTransform);

void transform_fromhost_VkDeviceDeviceMemoryReportCreateInfoEXT(
    VkDecoderGlobalState* resourceTracker, VkDeviceDeviceMemoryReportCreateInfoEXT* toTransform);

#endif
#ifdef VK_EXT_robustness2
void transform_tohost_VkPhysicalDeviceRobustness2FeaturesEXT(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceRobustness2FeaturesEXT* toTransform);

void transform_fromhost_VkPhysicalDeviceRobustness2FeaturesEXT(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceRobustness2FeaturesEXT* toTransform);

void transform_tohost_VkPhysicalDeviceRobustness2PropertiesEXT(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceRobustness2PropertiesEXT* toTransform);

void transform_fromhost_VkPhysicalDeviceRobustness2PropertiesEXT(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDeviceRobustness2PropertiesEXT* toTransform);

#endif
#ifdef VK_EXT_custom_border_color
void transform_tohost_VkSamplerCustomBorderColorCreateInfoEXT(
    VkDecoderGlobalState* resourceTracker, VkSamplerCustomBorderColorCreateInfoEXT* toTransform);

void transform_fromhost_VkSamplerCustomBorderColorCreateInfoEXT(
    VkDecoderGlobalState* resourceTracker, VkSamplerCustomBorderColorCreateInfoEXT* toTransform);

void transform_tohost_VkPhysicalDeviceCustomBorderColorPropertiesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceCustomBorderColorPropertiesEXT* toTransform);

void transform_fromhost_VkPhysicalDeviceCustomBorderColorPropertiesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceCustomBorderColorPropertiesEXT* toTransform);

void transform_tohost_VkPhysicalDeviceCustomBorderColorFeaturesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceCustomBorderColorFeaturesEXT* toTransform);

void transform_fromhost_VkPhysicalDeviceCustomBorderColorFeaturesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceCustomBorderColorFeaturesEXT* toTransform);

#endif
#ifdef VK_EXT_private_data
DEFINE_ALIAS_FUNCTION(transform_tohost_VkPhysicalDevicePrivateDataFeatures,
                      transform_tohost_VkPhysicalDevicePrivateDataFeaturesEXT)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPhysicalDevicePrivateDataFeatures,
                      transform_fromhost_VkPhysicalDevicePrivateDataFeaturesEXT)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkDevicePrivateDataCreateInfo,
                      transform_tohost_VkDevicePrivateDataCreateInfoEXT)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkDevicePrivateDataCreateInfo,
                      transform_fromhost_VkDevicePrivateDataCreateInfoEXT)

DEFINE_ALIAS_FUNCTION(transform_tohost_VkPrivateDataSlotCreateInfo,
                      transform_tohost_VkPrivateDataSlotCreateInfoEXT)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPrivateDataSlotCreateInfo,
                      transform_fromhost_VkPrivateDataSlotCreateInfoEXT)

#endif
#ifdef VK_EXT_pipeline_creation_cache_control
DEFINE_ALIAS_FUNCTION(transform_tohost_VkPhysicalDevicePipelineCreationCacheControlFeatures,
                      transform_tohost_VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPhysicalDevicePipelineCreationCacheControlFeatures,
                      transform_fromhost_VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT)

#endif
#ifdef VK_EXT_graphics_pipeline_library
void transform_tohost_VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT* toTransform);

void transform_fromhost_VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT* toTransform);

void transform_tohost_VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT* toTransform);

void transform_fromhost_VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT* toTransform);

void transform_tohost_VkGraphicsPipelineLibraryCreateInfoEXT(
    VkDecoderGlobalState* resourceTracker, VkGraphicsPipelineLibraryCreateInfoEXT* toTransform);

void transform_fromhost_VkGraphicsPipelineLibraryCreateInfoEXT(
    VkDecoderGlobalState* resourceTracker, VkGraphicsPipelineLibraryCreateInfoEXT* toTransform);

#endif
#ifdef VK_EXT_ycbcr_2plane_444_formats
void transform_tohost_VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT* toTransform);

void transform_fromhost_VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT* toTransform);

#endif
#ifdef VK_EXT_image_robustness
DEFINE_ALIAS_FUNCTION(transform_tohost_VkPhysicalDeviceImageRobustnessFeatures,
                      transform_tohost_VkPhysicalDeviceImageRobustnessFeaturesEXT)

DEFINE_ALIAS_FUNCTION(transform_fromhost_VkPhysicalDeviceImageRobustnessFeatures,
                      transform_fromhost_VkPhysicalDeviceImageRobustnessFeaturesEXT)

#endif
#ifdef VK_EXT_image_compression_control
void transform_tohost_VkPhysicalDeviceImageCompressionControlFeaturesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceImageCompressionControlFeaturesEXT* toTransform);

void transform_fromhost_VkPhysicalDeviceImageCompressionControlFeaturesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceImageCompressionControlFeaturesEXT* toTransform);

void transform_tohost_VkImageCompressionControlEXT(VkDecoderGlobalState* resourceTracker,
                                                   VkImageCompressionControlEXT* toTransform);

void transform_fromhost_VkImageCompressionControlEXT(VkDecoderGlobalState* resourceTracker,
                                                     VkImageCompressionControlEXT* toTransform);

void transform_tohost_VkImageCompressionPropertiesEXT(VkDecoderGlobalState* resourceTracker,
                                                      VkImageCompressionPropertiesEXT* toTransform);

void transform_fromhost_VkImageCompressionPropertiesEXT(
    VkDecoderGlobalState* resourceTracker, VkImageCompressionPropertiesEXT* toTransform);

#endif
#ifdef VK_EXT_4444_formats
void transform_tohost_VkPhysicalDevice4444FormatsFeaturesEXT(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDevice4444FormatsFeaturesEXT* toTransform);

void transform_fromhost_VkPhysicalDevice4444FormatsFeaturesEXT(
    VkDecoderGlobalState* resourceTracker, VkPhysicalDevice4444FormatsFeaturesEXT* toTransform);

#endif
#ifdef VK_EXT_primitive_topology_list_restart
void transform_tohost_VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT* toTransform);

void transform_fromhost_VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT* toTransform);

#endif
#ifdef VK_EXT_extended_dynamic_state2
void transform_tohost_VkPhysicalDeviceExtendedDynamicState2FeaturesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceExtendedDynamicState2FeaturesEXT* toTransform);

void transform_fromhost_VkPhysicalDeviceExtendedDynamicState2FeaturesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceExtendedDynamicState2FeaturesEXT* toTransform);

#endif
#ifdef VK_EXT_color_write_enable
void transform_tohost_VkPhysicalDeviceColorWriteEnableFeaturesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceColorWriteEnableFeaturesEXT* toTransform);

void transform_fromhost_VkPhysicalDeviceColorWriteEnableFeaturesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceColorWriteEnableFeaturesEXT* toTransform);

void transform_tohost_VkPipelineColorWriteCreateInfoEXT(
    VkDecoderGlobalState* resourceTracker, VkPipelineColorWriteCreateInfoEXT* toTransform);

void transform_fromhost_VkPipelineColorWriteCreateInfoEXT(
    VkDecoderGlobalState* resourceTracker, VkPipelineColorWriteCreateInfoEXT* toTransform);

#endif
#ifdef VK_GOOGLE_gfxstream
void transform_tohost_VkImportColorBufferGOOGLE(VkDecoderGlobalState* resourceTracker,
                                                VkImportColorBufferGOOGLE* toTransform);

void transform_fromhost_VkImportColorBufferGOOGLE(VkDecoderGlobalState* resourceTracker,
                                                  VkImportColorBufferGOOGLE* toTransform);

void transform_tohost_VkImportBufferGOOGLE(VkDecoderGlobalState* resourceTracker,
                                           VkImportBufferGOOGLE* toTransform);

void transform_fromhost_VkImportBufferGOOGLE(VkDecoderGlobalState* resourceTracker,
                                             VkImportBufferGOOGLE* toTransform);

void transform_tohost_VkCreateBlobGOOGLE(VkDecoderGlobalState* resourceTracker,
                                         VkCreateBlobGOOGLE* toTransform);

void transform_fromhost_VkCreateBlobGOOGLE(VkDecoderGlobalState* resourceTracker,
                                           VkCreateBlobGOOGLE* toTransform);

#endif
#ifdef VK_EXT_image_compression_control_swapchain
void transform_tohost_VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT* toTransform);

void transform_fromhost_VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT* toTransform);

#endif
#ifdef VK_KHR_ray_tracing_pipeline
void transform_tohost_VkRayTracingShaderGroupCreateInfoKHR(
    VkDecoderGlobalState* resourceTracker, VkRayTracingShaderGroupCreateInfoKHR* toTransform);

void transform_fromhost_VkRayTracingShaderGroupCreateInfoKHR(
    VkDecoderGlobalState* resourceTracker, VkRayTracingShaderGroupCreateInfoKHR* toTransform);

void transform_tohost_VkRayTracingPipelineInterfaceCreateInfoKHR(
    VkDecoderGlobalState* resourceTracker, VkRayTracingPipelineInterfaceCreateInfoKHR* toTransform);

void transform_fromhost_VkRayTracingPipelineInterfaceCreateInfoKHR(
    VkDecoderGlobalState* resourceTracker, VkRayTracingPipelineInterfaceCreateInfoKHR* toTransform);

void transform_tohost_VkRayTracingPipelineCreateInfoKHR(
    VkDecoderGlobalState* resourceTracker, VkRayTracingPipelineCreateInfoKHR* toTransform);

void transform_fromhost_VkRayTracingPipelineCreateInfoKHR(
    VkDecoderGlobalState* resourceTracker, VkRayTracingPipelineCreateInfoKHR* toTransform);

void transform_tohost_VkPhysicalDeviceRayTracingPipelineFeaturesKHR(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceRayTracingPipelineFeaturesKHR* toTransform);

void transform_fromhost_VkPhysicalDeviceRayTracingPipelineFeaturesKHR(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceRayTracingPipelineFeaturesKHR* toTransform);

void transform_tohost_VkPhysicalDeviceRayTracingPipelinePropertiesKHR(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceRayTracingPipelinePropertiesKHR* toTransform);

void transform_fromhost_VkPhysicalDeviceRayTracingPipelinePropertiesKHR(
    VkDecoderGlobalState* resourceTracker,
    VkPhysicalDeviceRayTracingPipelinePropertiesKHR* toTransform);

void transform_tohost_VkStridedDeviceAddressRegionKHR(VkDecoderGlobalState* resourceTracker,
                                                      VkStridedDeviceAddressRegionKHR* toTransform);

void transform_fromhost_VkStridedDeviceAddressRegionKHR(
    VkDecoderGlobalState* resourceTracker, VkStridedDeviceAddressRegionKHR* toTransform);

void transform_tohost_VkTraceRaysIndirectCommandKHR(VkDecoderGlobalState* resourceTracker,
                                                    VkTraceRaysIndirectCommandKHR* toTransform);

void transform_fromhost_VkTraceRaysIndirectCommandKHR(VkDecoderGlobalState* resourceTracker,
                                                      VkTraceRaysIndirectCommandKHR* toTransform);

#endif
}  // namespace vk
}  // namespace gfxstream
