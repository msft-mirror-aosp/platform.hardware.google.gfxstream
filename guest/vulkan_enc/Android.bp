/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package {
    // See: http://go/android-license-faq
    default_applicable_licenses: ["hardware_google_gfxstream_license"],
}

genrule {
    name: "gfxstream_vk_entrypoints_header",
    srcs: [":libmesa_vulkan_xml_gfxstream"],
    out: ["gfxstream_vk_entrypoints.h"],
    tools: ["vk_entrypoints_gen_gfxstream"],
    cmd: "python3 $(location vk_entrypoints_gen_gfxstream) --xml " +
        "$(location :libmesa_vulkan_xml_gfxstream) --proto --weak --out-h " +
        "$(location gfxstream_vk_entrypoints.h) --out-c " +
        "$(genDir)/placeholder.c --prefix gfxstream_vk --beta false",
}

genrule {
    name: "gfxstream_vk_entrypoints_impl",
    srcs: [":libmesa_vulkan_xml_gfxstream"],
    out: ["gfxstream_vk_entrypoints.c"],
    tools: ["vk_entrypoints_gen_gfxstream"],
    cmd: "python3 $(location vk_entrypoints_gen_gfxstream) --xml " +
        "$(location :libmesa_vulkan_xml_gfxstream) --proto --weak --out-h " +
        "$(genDir)/gfxstream_vk_entrypoints.h --out-c " +
        "$(location gfxstream_vk_entrypoints.c) --prefix gfxstream_vk " +
        "--beta false",
}

cc_library_static {
    name: "libgfxstream_guest_vulkan_entrypoints",
    host_supported: true,
    vendor: true,
    defaults: [
        "mesa_common_defaults_gfxstream",
    ],
    header_libs: [
        "mesa_common_headers_gfxstream",
    ],
    static_libs: [
        "libmesa_vulkan_util_gfxstream",
    ],
    shared_libs: [
        "libcutils",
    ],
    generated_headers: [
        "gfxstream_vk_entrypoints_header",
    ],
    generated_sources: [
        "gfxstream_vk_entrypoints_impl",
    ],
    ldflags: [
        "-Wl,-Bsymbolic",
        "-Wl,--gc-sections",
    ],
    export_generated_headers: [
        "gfxstream_vk_entrypoints_header",
    ],
}

genrule {
    name: "gfxstream_codegen_impl",
    srcs: [
        ":mesa_vulkan_gfxstream_xml",
        ":gfxstream_vulkan_xml",
    ],
    out: [
        "goldfish_vk_counting_guest.cpp",
        "goldfish_vk_deepcopy_guest.cpp",
        "goldfish_vk_extension_structs_guest.cpp",
        "goldfish_vk_marshaling_guest.cpp",
        "goldfish_vk_reserved_marshaling_guest.cpp",
        "goldfish_vk_transform_guest.cpp",
        "VkEncoder.cpp",
        "func_table.cpp",
    ],
    tools: ["genvk_gfxstream"],
    cmd: "GFXSTREAM_NO_CLANG_FMT=1 CEREAL_VARIANT=guest GFXSTREAM_GUEST_ENCODER_DIR=$(genDir) " +
        "python3 $(location genvk_gfxstream) -registry $(location :gfxstream_vulkan_xml) " +
        "-registryGfxstream $(location :mesa_vulkan_gfxstream_xml) cereal -o $(genDir)/tmp",
}

genrule {
    name: "gfxstream_codegen_headers",
    srcs: [
        ":mesa_vulkan_gfxstream_xml",
        ":gfxstream_vulkan_xml",
    ],
    out: [
        "vulkan_gfxstream_structure_type.h",
        "VkEncoder.h",
        "goldfish_vk_counting_guest.h",
        "goldfish_vk_deepcopy_guest.h",
        "goldfish_vk_marshaling_guest.h",
        "goldfish_vk_extension_structs_guest.h",
        "goldfish_vk_reserved_marshaling_guest.h",
        "goldfish_vk_transform_guest.h",
    ],
    tools: ["genvk_gfxstream"],
    cmd: "GFXSTREAM_NO_CLANG_FMT=1 CEREAL_VARIANT=guest GFXSTREAM_GUEST_ENCODER_DIR=$(genDir) " +
        "python3 $(location genvk_gfxstream) -registry $(location :gfxstream_vulkan_xml) " +
        "-registryGfxstream $(location :mesa_vulkan_gfxstream_xml) cereal -o $(genDir)/tmp",
}

genrule {
    name: "vulkan_gfxstream_header",
    srcs: [
        ":mesa_vulkan_gfxstream_xml",
    ],
    out: [
        "vulkan_gfxstream.h",
    ],
    tools: ["genvk_gfxstream"],
    cmd: "GFXSTREAM_NO_CLANG_FMT=1 CEREAL_VARIANT=guest" +
        "python3 $(location genvk_gfxstream) -registry $(location :mesa_vulkan_gfxstream_xml) vulkan_gfxstream.h " +
        "-o $(genDir)",
}

cc_library_headers {
    name: "vulkan_enc_headers",
    export_include_dirs: ["."],
    host_supported: true,
    vendor_available: true,
}

filegroup {
    name: "vulkan_enc_impl",
    srcs: [
        "AndroidHardwareBuffer.cpp",
        "CommandBufferStagingStream.cpp",
        "DescriptorSetVirtualization.cpp",
        "HostVisibleMemoryVirtualization.cpp",
        "Resources.cpp",
        "ResourceTracker.cpp",
        "Validation.cpp",
        "VulkanHandleMapping.cpp",
        "VulkanStreamGuest.cpp",
        "gfxstream_vk_private.cpp",
        "GfxStreamVulkanConnection.cpp",
    ],
}

cc_library_static {
    name: "libvulkan_enc",
    defaults: [
        "libgfxstream_guest_cc_defaults",
        "gfxstream_guest_cc_defaults",
        "libplatform_virtgpu_defaults",
    ],
    header_libs: [
        "libgfxstream_vulkan_headers",
        "libgfxstream_guest_iostream",
        "libnativewindow_headers",
        "mesa_common_headers_gfxstream",
        "aemu_common_headers",
    ],
    generated_headers: [
        "vk_cmd_queue_header_gfxstream",
        "vk_physical_device_features_header_gfxstream",
        "vk_physical_device_properties_header_gfxstream",
        "u_format_pack_header_gfxstream",
        "gfxstream_codegen_headers",
        "vulkan_gfxstream_header",
    ],
    generated_sources: [
        "gfxstream_codegen_impl",
    ],
    shared_libs: [
        "libcutils",
        "liblog",
        "libOpenglCodecCommon",
    ],
    static_libs: [
        "libarect",
        "libdrm",
        "libgfxstream_androidemu_static",
        "libGoldfishAddressSpace",
        "libmesa_vulkan_util_gfxstream",
        "gfxstream_base",
        "libmesa_vulkan_runtime_gfxstream",
        "libgfxstream_guest_android",
        "libgfxstream_guest_vulkan_entrypoints",
        "libmesa_util_gfxstream",
        "libmesa_util_format_gfxstream",
        "libmesa_util_c11_gfxstream",
        "libgfxstream_guest_connection_manager",
    ],
    cflags: [
        "-DLOG_TAG=\"goldfish_vulkan\"",
        "-DVK_ANDROID_native_buffer",
        "-DVK_EXT_device_memory_report",
        "-DVK_GOOGLE_gfxstream",
        "-DVK_NO_PROTOTYPES",
        "-fstrict-aliasing",
        "-Werror",
        "-Wno-missing-field-initializers",
        "-Wno-unused-parameter",
        "-DHAVE_PTHREAD=1",
        "-DHAVE_TIMESPEC_GET",
        "-DHAVE_STRUCT_TIMESPEC",
    ],
    srcs: [
        ":vulkan_enc_impl",
    ],
    export_include_dirs: [
        ".",
    ],
    ldflags: [
        // Mesa always adds Bsymbolic when available (see 'ld_args_bsymbolic' in Meson build). Duplicate that
        // behavior here. '--gc-sections' has stronger justification: this lets drivers drop
        // shared code unused by that specific driver (particularly relevant for Vulkan drivers).
        "-Wl,-Bsymbolic",
        "-Wl,--gc-sections",
    ],
    target: {
        android: {
            shared_libs: [
                "libnativewindow",
            ],
            header_libs: [
                "hwvulkan_headers",
            ],
        },
    },
}
